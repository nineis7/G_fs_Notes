def @main(%input_ids: Tensor[(1, 512), int64], %attention_mask: Tensor[(1, 512), int64], param_se_scopes=[SEScope(device_type=1, virtual_device_id=0, target=Target(kind='llvm', keys={'cpu'}, attrs={"link-params': (bool)0}, host=Target(kind='llvm', keys={'cpu'}, attrs={"link-params': (bool)0}))), SEScope(device_type=1, virtual_device_id=0, target=Target(kind='llvm', keys={'cpu'}, attrs={"link-params': (bool)0}, host=Target(kind='llvm', keys={'cpu'}, attrs={"link-params': (bool)0})))], result_se_scope=SEScope(device_type=1, virtual_device_id=0, target=Target(kind='llvm', keys={'cpu'}, attrs={"link-params': (bool)0}, host=Target(kind='llvm', keys={'cpu'}, attrs={"link-params': (bool)0}))), hash="348a0ecbcad94d06", weight_layout="NC8n") -> (Tensor[(1, 512, 768), float32], Tensor[(1, 768), float32]) {
  %50 = cast(%input_ids, dtype="int32") /* ty=Tensor[(1, 512), int32] */;
  %51 = fn (%p012: Tensor[(1, 512), int32], Compiler="opu.embedding", Primitive=1) -> Tensor[(1, 512, 768), float32] {
    %48 = take(meta[relay.Constant][0] /* ty=Tensor[(30522, 768), float32] */, %p012, axis=0) /* ty=Tensor[(1, 512, 768), float32] */;
    %49 = add(%48, meta[relay.Constant][1] /* ty=Tensor[(1, 512, 768), float32] */) /* ty=Tensor[(1, 512, 768), float32] */;
    add(%49, meta[relay.Constant][2] /* ty=Tensor[(1, 512, 768), float32] */) /* ty=Tensor[(1, 512, 768), float32] */
  };
  %52 = %51(%50) /* ty=Tensor[(1, 512, 768), float32] */;
  %53 = nn.layer_norm(%52, meta[relay.Constant][3] /* ty=Tensor[(768), float32] */, meta[relay.Constant][4] /* ty=Tensor[(768), float32] */, epsilon=1e-12f) /* ty=Tensor[(1, 512, 768), float32] */;
  
  %54 = reshape(%53, newshape=[-1, 768]) /* ty=Tensor[(512, 768), float32] */;
  %55 = nn.contrib_dense_pack(%54, meta[relay.Constant][5] /* ty=Tensor[(96, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(512, 768), float32] */;
  %56 = reshape(%55, newshape=[1, 512, 768]) /* ty=Tensor[(1, 512, 768), float32] */;
  %57 = add(%56, meta[relay.Constant][6] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 512, 768), float32] */;
  
  %58 = reshape(%57, newshape=[1, 512, 12, 64]) /* ty=Tensor[(1, 512, 12, 64), float32] */;
  %59 = transpose(%58, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 512, 64), float32] */;
  %60 = nn.contrib_dense_pack(%54, meta[relay.Constant][7] /* ty=Tensor[(96, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(512, 768), float32] */;
  %61 = reshape(%60, newshape=[1, 512, 768]) /* ty=Tensor[(1, 512, 768), float32] */;
  %62 = add(%61, meta[relay.Constant][8] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 512, 768), float32] */;
  %63 = reshape(%62, newshape=[1, 512, 12, 64]) /* ty=Tensor[(1, 512, 12, 64), float32] */;
  %64 = transpose(%63, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 512, 64), float32] */;
  
  %65 = reshape(%59, newshape=[-1, 512, 64]) /* ty=Tensor[(12, 512, 64), float32] */;
  %66 = reshape(%64, newshape=[-1, 512, 64]) /* ty=Tensor[(12, 512, 64), float32] */;
  %67 = nn.batch_matmul(%65, %66, transpose_b=True) /* ty=Tensor[(12, 512, 512), float32] */;
  %68 = reshape(%67, newshape=[1, 12, 512, 512]) /* ty=Tensor[(1, 12, 512, 512), float32] */;
  %69 = expand_dims(%attention_mask, axis=1) /* ty=Tensor[(1, 1, 512), int64] */;
  %70 = expand_dims(%69, axis=2) /* ty=Tensor[(1, 1, 1, 512), int64] */;
  %71 = cast(%70, dtype="float32") /* ty=Tensor[(1, 1, 1, 512), float32] */;
  %72 = subtract(1f /* ty=float32 */, %71) /* ty=Tensor[(1, 1, 1, 512), float32] */;
  %73 = divide(%68, 8f /* ty=float32 */) /* ty=Tensor[(1, 12, 512, 512), float32] */;
  %74 = multiply(%72, -10000f /* ty=float32 */) /* ty=Tensor[(1, 1, 1, 512), float32] */;
  %75 = add(%73, %74) /* ty=Tensor[(1, 12, 512, 512), float32] */;
  %76 = nn.softmax(%75) /* ty=Tensor[(1, 12, 512, 512), float32] */;
  
  %77 = nn.contrib_dense_pack(%54, meta[relay.Constant][9] /* ty=Tensor[(96, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(512, 768), float32] */;
  %78 = reshape(%77, newshape=[1, 512, 768]) /* ty=Tensor[(1, 512, 768), float32] */;
  %79 = add(%78, meta[relay.Constant][10] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 512, 768), float32] */;
  %80 = reshape(%79, newshape=[1, 512, 12, 64]) /* ty=Tensor[(1, 512, 12, 64), float32] */;
  %81 = transpose(%80, axes=[0, 2, 3, 1]) /* ty=Tensor[(1, 12, 64, 512), float32] */;
  
  %82 = reshape(%76, newshape=[-1, 512, 512]) /* ty=Tensor[(12, 512, 512), float32] */;
  %83 = reshape(%81, newshape=[-1, 64, 512]) /* ty=Tensor[(12, 64, 512), float32] */;
  %84 = nn.batch_matmul(%82, %83, transpose_b=True) /* ty=Tensor[(12, 512, 64), float32] */;
  %85 = reshape(%84, newshape=[1, 12, 512, 64]) /* ty=Tensor[(1, 12, 512, 64), float32] */;
  %86 = transpose(%85, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 512, 12, 64), float32] */;
  %87 = reshape(%86, newshape=[512, 768]) /* ty=Tensor[(512, 768), float32] */;
  
  %88 = nn.contrib_dense_pack(%87, meta[relay.Constant][11] /* ty=Tensor[(96, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(512, 768), float32] */;
  %89 = reshape(%88, newshape=[1, 512, 768]) /* ty=Tensor[(1, 512, 768), float32] */;
  %90 = add(%89, meta[relay.Constant][12] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 512, 768), float32] */;
  %91 = add(%90, %53) /* ty=Tensor[(1, 512, 768), float32] */;
  %92 = nn.layer_norm(%91, meta[relay.Constant][13] /* ty=Tensor[(768), float32] */, meta[relay.Constant][14] /* ty=Tensor[(768), float32] */, epsilon=1e-12f) /* ty=Tensor[(1, 512, 768), float32] */;
  %93 = reshape(%92, newshape=[-1, 768]) /* ty=Tensor[(512, 768), float32] */;
  
  %94 = nn.contrib_dense_pack(%93, meta[relay.Constant][15] /* ty=Tensor[(384, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(512, 3072), float32] */;
  %95 = reshape(%94, newshape=[1, 512, 3072]) /* ty=Tensor[(1, 512, 3072), float32] */;
  %96 = add(%95, meta[relay.Constant][16] /* ty=Tensor[(3072), float32] */) /* ty=Tensor[(1, 512, 3072), float32] */;
  %97 = fn (%p011: Tensor[(1, 512, 3072), float32], Compiler="opu.gelu", Primitive=1) -> Tensor[(1, 512, 3072), float32] {
    %44 = multiply(%p011, 0.707107f /* ty=float32 */) /* ty=Tensor[(1, 512, 3072), float32] */;
    %45 = erf(%44) /* ty=Tensor[(1, 512, 3072), float32] */;
    %46 = multiply(%45, 0.5f /* ty=float32 */) /* ty=Tensor[(1, 512, 3072), float32] */;
    %47 = add(0.5f /* ty=float32 */, %46) /* ty=Tensor[(1, 512, 3072), float32] */;
    multiply(%p011, %47) /* ty=Tensor[(1, 512, 3072), float32] */
  };
  %98 = %97(%96) /* ty=Tensor[(1, 512, 3072), float32] */;
  %99 = reshape(%98, newshape=[-1, 3072]) /* ty=Tensor[(512, 3072), float32] */;
  
  %100 = nn.contrib_dense_pack(%99, meta[relay.Constant][17] /* ty=Tensor[(96, 3072, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(512, 768), float32] */;
  %101 = reshape(%100, newshape=[1, 512, 768]) /* ty=Tensor[(1, 512, 768), float32] */;
  %102 = add(%101, meta[relay.Constant][18] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 512, 768), float32] */;
  %103 = add(%102, %92) /* ty=Tensor[(1, 512, 768), float32] */;
  %104 = nn.layer_norm(%103, meta[relay.Constant][19] /* ty=Tensor[(768), float32] */, meta[relay.Constant][20] /* ty=Tensor[(768), float32] */, epsilon=1e-12f) /* ty=Tensor[(1, 512, 768), float32] */;
  %105 = reshape(%104, newshape=[-1, 768]) /* ty=Tensor[(512, 768), float32] */;
  
  %106 = nn.contrib_dense_pack(%105, meta[relay.Constant][21] /* ty=Tensor[(96, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(512, 768), float32] */;
  %107 = reshape(%106, newshape=[1, 512, 768]) /* ty=Tensor[(1, 512, 768), float32] */;
  %108 = add(%107, meta[relay.Constant][22] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 512, 768), float32] */;
  %109 = reshape(%108, newshape=[1, 512, 12, 64]) /* ty=Tensor[(1, 512, 12, 64), float32] */;
  %110 = transpose(%109, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 512, 64), float32] */;
  
  %111 = nn.contrib_dense_pack(%105, meta[relay.Constant][23] /* ty=Tensor[(96, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(512, 768), float32] */;
  %112 = reshape(%111, newshape=[1, 512, 768]) /* ty=Tensor[(1, 512, 768), float32] */;
  %113 = add(%112, meta[relay.Constant][24] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 512, 768), float32] */;
  %114 = reshape(%113, newshape=[1, 512, 12, 64]) /* ty=Tensor[(1, 512, 12, 64), float32] */;
  %115 = transpose(%114, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 512, 64), float32] */;
  
  %116 = reshape(%110, newshape=[-1, 512, 64]) /* ty=Tensor[(12, 512, 64), float32] */;
  %117 = reshape(%115, newshape=[-1, 512, 64]) /* ty=Tensor[(12, 512, 64), float32] */;
  %118 = nn.batch_matmul(%116, %117, transpose_b=True) /* ty=Tensor[(12, 512, 512), float32] */;
  %119 = reshape(%118, newshape=[1, 12, 512, 512]) /* ty=Tensor[(1, 12, 512, 512), float32] */;
  %120 = divide(%119, 8f /* ty=float32 */) /* ty=Tensor[(1, 12, 512, 512), float32] */;
  %121 = add(%120, %74) /* ty=Tensor[(1, 12, 512, 512), float32] */;
  %122 = nn.softmax(%121) /* ty=Tensor[(1, 12, 512, 512), float32] */;
  
  %123 = nn.contrib_dense_pack(%105, meta[relay.Constant][25] /* ty=Tensor[(96, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(512, 768), float32] */;
  %124 = reshape(%123, newshape=[1, 512, 768]) /* ty=Tensor[(1, 512, 768), float32] */;
  %125 = add(%124, meta[relay.Constant][26] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 512, 768), float32] */;
  %126 = reshape(%125, newshape=[1, 512, 12, 64]) /* ty=Tensor[(1, 512, 12, 64), float32] */;
  %127 = transpose(%126, axes=[0, 2, 3, 1]) /* ty=Tensor[(1, 12, 64, 512), float32] */;
  
  %128 = reshape(%122, newshape=[-1, 512, 512]) /* ty=Tensor[(12, 512, 512), float32] */;
  %129 = reshape(%127, newshape=[-1, 64, 512]) /* ty=Tensor[(12, 64, 512), float32] */;
  %130 = nn.batch_matmul(%128, %129, transpose_b=True) /* ty=Tensor[(12, 512, 64), float32] */;
  %131 = reshape(%130, newshape=[1, 12, 512, 64]) /* ty=Tensor[(1, 12, 512, 64), float32] */;
  %132 = transpose(%131, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 512, 12, 64), float32] */;
  %133 = reshape(%132, newshape=[512, 768]) /* ty=Tensor[(512, 768), float32] */;
  %134 = nn.contrib_dense_pack(%133, meta[relay.Constant][27] /* ty=Tensor[(96, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(512, 768), float32] */;
  %135 = reshape(%134, newshape=[1, 512, 768]) /* ty=Tensor[(1, 512, 768), float32] */;
  %136 = add(%135, meta[relay.Constant][28] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 512, 768), float32] */;
  %137 = add(%136, %104) /* ty=Tensor[(1, 512, 768), float32] */;
  %138 = nn.layer_norm(%137, meta[relay.Constant][29] /* ty=Tensor[(768), float32] */, meta[relay.Constant][30] /* ty=Tensor[(768), float32] */, epsilon=1e-12f) /* ty=Tensor[(1, 512, 768), float32] */;
  %139 = reshape(%138, newshape=[-1, 768]) /* ty=Tensor[(512, 768), float32] */;
  %140 = nn.contrib_dense_pack(%139, meta[relay.Constant][31] /* ty=Tensor[(384, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(512, 3072), float32] */;
  %141 = reshape(%140, newshape=[1, 512, 3072]) /* ty=Tensor[(1, 512, 3072), float32] */;
  %142 = add(%141, meta[relay.Constant][32] /* ty=Tensor[(3072), float32] */) /* ty=Tensor[(1, 512, 3072), float32] */;
  %143 = fn (%p010: Tensor[(1, 512, 3072), float32], Compiler="opu.gelu", Primitive=1) -> Tensor[(1, 512, 3072), float32] {
    %40 = multiply(%p010, 0.707107f /* ty=float32 */) /* ty=Tensor[(1, 512, 3072), float32] */;
    %41 = erf(%40) /* ty=Tensor[(1, 512, 3072), float32] */;
    %42 = multiply(%41, 0.5f /* ty=float32 */) /* ty=Tensor[(1, 512, 3072), float32] */;
    %43 = add(0.5f /* ty=float32 */, %42) /* ty=Tensor[(1, 512, 3072), float32] */;
    multiply(%p010, %43) /* ty=Tensor[(1, 512, 3072), float32] */
  };
  %144 = %143(%142) /* ty=Tensor[(1, 512, 3072), float32] */;
  %145 = reshape(%144, newshape=[-1, 3072]) /* ty=Tensor[(512, 3072), float32] */;
  %146 = nn.contrib_dense_pack(%145, meta[relay.Constant][33] /* ty=Tensor[(96, 3072, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(512, 768), float32] */;
  %147 = reshape(%146, newshape=[1, 512, 768]) /* ty=Tensor[(1, 512, 768), float32] */;
  %148 = add(%147, meta[relay.Constant][34] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 512, 768), float32] */;
  %149 = add(%148, %138) /* ty=Tensor[(1, 512, 768), float32] */;
  %150 = nn.layer_norm(%149, meta[relay.Constant][35] /* ty=Tensor[(768), float32] */, meta[relay.Constant][36] /* ty=Tensor[(768), float32] */, epsilon=1e-12f) /* ty=Tensor[(1, 512, 768), float32] */;
  %151 = reshape(%150, newshape=[-1, 768]) /* ty=Tensor[(512, 768), float32] */;
  %152 = nn.contrib_dense_pack(%151, meta[relay.Constant][37] /* ty=Tensor[(96, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(512, 768), float32] */;
  %153 = reshape(%152, newshape=[1, 512, 768]) /* ty=Tensor[(1, 512, 768), float32] */;
  %154 = add(%153, meta[relay.Constant][38] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 512, 768), float32] */;
  %155 = reshape(%154, newshape=[1, 512, 12, 64]) /* ty=Tensor[(1, 512, 12, 64), float32] */;
  %156 = transpose(%155, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 512, 64), float32] */;
  %157 = nn.contrib_dense_pack(%151, meta[relay.Constant][39] /* ty=Tensor[(96, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(512, 768), float32] */;
  %158 = reshape(%157, newshape=[1, 512, 768]) /* ty=Tensor[(1, 512, 768), float32] */;
  %159 = add(%158, meta[relay.Constant][40] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 512, 768), float32] */;
  %160 = reshape(%159, newshape=[1, 512, 12, 64]) /* ty=Tensor[(1, 512, 12, 64), float32] */;
  %161 = transpose(%160, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 512, 64), float32] */;
  %162 = reshape(%156, newshape=[-1, 512, 64]) /* ty=Tensor[(12, 512, 64), float32] */;
  %163 = reshape(%161, newshape=[-1, 512, 64]) /* ty=Tensor[(12, 512, 64), float32] */;
  %164 = nn.batch_matmul(%162, %163, transpose_b=True) /* ty=Tensor[(12, 512, 512), float32] */;
  %165 = reshape(%164, newshape=[1, 12, 512, 512]) /* ty=Tensor[(1, 12, 512, 512), float32] */;
  %166 = divide(%165, 8f /* ty=float32 */) /* ty=Tensor[(1, 12, 512, 512), float32] */;
  %167 = add(%166, %74) /* ty=Tensor[(1, 12, 512, 512), float32] */;
  %168 = nn.softmax(%167) /* ty=Tensor[(1, 12, 512, 512), float32] */;
  %169 = nn.contrib_dense_pack(%151, meta[relay.Constant][41] /* ty=Tensor[(96, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(512, 768), float32] */;
  %170 = reshape(%169, newshape=[1, 512, 768]) /* ty=Tensor[(1, 512, 768), float32] */;
  %171 = add(%170, meta[relay.Constant][42] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 512, 768), float32] */;
  %172 = reshape(%171, newshape=[1, 512, 12, 64]) /* ty=Tensor[(1, 512, 12, 64), float32] */;
  %173 = transpose(%172, axes=[0, 2, 3, 1]) /* ty=Tensor[(1, 12, 64, 512), float32] */;
  %174 = reshape(%168, newshape=[-1, 512, 512]) /* ty=Tensor[(12, 512, 512), float32] */;
  %175 = reshape(%173, newshape=[-1, 64, 512]) /* ty=Tensor[(12, 64, 512), float32] */;
  %176 = nn.batch_matmul(%174, %175, transpose_b=True) /* ty=Tensor[(12, 512, 64), float32] */;
  %177 = reshape(%176, newshape=[1, 12, 512, 64]) /* ty=Tensor[(1, 12, 512, 64), float32] */;
  %178 = transpose(%177, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 512, 12, 64), float32] */;
  %179 = reshape(%178, newshape=[512, 768]) /* ty=Tensor[(512, 768), float32] */;
  %180 = nn.contrib_dense_pack(%179, meta[relay.Constant][43] /* ty=Tensor[(96, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(512, 768), float32] */;
  %181 = reshape(%180, newshape=[1, 512, 768]) /* ty=Tensor[(1, 512, 768), float32] */;
  %182 = add(%181, meta[relay.Constant][44] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 512, 768), float32] */;
  %183 = add(%182, %150) /* ty=Tensor[(1, 512, 768), float32] */;
  %184 = nn.layer_norm(%183, meta[relay.Constant][45] /* ty=Tensor[(768), float32] */, meta[relay.Constant][46] /* ty=Tensor[(768), float32] */, epsilon=1e-12f) /* ty=Tensor[(1, 512, 768), float32] */;
  %185 = reshape(%184, newshape=[-1, 768]) /* ty=Tensor[(512, 768), float32] */;
  %186 = nn.contrib_dense_pack(%185, meta[relay.Constant][47] /* ty=Tensor[(384, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(512, 3072), float32] */;
  %187 = reshape(%186, newshape=[1, 512, 3072]) /* ty=Tensor[(1, 512, 3072), float32] */;
  %188 = add(%187, meta[relay.Constant][48] /* ty=Tensor[(3072), float32] */) /* ty=Tensor[(1, 512, 3072), float32] */;
  %189 = fn (%p09: Tensor[(1, 512, 3072), float32], Compiler="opu.gelu", Primitive=1) -> Tensor[(1, 512, 3072), float32] {
    %36 = multiply(%p09, 0.707107f /* ty=float32 */) /* ty=Tensor[(1, 512, 3072), float32] */;
    %37 = erf(%36) /* ty=Tensor[(1, 512, 3072), float32] */;
    %38 = multiply(%37, 0.5f /* ty=float32 */) /* ty=Tensor[(1, 512, 3072), float32] */;
    %39 = add(0.5f /* ty=float32 */, %38) /* ty=Tensor[(1, 512, 3072), float32] */;
    multiply(%p09, %39) /* ty=Tensor[(1, 512, 3072), float32] */
  };
  %190 = %189(%188) /* ty=Tensor[(1, 512, 3072), float32] */;
  %191 = reshape(%190, newshape=[-1, 3072]) /* ty=Tensor[(512, 3072), float32] */;
  %192 = nn.contrib_dense_pack(%191, meta[relay.Constant][49] /* ty=Tensor[(96, 3072, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(512, 768), float32] */;
  %193 = reshape(%192, newshape=[1, 512, 768]) /* ty=Tensor[(1, 512, 768), float32] */;
  %194 = add(%193, meta[relay.Constant][50] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 512, 768), float32] */;
  %195 = add(%194, %184) /* ty=Tensor[(1, 512, 768), float32] */;
  %196 = nn.layer_norm(%195, meta[relay.Constant][51] /* ty=Tensor[(768), float32] */, meta[relay.Constant][52] /* ty=Tensor[(768), float32] */, epsilon=1e-12f) /* ty=Tensor[(1, 512, 768), float32] */;
  %197 = reshape(%196, newshape=[-1, 768]) /* ty=Tensor[(512, 768), float32] */;
  %198 = nn.contrib_dense_pack(%197, meta[relay.Constant][53] /* ty=Tensor[(96, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(512, 768), float32] */;
  %199 = reshape(%198, newshape=[1, 512, 768]) /* ty=Tensor[(1, 512, 768), float32] */;
  %200 = add(%199, meta[relay.Constant][54] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 512, 768), float32] */;
  %201 = reshape(%200, newshape=[1, 512, 12, 64]) /* ty=Tensor[(1, 512, 12, 64), float32] */;
  %202 = transpose(%201, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 512, 64), float32] */;
  %203 = nn.contrib_dense_pack(%197, meta[relay.Constant][55] /* ty=Tensor[(96, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(512, 768), float32] */;
  %204 = reshape(%203, newshape=[1, 512, 768]) /* ty=Tensor[(1, 512, 768), float32] */;
  %205 = add(%204, meta[relay.Constant][56] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 512, 768), float32] */;
  %206 = reshape(%205, newshape=[1, 512, 12, 64]) /* ty=Tensor[(1, 512, 12, 64), float32] */;
  %207 = transpose(%206, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 512, 64), float32] */;
  %208 = reshape(%202, newshape=[-1, 512, 64]) /* ty=Tensor[(12, 512, 64), float32] */;
  %209 = reshape(%207, newshape=[-1, 512, 64]) /* ty=Tensor[(12, 512, 64), float32] */;
  %210 = nn.batch_matmul(%208, %209, transpose_b=True) /* ty=Tensor[(12, 512, 512), float32] */;
  %211 = reshape(%210, newshape=[1, 12, 512, 512]) /* ty=Tensor[(1, 12, 512, 512), float32] */;
  %212 = divide(%211, 8f /* ty=float32 */) /* ty=Tensor[(1, 12, 512, 512), float32] */;
  %213 = add(%212, %74) /* ty=Tensor[(1, 12, 512, 512), float32] */;
  %214 = nn.softmax(%213) /* ty=Tensor[(1, 12, 512, 512), float32] */;
  %215 = nn.contrib_dense_pack(%197, meta[relay.Constant][57] /* ty=Tensor[(96, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(512, 768), float32] */;
  %216 = reshape(%215, newshape=[1, 512, 768]) /* ty=Tensor[(1, 512, 768), float32] */;
  %217 = add(%216, meta[relay.Constant][58] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 512, 768), float32] */;
  %218 = reshape(%217, newshape=[1, 512, 12, 64]) /* ty=Tensor[(1, 512, 12, 64), float32] */;
  %219 = transpose(%218, axes=[0, 2, 3, 1]) /* ty=Tensor[(1, 12, 64, 512), float32] */;
  %220 = reshape(%214, newshape=[-1, 512, 512]) /* ty=Tensor[(12, 512, 512), float32] */;
  %221 = reshape(%219, newshape=[-1, 64, 512]) /* ty=Tensor[(12, 64, 512), float32] */;
  %222 = nn.batch_matmul(%220, %221, transpose_b=True) /* ty=Tensor[(12, 512, 64), float32] */;
  %223 = reshape(%222, newshape=[1, 12, 512, 64]) /* ty=Tensor[(1, 12, 512, 64), float32] */;
  %224 = transpose(%223, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 512, 12, 64), float32] */;
  %225 = reshape(%224, newshape=[512, 768]) /* ty=Tensor[(512, 768), float32] */;
  %226 = nn.contrib_dense_pack(%225, meta[relay.Constant][59] /* ty=Tensor[(96, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(512, 768), float32] */;
  %227 = reshape(%226, newshape=[1, 512, 768]) /* ty=Tensor[(1, 512, 768), float32] */;
  %228 = add(%227, meta[relay.Constant][60] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 512, 768), float32] */;
  %229 = add(%228, %196) /* ty=Tensor[(1, 512, 768), float32] */;
  %230 = nn.layer_norm(%229, meta[relay.Constant][61] /* ty=Tensor[(768), float32] */, meta[relay.Constant][62] /* ty=Tensor[(768), float32] */, epsilon=1e-12f) /* ty=Tensor[(1, 512, 768), float32] */;
  %231 = reshape(%230, newshape=[-1, 768]) /* ty=Tensor[(512, 768), float32] */;
  %232 = nn.contrib_dense_pack(%231, meta[relay.Constant][63] /* ty=Tensor[(384, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(512, 3072), float32] */;
  %233 = reshape(%232, newshape=[1, 512, 3072]) /* ty=Tensor[(1, 512, 3072), float32] */;
  %234 = add(%233, meta[relay.Constant][64] /* ty=Tensor[(3072), float32] */) /* ty=Tensor[(1, 512, 3072), float32] */;
  %235 = fn (%p08: Tensor[(1, 512, 3072), float32], Compiler="opu.gelu", Primitive=1) -> Tensor[(1, 512, 3072), float32] {
    %32 = multiply(%p08, 0.707107f /* ty=float32 */) /* ty=Tensor[(1, 512, 3072), float32] */;
    %33 = erf(%32) /* ty=Tensor[(1, 512, 3072), float32] */;
    %34 = multiply(%33, 0.5f /* ty=float32 */) /* ty=Tensor[(1, 512, 3072), float32] */;
    %35 = add(0.5f /* ty=float32 */, %34) /* ty=Tensor[(1, 512, 3072), float32] */;
    multiply(%p08, %35) /* ty=Tensor[(1, 512, 3072), float32] */
  };
  %236 = %235(%234) /* ty=Tensor[(1, 512, 3072), float32] */;
  %237 = reshape(%236, newshape=[-1, 3072]) /* ty=Tensor[(512, 3072), float32] */;
  %238 = nn.contrib_dense_pack(%237, meta[relay.Constant][65] /* ty=Tensor[(96, 3072, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(512, 768), float32] */;
  %239 = reshape(%238, newshape=[1, 512, 768]) /* ty=Tensor[(1, 512, 768), float32] */;
  %240 = add(%239, meta[relay.Constant][66] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 512, 768), float32] */;
  %241 = add(%240, %230) /* ty=Tensor[(1, 512, 768), float32] */;
  %242 = nn.layer_norm(%241, meta[relay.Constant][67] /* ty=Tensor[(768), float32] */, meta[relay.Constant][68] /* ty=Tensor[(768), float32] */, epsilon=1e-12f) /* ty=Tensor[(1, 512, 768), float32] */;
  %243 = reshape(%242, newshape=[-1, 768]) /* ty=Tensor[(512, 768), float32] */;
  %244 = nn.contrib_dense_pack(%243, meta[relay.Constant][69] /* ty=Tensor[(96, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(512, 768), float32] */;
  %245 = reshape(%244, newshape=[1, 512, 768]) /* ty=Tensor[(1, 512, 768), float32] */;
  %246 = add(%245, meta[relay.Constant][70] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 512, 768), float32] */;
  %247 = reshape(%246, newshape=[1, 512, 12, 64]) /* ty=Tensor[(1, 512, 12, 64), float32] */;
  %248 = transpose(%247, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 512, 64), float32] */;
  %249 = nn.contrib_dense_pack(%243, meta[relay.Constant][71] /* ty=Tensor[(96, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(512, 768), float32] */;
  %250 = reshape(%249, newshape=[1, 512, 768]) /* ty=Tensor[(1, 512, 768), float32] */;
  %251 = add(%250, meta[relay.Constant][72] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 512, 768), float32] */;
  %252 = reshape(%251, newshape=[1, 512, 12, 64]) /* ty=Tensor[(1, 512, 12, 64), float32] */;
  %253 = transpose(%252, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 512, 64), float32] */;
  %254 = reshape(%248, newshape=[-1, 512, 64]) /* ty=Tensor[(12, 512, 64), float32] */;
  %255 = reshape(%253, newshape=[-1, 512, 64]) /* ty=Tensor[(12, 512, 64), float32] */;
  %256 = nn.batch_matmul(%254, %255, transpose_b=True) /* ty=Tensor[(12, 512, 512), float32] */;
  %257 = reshape(%256, newshape=[1, 12, 512, 512]) /* ty=Tensor[(1, 12, 512, 512), float32] */;
  %258 = divide(%257, 8f /* ty=float32 */) /* ty=Tensor[(1, 12, 512, 512), float32] */;
  %259 = add(%258, %74) /* ty=Tensor[(1, 12, 512, 512), float32] */;
  %260 = nn.softmax(%259) /* ty=Tensor[(1, 12, 512, 512), float32] */;
  %261 = nn.contrib_dense_pack(%243, meta[relay.Constant][73] /* ty=Tensor[(96, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(512, 768), float32] */;
  %262 = reshape(%261, newshape=[1, 512, 768]) /* ty=Tensor[(1, 512, 768), float32] */;
  %263 = add(%262, meta[relay.Constant][74] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 512, 768), float32] */;
  %264 = reshape(%263, newshape=[1, 512, 12, 64]) /* ty=Tensor[(1, 512, 12, 64), float32] */;
  %265 = transpose(%264, axes=[0, 2, 3, 1]) /* ty=Tensor[(1, 12, 64, 512), float32] */;
  %266 = reshape(%260, newshape=[-1, 512, 512]) /* ty=Tensor[(12, 512, 512), float32] */;
  %267 = reshape(%265, newshape=[-1, 64, 512]) /* ty=Tensor[(12, 64, 512), float32] */;
  %268 = nn.batch_matmul(%266, %267, transpose_b=True) /* ty=Tensor[(12, 512, 64), float32] */;
  %269 = reshape(%268, newshape=[1, 12, 512, 64]) /* ty=Tensor[(1, 12, 512, 64), float32] */;
  %270 = transpose(%269, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 512, 12, 64), float32] */;
  %271 = reshape(%270, newshape=[512, 768]) /* ty=Tensor[(512, 768), float32] */;
  %272 = nn.contrib_dense_pack(%271, meta[relay.Constant][75] /* ty=Tensor[(96, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(512, 768), float32] */;
  %273 = reshape(%272, newshape=[1, 512, 768]) /* ty=Tensor[(1, 512, 768), float32] */;
  %274 = add(%273, meta[relay.Constant][76] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 512, 768), float32] */;
  %275 = add(%274, %242) /* ty=Tensor[(1, 512, 768), float32] */;
  %276 = nn.layer_norm(%275, meta[relay.Constant][77] /* ty=Tensor[(768), float32] */, meta[relay.Constant][78] /* ty=Tensor[(768), float32] */, epsilon=1e-12f) /* ty=Tensor[(1, 512, 768), float32] */;
  %277 = reshape(%276, newshape=[-1, 768]) /* ty=Tensor[(512, 768), float32] */;
  %278 = nn.contrib_dense_pack(%277, meta[relay.Constant][79] /* ty=Tensor[(384, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(512, 3072), float32] */;
  %279 = reshape(%278, newshape=[1, 512, 3072]) /* ty=Tensor[(1, 512, 3072), float32] */;
  %280 = add(%279, meta[relay.Constant][80] /* ty=Tensor[(3072), float32] */) /* ty=Tensor[(1, 512, 3072), float32] */;
  %281 = fn (%p07: Tensor[(1, 512, 3072), float32], Compiler="opu.gelu", Primitive=1) -> Tensor[(1, 512, 3072), float32] {
    %28 = multiply(%p07, 0.707107f /* ty=float32 */) /* ty=Tensor[(1, 512, 3072), float32] */;
    %29 = erf(%28) /* ty=Tensor[(1, 512, 3072), float32] */;
    %30 = multiply(%29, 0.5f /* ty=float32 */) /* ty=Tensor[(1, 512, 3072), float32] */;
    %31 = add(0.5f /* ty=float32 */, %30) /* ty=Tensor[(1, 512, 3072), float32] */;
    multiply(%p07, %31) /* ty=Tensor[(1, 512, 3072), float32] */
  };
  %282 = %281(%280) /* ty=Tensor[(1, 512, 3072), float32] */;
  %283 = reshape(%282, newshape=[-1, 3072]) /* ty=Tensor[(512, 3072), float32] */;
  %284 = nn.contrib_dense_pack(%283, meta[relay.Constant][81] /* ty=Tensor[(96, 3072, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(512, 768), float32] */;
  %285 = reshape(%284, newshape=[1, 512, 768]) /* ty=Tensor[(1, 512, 768), float32] */;
  %286 = add(%285, meta[relay.Constant][82] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 512, 768), float32] */;
  %287 = add(%286, %276) /* ty=Tensor[(1, 512, 768), float32] */;
  %288 = nn.layer_norm(%287, meta[relay.Constant][83] /* ty=Tensor[(768), float32] */, meta[relay.Constant][84] /* ty=Tensor[(768), float32] */, epsilon=1e-12f) /* ty=Tensor[(1, 512, 768), float32] */;
  %289 = reshape(%288, newshape=[-1, 768]) /* ty=Tensor[(512, 768), float32] */;
  %290 = nn.contrib_dense_pack(%289, meta[relay.Constant][85] /* ty=Tensor[(96, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(512, 768), float32] */;
  %291 = reshape(%290, newshape=[1, 512, 768]) /* ty=Tensor[(1, 512, 768), float32] */;
  %292 = add(%291, meta[relay.Constant][86] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 512, 768), float32] */;
  %293 = reshape(%292, newshape=[1, 512, 12, 64]) /* ty=Tensor[(1, 512, 12, 64), float32] */;
  %294 = transpose(%293, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 512, 64), float32] */;
  %295 = nn.contrib_dense_pack(%289, meta[relay.Constant][87] /* ty=Tensor[(96, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(512, 768), float32] */;
  %296 = reshape(%295, newshape=[1, 512, 768]) /* ty=Tensor[(1, 512, 768), float32] */;
  %297 = add(%296, meta[relay.Constant][88] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 512, 768), float32] */;
  %298 = reshape(%297, newshape=[1, 512, 12, 64]) /* ty=Tensor[(1, 512, 12, 64), float32] */;
  %299 = transpose(%298, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 512, 64), float32] */;
  %300 = reshape(%294, newshape=[-1, 512, 64]) /* ty=Tensor[(12, 512, 64), float32] */;
  %301 = reshape(%299, newshape=[-1, 512, 64]) /* ty=Tensor[(12, 512, 64), float32] */;
  %302 = nn.batch_matmul(%300, %301, transpose_b=True) /* ty=Tensor[(12, 512, 512), float32] */;
  %303 = reshape(%302, newshape=[1, 12, 512, 512]) /* ty=Tensor[(1, 12, 512, 512), float32] */;
  %304 = divide(%303, 8f /* ty=float32 */) /* ty=Tensor[(1, 12, 512, 512), float32] */;
  %305 = add(%304, %74) /* ty=Tensor[(1, 12, 512, 512), float32] */;
  %306 = nn.softmax(%305) /* ty=Tensor[(1, 12, 512, 512), float32] */;
  %307 = nn.contrib_dense_pack(%289, meta[relay.Constant][89] /* ty=Tensor[(96, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(512, 768), float32] */;
  %308 = reshape(%307, newshape=[1, 512, 768]) /* ty=Tensor[(1, 512, 768), float32] */;
  %309 = add(%308, meta[relay.Constant][90] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 512, 768), float32] */;
  %310 = reshape(%309, newshape=[1, 512, 12, 64]) /* ty=Tensor[(1, 512, 12, 64), float32] */;
  %311 = transpose(%310, axes=[0, 2, 3, 1]) /* ty=Tensor[(1, 12, 64, 512), float32] */;
  %312 = reshape(%306, newshape=[-1, 512, 512]) /* ty=Tensor[(12, 512, 512), float32] */;
  %313 = reshape(%311, newshape=[-1, 64, 512]) /* ty=Tensor[(12, 64, 512), float32] */;
  %314 = nn.batch_matmul(%312, %313, transpose_b=True) /* ty=Tensor[(12, 512, 64), float32] */;
  %315 = reshape(%314, newshape=[1, 12, 512, 64]) /* ty=Tensor[(1, 12, 512, 64), float32] */;
  %316 = transpose(%315, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 512, 12, 64), float32] */;
  %317 = reshape(%316, newshape=[512, 768]) /* ty=Tensor[(512, 768), float32] */;
  %318 = nn.contrib_dense_pack(%317, meta[relay.Constant][91] /* ty=Tensor[(96, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(512, 768), float32] */;
  %319 = reshape(%318, newshape=[1, 512, 768]) /* ty=Tensor[(1, 512, 768), float32] */;
  %320 = add(%319, meta[relay.Constant][92] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 512, 768), float32] */;
  %321 = add(%320, %288) /* ty=Tensor[(1, 512, 768), float32] */;
  %322 = nn.layer_norm(%321, meta[relay.Constant][93] /* ty=Tensor[(768), float32] */, meta[relay.Constant][94] /* ty=Tensor[(768), float32] */, epsilon=1e-12f) /* ty=Tensor[(1, 512, 768), float32] */;
  %323 = reshape(%322, newshape=[-1, 768]) /* ty=Tensor[(512, 768), float32] */;
  %324 = nn.contrib_dense_pack(%323, meta[relay.Constant][95] /* ty=Tensor[(384, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(512, 3072), float32] */;
  %325 = reshape(%324, newshape=[1, 512, 3072]) /* ty=Tensor[(1, 512, 3072), float32] */;
  %326 = add(%325, meta[relay.Constant][96] /* ty=Tensor[(3072), float32] */) /* ty=Tensor[(1, 512, 3072), float32] */;
  %327 = fn (%p06: Tensor[(1, 512, 3072), float32], Compiler="opu.gelu", Primitive=1) -> Tensor[(1, 512, 3072), float32] {
    %24 = multiply(%p06, 0.707107f /* ty=float32 */) /* ty=Tensor[(1, 512, 3072), float32] */;
    %25 = erf(%24) /* ty=Tensor[(1, 512, 3072), float32] */;
    %26 = multiply(%25, 0.5f /* ty=float32 */) /* ty=Tensor[(1, 512, 3072), float32] */;
    %27 = add(0.5f /* ty=float32 */, %26) /* ty=Tensor[(1, 512, 3072), float32] */;
    multiply(%p06, %27) /* ty=Tensor[(1, 512, 3072), float32] */
  };
  %328 = %327(%326) /* ty=Tensor[(1, 512, 3072), float32] */;
  %329 = reshape(%328, newshape=[-1, 3072]) /* ty=Tensor[(512, 3072), float32] */;
  %330 = nn.contrib_dense_pack(%329, meta[relay.Constant][97] /* ty=Tensor[(96, 3072, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(512, 768), float32] */;
  %331 = reshape(%330, newshape=[1, 512, 768]) /* ty=Tensor[(1, 512, 768), float32] */;
  %332 = add(%331, meta[relay.Constant][98] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 512, 768), float32] */;
  %333 = add(%332, %322) /* ty=Tensor[(1, 512, 768), float32] */;
  %334 = nn.layer_norm(%333, meta[relay.Constant][99] /* ty=Tensor[(768), float32] */, meta[relay.Constant][100] /* ty=Tensor[(768), float32] */, epsilon=1e-12f) /* ty=Tensor[(1, 512, 768), float32] */;
  %335 = reshape(%334, newshape=[-1, 768]) /* ty=Tensor[(512, 768), float32] */;
  %336 = nn.contrib_dense_pack(%335, meta[relay.Constant][101] /* ty=Tensor[(96, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(512, 768), float32] */;
  %337 = reshape(%336, newshape=[1, 512, 768]) /* ty=Tensor[(1, 512, 768), float32] */;
  %338 = add(%337, meta[relay.Constant][102] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 512, 768), float32] */;
  %339 = reshape(%338, newshape=[1, 512, 12, 64]) /* ty=Tensor[(1, 512, 12, 64), float32] */;
  %340 = transpose(%339, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 512, 64), float32] */;
  %341 = nn.contrib_dense_pack(%335, meta[relay.Constant][103] /* ty=Tensor[(96, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(512, 768), float32] */;
  %342 = reshape(%341, newshape=[1, 512, 768]) /* ty=Tensor[(1, 512, 768), float32] */;
  %343 = add(%342, meta[relay.Constant][104] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 512, 768), float32] */;
  %344 = reshape(%343, newshape=[1, 512, 12, 64]) /* ty=Tensor[(1, 512, 12, 64), float32] */;
  %345 = transpose(%344, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 512, 64), float32] */;
  %346 = reshape(%340, newshape=[-1, 512, 64]) /* ty=Tensor[(12, 512, 64), float32] */;
  %347 = reshape(%345, newshape=[-1, 512, 64]) /* ty=Tensor[(12, 512, 64), float32] */;
  %348 = nn.batch_matmul(%346, %347, transpose_b=True) /* ty=Tensor[(12, 512, 512), float32] */;
  %349 = reshape(%348, newshape=[1, 12, 512, 512]) /* ty=Tensor[(1, 12, 512, 512), float32] */;
  %350 = divide(%349, 8f /* ty=float32 */) /* ty=Tensor[(1, 12, 512, 512), float32] */;
  %351 = add(%350, %74) /* ty=Tensor[(1, 12, 512, 512), float32] */;
  %352 = nn.softmax(%351) /* ty=Tensor[(1, 12, 512, 512), float32] */;
  %353 = nn.contrib_dense_pack(%335, meta[relay.Constant][105] /* ty=Tensor[(96, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(512, 768), float32] */;
  %354 = reshape(%353, newshape=[1, 512, 768]) /* ty=Tensor[(1, 512, 768), float32] */;
  %355 = add(%354, meta[relay.Constant][106] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 512, 768), float32] */;
  %356 = reshape(%355, newshape=[1, 512, 12, 64]) /* ty=Tensor[(1, 512, 12, 64), float32] */;
  %357 = transpose(%356, axes=[0, 2, 3, 1]) /* ty=Tensor[(1, 12, 64, 512), float32] */;
  %358 = reshape(%352, newshape=[-1, 512, 512]) /* ty=Tensor[(12, 512, 512), float32] */;
  %359 = reshape(%357, newshape=[-1, 64, 512]) /* ty=Tensor[(12, 64, 512), float32] */;
  %360 = nn.batch_matmul(%358, %359, transpose_b=True) /* ty=Tensor[(12, 512, 64), float32] */;
  %361 = reshape(%360, newshape=[1, 12, 512, 64]) /* ty=Tensor[(1, 12, 512, 64), float32] */;
  %362 = transpose(%361, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 512, 12, 64), float32] */;
  %363 = reshape(%362, newshape=[512, 768]) /* ty=Tensor[(512, 768), float32] */;
  %364 = nn.contrib_dense_pack(%363, meta[relay.Constant][107] /* ty=Tensor[(96, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(512, 768), float32] */;
  %365 = reshape(%364, newshape=[1, 512, 768]) /* ty=Tensor[(1, 512, 768), float32] */;
  %366 = add(%365, meta[relay.Constant][108] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 512, 768), float32] */;
  %367 = add(%366, %334) /* ty=Tensor[(1, 512, 768), float32] */;
  %368 = nn.layer_norm(%367, meta[relay.Constant][109] /* ty=Tensor[(768), float32] */, meta[relay.Constant][110] /* ty=Tensor[(768), float32] */, epsilon=1e-12f) /* ty=Tensor[(1, 512, 768), float32] */;
  %369 = reshape(%368, newshape=[-1, 768]) /* ty=Tensor[(512, 768), float32] */;
  %370 = nn.contrib_dense_pack(%369, meta[relay.Constant][111] /* ty=Tensor[(384, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(512, 3072), float32] */;
  %371 = reshape(%370, newshape=[1, 512, 3072]) /* ty=Tensor[(1, 512, 3072), float32] */;
  %372 = add(%371, meta[relay.Constant][112] /* ty=Tensor[(3072), float32] */) /* ty=Tensor[(1, 512, 3072), float32] */;
  %373 = fn (%p05: Tensor[(1, 512, 3072), float32], Compiler="opu.gelu", Primitive=1) -> Tensor[(1, 512, 3072), float32] {
    %20 = multiply(%p05, 0.707107f /* ty=float32 */) /* ty=Tensor[(1, 512, 3072), float32] */;
    %21 = erf(%20) /* ty=Tensor[(1, 512, 3072), float32] */;
    %22 = multiply(%21, 0.5f /* ty=float32 */) /* ty=Tensor[(1, 512, 3072), float32] */;
    %23 = add(0.5f /* ty=float32 */, %22) /* ty=Tensor[(1, 512, 3072), float32] */;
    multiply(%p05, %23) /* ty=Tensor[(1, 512, 3072), float32] */
  };
  %374 = %373(%372) /* ty=Tensor[(1, 512, 3072), float32] */;
  %375 = reshape(%374, newshape=[-1, 3072]) /* ty=Tensor[(512, 3072), float32] */;
  %376 = nn.contrib_dense_pack(%375, meta[relay.Constant][113] /* ty=Tensor[(96, 3072, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(512, 768), float32] */;
  %377 = reshape(%376, newshape=[1, 512, 768]) /* ty=Tensor[(1, 512, 768), float32] */;
  %378 = add(%377, meta[relay.Constant][114] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 512, 768), float32] */;
  %379 = add(%378, %368) /* ty=Tensor[(1, 512, 768), float32] */;
  %380 = nn.layer_norm(%379, meta[relay.Constant][115] /* ty=Tensor[(768), float32] */, meta[relay.Constant][116] /* ty=Tensor[(768), float32] */, epsilon=1e-12f) /* ty=Tensor[(1, 512, 768), float32] */;
  %381 = reshape(%380, newshape=[-1, 768]) /* ty=Tensor[(512, 768), float32] */;
  %382 = nn.contrib_dense_pack(%381, meta[relay.Constant][117] /* ty=Tensor[(96, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(512, 768), float32] */;
  %383 = reshape(%382, newshape=[1, 512, 768]) /* ty=Tensor[(1, 512, 768), float32] */;
  %384 = add(%383, meta[relay.Constant][118] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 512, 768), float32] */;
  %385 = reshape(%384, newshape=[1, 512, 12, 64]) /* ty=Tensor[(1, 512, 12, 64), float32] */;
  %386 = transpose(%385, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 512, 64), float32] */;
  %387 = nn.contrib_dense_pack(%381, meta[relay.Constant][119] /* ty=Tensor[(96, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(512, 768), float32] */;
  %388 = reshape(%387, newshape=[1, 512, 768]) /* ty=Tensor[(1, 512, 768), float32] */;
  %389 = add(%388, meta[relay.Constant][120] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 512, 768), float32] */;
  %390 = reshape(%389, newshape=[1, 512, 12, 64]) /* ty=Tensor[(1, 512, 12, 64), float32] */;
  %391 = transpose(%390, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 512, 64), float32] */;
  %392 = reshape(%386, newshape=[-1, 512, 64]) /* ty=Tensor[(12, 512, 64), float32] */;
  %393 = reshape(%391, newshape=[-1, 512, 64]) /* ty=Tensor[(12, 512, 64), float32] */;
  %394 = nn.batch_matmul(%392, %393, transpose_b=True) /* ty=Tensor[(12, 512, 512), float32] */;
  %395 = reshape(%394, newshape=[1, 12, 512, 512]) /* ty=Tensor[(1, 12, 512, 512), float32] */;
  %396 = divide(%395, 8f /* ty=float32 */) /* ty=Tensor[(1, 12, 512, 512), float32] */;
  %397 = add(%396, %74) /* ty=Tensor[(1, 12, 512, 512), float32] */;
  %398 = nn.softmax(%397) /* ty=Tensor[(1, 12, 512, 512), float32] */;
  %399 = nn.contrib_dense_pack(%381, meta[relay.Constant][121] /* ty=Tensor[(96, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(512, 768), float32] */;
  %400 = reshape(%399, newshape=[1, 512, 768]) /* ty=Tensor[(1, 512, 768), float32] */;
  %401 = add(%400, meta[relay.Constant][122] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 512, 768), float32] */;
  %402 = reshape(%401, newshape=[1, 512, 12, 64]) /* ty=Tensor[(1, 512, 12, 64), float32] */;
  %403 = transpose(%402, axes=[0, 2, 3, 1]) /* ty=Tensor[(1, 12, 64, 512), float32] */;
  %404 = reshape(%398, newshape=[-1, 512, 512]) /* ty=Tensor[(12, 512, 512), float32] */;
  %405 = reshape(%403, newshape=[-1, 64, 512]) /* ty=Tensor[(12, 64, 512), float32] */;
  %406 = nn.batch_matmul(%404, %405, transpose_b=True) /* ty=Tensor[(12, 512, 64), float32] */;
  %407 = reshape(%406, newshape=[1, 12, 512, 64]) /* ty=Tensor[(1, 12, 512, 64), float32] */;
  %408 = transpose(%407, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 512, 12, 64), float32] */;
  %409 = reshape(%408, newshape=[512, 768]) /* ty=Tensor[(512, 768), float32] */;
  %410 = nn.contrib_dense_pack(%409, meta[relay.Constant][123] /* ty=Tensor[(96, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(512, 768), float32] */;
  %411 = reshape(%410, newshape=[1, 512, 768]) /* ty=Tensor[(1, 512, 768), float32] */;
  %412 = add(%411, meta[relay.Constant][124] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 512, 768), float32] */;
  %413 = add(%412, %380) /* ty=Tensor[(1, 512, 768), float32] */;
  %414 = nn.layer_norm(%413, meta[relay.Constant][125] /* ty=Tensor[(768), float32] */, meta[relay.Constant][126] /* ty=Tensor[(768), float32] */, epsilon=1e-12f) /* ty=Tensor[(1, 512, 768), float32] */;
  %415 = reshape(%414, newshape=[-1, 768]) /* ty=Tensor[(512, 768), float32] */;
  %416 = nn.contrib_dense_pack(%415, meta[relay.Constant][127] /* ty=Tensor[(384, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(512, 3072), float32] */;
  %417 = reshape(%416, newshape=[1, 512, 3072]) /* ty=Tensor[(1, 512, 3072), float32] */;
  %418 = add(%417, meta[relay.Constant][128] /* ty=Tensor[(3072), float32] */) /* ty=Tensor[(1, 512, 3072), float32] */;
  %419 = fn (%p04: Tensor[(1, 512, 3072), float32], Compiler="opu.gelu", Primitive=1) -> Tensor[(1, 512, 3072), float32] {
    %16 = multiply(%p04, 0.707107f /* ty=float32 */) /* ty=Tensor[(1, 512, 3072), float32] */;
    %17 = erf(%16) /* ty=Tensor[(1, 512, 3072), float32] */;
    %18 = multiply(%17, 0.5f /* ty=float32 */) /* ty=Tensor[(1, 512, 3072), float32] */;
    %19 = add(0.5f /* ty=float32 */, %18) /* ty=Tensor[(1, 512, 3072), float32] */;
    multiply(%p04, %19) /* ty=Tensor[(1, 512, 3072), float32] */
  };
  %420 = %419(%418) /* ty=Tensor[(1, 512, 3072), float32] */;
  %421 = reshape(%420, newshape=[-1, 3072]) /* ty=Tensor[(512, 3072), float32] */;
  %422 = nn.contrib_dense_pack(%421, meta[relay.Constant][129] /* ty=Tensor[(96, 3072, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(512, 768), float32] */;
  %423 = reshape(%422, newshape=[1, 512, 768]) /* ty=Tensor[(1, 512, 768), float32] */;
  %424 = add(%423, meta[relay.Constant][130] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 512, 768), float32] */;
  %425 = add(%424, %414) /* ty=Tensor[(1, 512, 768), float32] */;
  %426 = nn.layer_norm(%425, meta[relay.Constant][131] /* ty=Tensor[(768), float32] */, meta[relay.Constant][132] /* ty=Tensor[(768), float32] */, epsilon=1e-12f) /* ty=Tensor[(1, 512, 768), float32] */;
  %427 = reshape(%426, newshape=[-1, 768]) /* ty=Tensor[(512, 768), float32] */;
  %428 = nn.contrib_dense_pack(%427, meta[relay.Constant][133] /* ty=Tensor[(96, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(512, 768), float32] */;
  %429 = reshape(%428, newshape=[1, 512, 768]) /* ty=Tensor[(1, 512, 768), float32] */;
  %430 = add(%429, meta[relay.Constant][134] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 512, 768), float32] */;
  %431 = reshape(%430, newshape=[1, 512, 12, 64]) /* ty=Tensor[(1, 512, 12, 64), float32] */;
  %432 = transpose(%431, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 512, 64), float32] */;
  %433 = nn.contrib_dense_pack(%427, meta[relay.Constant][135] /* ty=Tensor[(96, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(512, 768), float32] */;
  %434 = reshape(%433, newshape=[1, 512, 768]) /* ty=Tensor[(1, 512, 768), float32] */;
  %435 = add(%434, meta[relay.Constant][136] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 512, 768), float32] */;
  %436 = reshape(%435, newshape=[1, 512, 12, 64]) /* ty=Tensor[(1, 512, 12, 64), float32] */;
  %437 = transpose(%436, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 512, 64), float32] */;
  %438 = reshape(%432, newshape=[-1, 512, 64]) /* ty=Tensor[(12, 512, 64), float32] */;
  %439 = reshape(%437, newshape=[-1, 512, 64]) /* ty=Tensor[(12, 512, 64), float32] */;
  %440 = nn.batch_matmul(%438, %439, transpose_b=True) /* ty=Tensor[(12, 512, 512), float32] */;
  %441 = reshape(%440, newshape=[1, 12, 512, 512]) /* ty=Tensor[(1, 12, 512, 512), float32] */;
  %442 = divide(%441, 8f /* ty=float32 */) /* ty=Tensor[(1, 12, 512, 512), float32] */;
  %443 = add(%442, %74) /* ty=Tensor[(1, 12, 512, 512), float32] */;
  %444 = nn.softmax(%443) /* ty=Tensor[(1, 12, 512, 512), float32] */;
  %445 = nn.contrib_dense_pack(%427, meta[relay.Constant][137] /* ty=Tensor[(96, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(512, 768), float32] */;
  %446 = reshape(%445, newshape=[1, 512, 768]) /* ty=Tensor[(1, 512, 768), float32] */;
  %447 = add(%446, meta[relay.Constant][138] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 512, 768), float32] */;
  %448 = reshape(%447, newshape=[1, 512, 12, 64]) /* ty=Tensor[(1, 512, 12, 64), float32] */;
  %449 = transpose(%448, axes=[0, 2, 3, 1]) /* ty=Tensor[(1, 12, 64, 512), float32] */;
  %450 = reshape(%444, newshape=[-1, 512, 512]) /* ty=Tensor[(12, 512, 512), float32] */;
  %451 = reshape(%449, newshape=[-1, 64, 512]) /* ty=Tensor[(12, 64, 512), float32] */;
  %452 = nn.batch_matmul(%450, %451, transpose_b=True) /* ty=Tensor[(12, 512, 64), float32] */;
  %453 = reshape(%452, newshape=[1, 12, 512, 64]) /* ty=Tensor[(1, 12, 512, 64), float32] */;
  %454 = transpose(%453, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 512, 12, 64), float32] */;
  %455 = reshape(%454, newshape=[512, 768]) /* ty=Tensor[(512, 768), float32] */;
  %456 = nn.contrib_dense_pack(%455, meta[relay.Constant][139] /* ty=Tensor[(96, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(512, 768), float32] */;
  %457 = reshape(%456, newshape=[1, 512, 768]) /* ty=Tensor[(1, 512, 768), float32] */;
  %458 = add(%457, meta[relay.Constant][140] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 512, 768), float32] */;
  %459 = add(%458, %426) /* ty=Tensor[(1, 512, 768), float32] */;
  %460 = nn.layer_norm(%459, meta[relay.Constant][141] /* ty=Tensor[(768), float32] */, meta[relay.Constant][142] /* ty=Tensor[(768), float32] */, epsilon=1e-12f) /* ty=Tensor[(1, 512, 768), float32] */;
  %461 = reshape(%460, newshape=[-1, 768]) /* ty=Tensor[(512, 768), float32] */;
  %462 = nn.contrib_dense_pack(%461, meta[relay.Constant][143] /* ty=Tensor[(384, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(512, 3072), float32] */;
  %463 = reshape(%462, newshape=[1, 512, 3072]) /* ty=Tensor[(1, 512, 3072), float32] */;
  %464 = add(%463, meta[relay.Constant][144] /* ty=Tensor[(3072), float32] */) /* ty=Tensor[(1, 512, 3072), float32] */;
  %465 = fn (%p03: Tensor[(1, 512, 3072), float32], Compiler="opu.gelu", Primitive=1) -> Tensor[(1, 512, 3072), float32] {
    %12 = multiply(%p03, 0.707107f /* ty=float32 */) /* ty=Tensor[(1, 512, 3072), float32] */;
    %13 = erf(%12) /* ty=Tensor[(1, 512, 3072), float32] */;
    %14 = multiply(%13, 0.5f /* ty=float32 */) /* ty=Tensor[(1, 512, 3072), float32] */;
    %15 = add(0.5f /* ty=float32 */, %14) /* ty=Tensor[(1, 512, 3072), float32] */;
    multiply(%p03, %15) /* ty=Tensor[(1, 512, 3072), float32] */
  };
  %466 = %465(%464) /* ty=Tensor[(1, 512, 3072), float32] */;
  %467 = reshape(%466, newshape=[-1, 3072]) /* ty=Tensor[(512, 3072), float32] */;
  %468 = nn.contrib_dense_pack(%467, meta[relay.Constant][145] /* ty=Tensor[(96, 3072, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(512, 768), float32] */;
  %469 = reshape(%468, newshape=[1, 512, 768]) /* ty=Tensor[(1, 512, 768), float32] */;
  %470 = add(%469, meta[relay.Constant][146] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 512, 768), float32] */;
  %471 = add(%470, %460) /* ty=Tensor[(1, 512, 768), float32] */;
  %472 = nn.layer_norm(%471, meta[relay.Constant][147] /* ty=Tensor[(768), float32] */, meta[relay.Constant][148] /* ty=Tensor[(768), float32] */, epsilon=1e-12f) /* ty=Tensor[(1, 512, 768), float32] */;
  %473 = reshape(%472, newshape=[-1, 768]) /* ty=Tensor[(512, 768), float32] */;
  %474 = nn.contrib_dense_pack(%473, meta[relay.Constant][149] /* ty=Tensor[(96, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(512, 768), float32] */;
  %475 = reshape(%474, newshape=[1, 512, 768]) /* ty=Tensor[(1, 512, 768), float32] */;
  %476 = add(%475, meta[relay.Constant][150] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 512, 768), float32] */;
  %477 = reshape(%476, newshape=[1, 512, 12, 64]) /* ty=Tensor[(1, 512, 12, 64), float32] */;
  %478 = transpose(%477, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 512, 64), float32] */;
  %479 = nn.contrib_dense_pack(%473, meta[relay.Constant][151] /* ty=Tensor[(96, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(512, 768), float32] */;
  %480 = reshape(%479, newshape=[1, 512, 768]) /* ty=Tensor[(1, 512, 768), float32] */;
  %481 = add(%480, meta[relay.Constant][152] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 512, 768), float32] */;
  %482 = reshape(%481, newshape=[1, 512, 12, 64]) /* ty=Tensor[(1, 512, 12, 64), float32] */;
  %483 = transpose(%482, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 512, 64), float32] */;
  %484 = reshape(%478, newshape=[-1, 512, 64]) /* ty=Tensor[(12, 512, 64), float32] */;
  %485 = reshape(%483, newshape=[-1, 512, 64]) /* ty=Tensor[(12, 512, 64), float32] */;
  %486 = nn.batch_matmul(%484, %485, transpose_b=True) /* ty=Tensor[(12, 512, 512), float32] */;
  %487 = reshape(%486, newshape=[1, 12, 512, 512]) /* ty=Tensor[(1, 12, 512, 512), float32] */;
  %488 = divide(%487, 8f /* ty=float32 */) /* ty=Tensor[(1, 12, 512, 512), float32] */;
  %489 = add(%488, %74) /* ty=Tensor[(1, 12, 512, 512), float32] */;
  %490 = nn.softmax(%489) /* ty=Tensor[(1, 12, 512, 512), float32] */;
  %491 = nn.contrib_dense_pack(%473, meta[relay.Constant][153] /* ty=Tensor[(96, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(512, 768), float32] */;
  %492 = reshape(%491, newshape=[1, 512, 768]) /* ty=Tensor[(1, 512, 768), float32] */;
  %493 = add(%492, meta[relay.Constant][154] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 512, 768), float32] */;
  %494 = reshape(%493, newshape=[1, 512, 12, 64]) /* ty=Tensor[(1, 512, 12, 64), float32] */;
  %495 = transpose(%494, axes=[0, 2, 3, 1]) /* ty=Tensor[(1, 12, 64, 512), float32] */;
  %496 = reshape(%490, newshape=[-1, 512, 512]) /* ty=Tensor[(12, 512, 512), float32] */;
  %497 = reshape(%495, newshape=[-1, 64, 512]) /* ty=Tensor[(12, 64, 512), float32] */;
  %498 = nn.batch_matmul(%496, %497, transpose_b=True) /* ty=Tensor[(12, 512, 64), float32] */;
  %499 = reshape(%498, newshape=[1, 12, 512, 64]) /* ty=Tensor[(1, 12, 512, 64), float32] */;
  %500 = transpose(%499, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 512, 12, 64), float32] */;
  %501 = reshape(%500, newshape=[512, 768]) /* ty=Tensor[(512, 768), float32] */;
  %502 = nn.contrib_dense_pack(%501, meta[relay.Constant][155] /* ty=Tensor[(96, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(512, 768), float32] */;
  %503 = reshape(%502, newshape=[1, 512, 768]) /* ty=Tensor[(1, 512, 768), float32] */;
  %504 = add(%503, meta[relay.Constant][156] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 512, 768), float32] */;
  %505 = add(%504, %472) /* ty=Tensor[(1, 512, 768), float32] */;
  %506 = nn.layer_norm(%505, meta[relay.Constant][157] /* ty=Tensor[(768), float32] */, meta[relay.Constant][158] /* ty=Tensor[(768), float32] */, epsilon=1e-12f) /* ty=Tensor[(1, 512, 768), float32] */;
  %507 = reshape(%506, newshape=[-1, 768]) /* ty=Tensor[(512, 768), float32] */;
  %508 = nn.contrib_dense_pack(%507, meta[relay.Constant][159] /* ty=Tensor[(384, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(512, 3072), float32] */;
  %509 = reshape(%508, newshape=[1, 512, 3072]) /* ty=Tensor[(1, 512, 3072), float32] */;
  %510 = add(%509, meta[relay.Constant][160] /* ty=Tensor[(3072), float32] */) /* ty=Tensor[(1, 512, 3072), float32] */;
  %511 = fn (%p02: Tensor[(1, 512, 3072), float32], Compiler="opu.gelu", Primitive=1) -> Tensor[(1, 512, 3072), float32] {
    %8 = multiply(%p02, 0.707107f /* ty=float32 */) /* ty=Tensor[(1, 512, 3072), float32] */;
    %9 = erf(%8) /* ty=Tensor[(1, 512, 3072), float32] */;
    %10 = multiply(%9, 0.5f /* ty=float32 */) /* ty=Tensor[(1, 512, 3072), float32] */;
    %11 = add(0.5f /* ty=float32 */, %10) /* ty=Tensor[(1, 512, 3072), float32] */;
    multiply(%p02, %11) /* ty=Tensor[(1, 512, 3072), float32] */
  };
  %512 = %511(%510) /* ty=Tensor[(1, 512, 3072), float32] */;
  %513 = reshape(%512, newshape=[-1, 3072]) /* ty=Tensor[(512, 3072), float32] */;
  %514 = nn.contrib_dense_pack(%513, meta[relay.Constant][161] /* ty=Tensor[(96, 3072, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(512, 768), float32] */;
  %515 = reshape(%514, newshape=[1, 512, 768]) /* ty=Tensor[(1, 512, 768), float32] */;
  %516 = add(%515, meta[relay.Constant][162] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 512, 768), float32] */;
  %517 = add(%516, %506) /* ty=Tensor[(1, 512, 768), float32] */;
  %518 = nn.layer_norm(%517, meta[relay.Constant][163] /* ty=Tensor[(768), float32] */, meta[relay.Constant][164] /* ty=Tensor[(768), float32] */, epsilon=1e-12f) /* ty=Tensor[(1, 512, 768), float32] */;
  %519 = reshape(%518, newshape=[-1, 768]) /* ty=Tensor[(512, 768), float32] */;
  %520 = nn.contrib_dense_pack(%519, meta[relay.Constant][165] /* ty=Tensor[(96, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(512, 768), float32] */;
  %521 = reshape(%520, newshape=[1, 512, 768]) /* ty=Tensor[(1, 512, 768), float32] */;
  %522 = add(%521, meta[relay.Constant][166] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 512, 768), float32] */;
  %523 = reshape(%522, newshape=[1, 512, 12, 64]) /* ty=Tensor[(1, 512, 12, 64), float32] */;
  %524 = transpose(%523, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 512, 64), float32] */;
  %525 = nn.contrib_dense_pack(%519, meta[relay.Constant][167] /* ty=Tensor[(96, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(512, 768), float32] */;
  %526 = reshape(%525, newshape=[1, 512, 768]) /* ty=Tensor[(1, 512, 768), float32] */;
  %527 = add(%526, meta[relay.Constant][168] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 512, 768), float32] */;
  %528 = reshape(%527, newshape=[1, 512, 12, 64]) /* ty=Tensor[(1, 512, 12, 64), float32] */;
  %529 = transpose(%528, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 512, 64), float32] */;
  %530 = reshape(%524, newshape=[-1, 512, 64]) /* ty=Tensor[(12, 512, 64), float32] */;
  %531 = reshape(%529, newshape=[-1, 512, 64]) /* ty=Tensor[(12, 512, 64), float32] */;
  %532 = nn.batch_matmul(%530, %531, transpose_b=True) /* ty=Tensor[(12, 512, 512), float32] */;
  %533 = reshape(%532, newshape=[1, 12, 512, 512]) /* ty=Tensor[(1, 12, 512, 512), float32] */;
  %534 = divide(%533, 8f /* ty=float32 */) /* ty=Tensor[(1, 12, 512, 512), float32] */;
  %535 = add(%534, %74) /* ty=Tensor[(1, 12, 512, 512), float32] */;
  %536 = nn.softmax(%535) /* ty=Tensor[(1, 12, 512, 512), float32] */;
  %537 = nn.contrib_dense_pack(%519, meta[relay.Constant][169] /* ty=Tensor[(96, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(512, 768), float32] */;
  %538 = reshape(%537, newshape=[1, 512, 768]) /* ty=Tensor[(1, 512, 768), float32] */;
  %539 = add(%538, meta[relay.Constant][170] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 512, 768), float32] */;
  %540 = reshape(%539, newshape=[1, 512, 12, 64]) /* ty=Tensor[(1, 512, 12, 64), float32] */;
  %541 = transpose(%540, axes=[0, 2, 3, 1]) /* ty=Tensor[(1, 12, 64, 512), float32] */;
  %542 = reshape(%536, newshape=[-1, 512, 512]) /* ty=Tensor[(12, 512, 512), float32] */;
  %543 = reshape(%541, newshape=[-1, 64, 512]) /* ty=Tensor[(12, 64, 512), float32] */;
  %544 = nn.batch_matmul(%542, %543, transpose_b=True) /* ty=Tensor[(12, 512, 64), float32] */;
  %545 = reshape(%544, newshape=[1, 12, 512, 64]) /* ty=Tensor[(1, 12, 512, 64), float32] */;
  %546 = transpose(%545, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 512, 12, 64), float32] */;
  %547 = reshape(%546, newshape=[512, 768]) /* ty=Tensor[(512, 768), float32] */;
  %548 = nn.contrib_dense_pack(%547, meta[relay.Constant][171] /* ty=Tensor[(96, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(512, 768), float32] */;
  %549 = reshape(%548, newshape=[1, 512, 768]) /* ty=Tensor[(1, 512, 768), float32] */;
  %550 = add(%549, meta[relay.Constant][172] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 512, 768), float32] */;
  %551 = add(%550, %518) /* ty=Tensor[(1, 512, 768), float32] */;
  %552 = nn.layer_norm(%551, meta[relay.Constant][173] /* ty=Tensor[(768), float32] */, meta[relay.Constant][174] /* ty=Tensor[(768), float32] */, epsilon=1e-12f) /* ty=Tensor[(1, 512, 768), float32] */;
  %553 = reshape(%552, newshape=[-1, 768]) /* ty=Tensor[(512, 768), float32] */;
  %554 = nn.contrib_dense_pack(%553, meta[relay.Constant][175] /* ty=Tensor[(384, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(512, 3072), float32] */;
  %555 = reshape(%554, newshape=[1, 512, 3072]) /* ty=Tensor[(1, 512, 3072), float32] */;
  %556 = add(%555, meta[relay.Constant][176] /* ty=Tensor[(3072), float32] */) /* ty=Tensor[(1, 512, 3072), float32] */;
  %557 = fn (%p01: Tensor[(1, 512, 3072), float32], Compiler="opu.gelu", Primitive=1) -> Tensor[(1, 512, 3072), float32] {
    %4 = multiply(%p01, 0.707107f /* ty=float32 */) /* ty=Tensor[(1, 512, 3072), float32] */;
    %5 = erf(%4) /* ty=Tensor[(1, 512, 3072), float32] */;
    %6 = multiply(%5, 0.5f /* ty=float32 */) /* ty=Tensor[(1, 512, 3072), float32] */;
    %7 = add(0.5f /* ty=float32 */, %6) /* ty=Tensor[(1, 512, 3072), float32] */;
    multiply(%p01, %7) /* ty=Tensor[(1, 512, 3072), float32] */
  };
  %558 = %557(%556) /* ty=Tensor[(1, 512, 3072), float32] */;
  %559 = reshape(%558, newshape=[-1, 3072]) /* ty=Tensor[(512, 3072), float32] */;
  %560 = nn.contrib_dense_pack(%559, meta[relay.Constant][177] /* ty=Tensor[(96, 3072, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(512, 768), float32] */;
  %561 = reshape(%560, newshape=[1, 512, 768]) /* ty=Tensor[(1, 512, 768), float32] */;
  %562 = add(%561, meta[relay.Constant][178] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 512, 768), float32] */;
  %563 = add(%562, %552) /* ty=Tensor[(1, 512, 768), float32] */;
  %564 = nn.layer_norm(%563, meta[relay.Constant][179] /* ty=Tensor[(768), float32] */, meta[relay.Constant][180] /* ty=Tensor[(768), float32] */, epsilon=1e-12f) /* ty=Tensor[(1, 512, 768), float32] */;
  %565 = reshape(%564, newshape=[-1, 768]) /* ty=Tensor[(512, 768), float32] */;
  %566 = nn.contrib_dense_pack(%565, meta[relay.Constant][181] /* ty=Tensor[(96, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(512, 768), float32] */;
  %567 = reshape(%566, newshape=[1, 512, 768]) /* ty=Tensor[(1, 512, 768), float32] */;
  %568 = add(%567, meta[relay.Constant][182] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 512, 768), float32] */;
  %569 = reshape(%568, newshape=[1, 512, 12, 64]) /* ty=Tensor[(1, 512, 12, 64), float32] */;
  %570 = transpose(%569, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 512, 64), float32] */;
  %571 = nn.contrib_dense_pack(%565, meta[relay.Constant][183] /* ty=Tensor[(96, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(512, 768), float32] */;
  %572 = reshape(%571, newshape=[1, 512, 768]) /* ty=Tensor[(1, 512, 768), float32] */;
  %573 = add(%572, meta[relay.Constant][184] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 512, 768), float32] */;
  %574 = reshape(%573, newshape=[1, 512, 12, 64]) /* ty=Tensor[(1, 512, 12, 64), float32] */;
  %575 = transpose(%574, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 512, 64), float32] */;
  %576 = reshape(%570, newshape=[-1, 512, 64]) /* ty=Tensor[(12, 512, 64), float32] */;
  %577 = reshape(%575, newshape=[-1, 512, 64]) /* ty=Tensor[(12, 512, 64), float32] */;
  %578 = nn.batch_matmul(%576, %577, transpose_b=True) /* ty=Tensor[(12, 512, 512), float32] */;
  %579 = reshape(%578, newshape=[1, 12, 512, 512]) /* ty=Tensor[(1, 12, 512, 512), float32] */;
  %580 = divide(%579, 8f /* ty=float32 */) /* ty=Tensor[(1, 12, 512, 512), float32] */;
  %581 = add(%580, %74) /* ty=Tensor[(1, 12, 512, 512), float32] */;
  %582 = nn.softmax(%581) /* ty=Tensor[(1, 12, 512, 512), float32] */;
  %583 = nn.contrib_dense_pack(%565, meta[relay.Constant][185] /* ty=Tensor[(96, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(512, 768), float32] */;
  %584 = reshape(%583, newshape=[1, 512, 768]) /* ty=Tensor[(1, 512, 768), float32] */;
  %585 = add(%584, meta[relay.Constant][186] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 512, 768), float32] */;
  %586 = reshape(%585, newshape=[1, 512, 12, 64]) /* ty=Tensor[(1, 512, 12, 64), float32] */;
  %587 = transpose(%586, axes=[0, 2, 3, 1]) /* ty=Tensor[(1, 12, 64, 512), float32] */;
  %588 = reshape(%582, newshape=[-1, 512, 512]) /* ty=Tensor[(12, 512, 512), float32] */;
  %589 = reshape(%587, newshape=[-1, 64, 512]) /* ty=Tensor[(12, 64, 512), float32] */;
  %590 = nn.batch_matmul(%588, %589, transpose_b=True) /* ty=Tensor[(12, 512, 64), float32] */;
  %591 = reshape(%590, newshape=[1, 12, 512, 64]) /* ty=Tensor[(1, 12, 512, 64), float32] */;
  %592 = transpose(%591, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 512, 12, 64), float32] */;
  %593 = reshape(%592, newshape=[512, 768]) /* ty=Tensor[(512, 768), float32] */;
  %594 = nn.contrib_dense_pack(%593, meta[relay.Constant][187] /* ty=Tensor[(96, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(512, 768), float32] */;
  %595 = reshape(%594, newshape=[1, 512, 768]) /* ty=Tensor[(1, 512, 768), float32] */;
  %596 = add(%595, meta[relay.Constant][188] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 512, 768), float32] */;
  %597 = add(%596, %564) /* ty=Tensor[(1, 512, 768), float32] */;
  %598 = nn.layer_norm(%597, meta[relay.Constant][189] /* ty=Tensor[(768), float32] */, meta[relay.Constant][190] /* ty=Tensor[(768), float32] */, epsilon=1e-12f) /* ty=Tensor[(1, 512, 768), float32] */;
  %599 = reshape(%598, newshape=[-1, 768]) /* ty=Tensor[(512, 768), float32] */;
  %600 = nn.contrib_dense_pack(%599, meta[relay.Constant][191] /* ty=Tensor[(384, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(512, 3072), float32] */;
  %601 = reshape(%600, newshape=[1, 512, 3072]) /* ty=Tensor[(1, 512, 3072), float32] */;
  %602 = add(%601, meta[relay.Constant][192] /* ty=Tensor[(3072), float32] */) /* ty=Tensor[(1, 512, 3072), float32] */;
  %603 = fn (%p0: Tensor[(1, 512, 3072), float32], Compiler="opu.gelu", Primitive=1) -> Tensor[(1, 512, 3072), float32] {
    %0 = multiply(%p0, 0.707107f /* ty=float32 */) /* ty=Tensor[(1, 512, 3072), float32] */;
    %1 = erf(%0) /* ty=Tensor[(1, 512, 3072), float32] */;
    %2 = multiply(%1, 0.5f /* ty=float32 */) /* ty=Tensor[(1, 512, 3072), float32] */;
    %3 = add(0.5f /* ty=float32 */, %2) /* ty=Tensor[(1, 512, 3072), float32] */;
    multiply(%p0, %3) /* ty=Tensor[(1, 512, 3072), float32] */
  };
  %604 = %603(%602) /* ty=Tensor[(1, 512, 3072), float32] */;
  %605 = reshape(%604, newshape=[-1, 3072]) /* ty=Tensor[(512, 3072), float32] */;
  %606 = nn.contrib_dense_pack(%605, meta[relay.Constant][193] /* ty=Tensor[(96, 3072, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(512, 768), float32] */;
  %607 = reshape(%606, newshape=[1, 512, 768]) /* ty=Tensor[(1, 512, 768), float32] */;
  %608 = add(%607, meta[relay.Constant][194] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 512, 768), float32] */;
  %609 = add(%608, %598) /* ty=Tensor[(1, 512, 768), float32] */;
  %610 = nn.layer_norm(%609, meta[relay.Constant][195] /* ty=Tensor[(768), float32] */, meta[relay.Constant][196] /* ty=Tensor[(768), float32] */, epsilon=1e-12f) /* ty=Tensor[(1, 512, 768), float32] */;
  %611 = take(%610, 0 /* ty=int32 */, axis=1, mode="wrap") /* ty=Tensor[(1, 768), float32] */;
  %612 = nn.contrib_dense_pack(%611, meta[relay.Constant][197] /* ty=Tensor[(96, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(1, 768), float32] */;
  %613 = add(%612, meta[relay.Constant][198] /* ty=Tensor[(1, 768), float32] */) /* ty=Tensor[(1, 768), float32] */;
  %614 = tanh(%613) /* ty=Tensor[(1, 768), float32] */;
  (%610, %614)
}

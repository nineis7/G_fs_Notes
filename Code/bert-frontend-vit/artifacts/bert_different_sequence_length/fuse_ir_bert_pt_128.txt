def @main(%input_ids: Tensor[(1, 128), int64], %token_type_ids: Tensor[(1, 128), int64], %attention_mask: Tensor[(1, 128), int64], param_virtual_devices=[VirtualDevice(device_type=1, virtual_device_id=0, target=Target(kind='llvm', keys={'cpu'}, attrs={'link-params': (bool)0}, host=Target(kind='llvm', keys={'cpu'}, attrs={'link-params': (bool)0}))), VirtualDevice(device_type=1, virtual_device_id=0, target=Target(kind='llvm', keys={'cpu'}, attrs={'link-params': (bool)0}, host=Target(kind='llvm', keys={'cpu'}, attrs={'link-params': (bool)0}))), VirtualDevice(device_type=1, virtual_device_id=0, target=Target(kind='llvm', keys={'cpu'}, attrs={'link-params': (bool)0}, host=Target(kind='llvm', keys={'cpu'}, attrs={'link-params': (bool)0})))], result_virtual_device=VirtualDevice(device_type=1, virtual_device_id=0, target=Target(kind='llvm', keys={'cpu'}, attrs={'link-params': (bool)0}, host=Target(kind='llvm', keys={'cpu'}, attrs={'link-params': (bool)0}))), hash="20dcb01b8dc5eaff", weight_layout="NC8n") -> (Tensor[(1, 128, 768), float32], Tensor[(1, 768), float32]) {
  %383 = cast(%input_ids, dtype="int32") /* ty=Tensor[(1, 128), int32] */;
  %384 = cast(%token_type_ids, dtype="int32") /* ty=Tensor[(1, 128), int32] */;
  %385 = take(meta[relay.Constant][156] /* ty=Tensor[(30522, 768), float32] */, %383, axis=0) /* ty=Tensor[(1, 128, 768), float32] */;
  %386 = take(meta[relay.Constant][157] /* ty=Tensor[(2, 768), float32] */, %384, axis=0) /* ty=Tensor[(1, 128, 768), float32] */;
  %387 = add(%385, %386) /* ty=Tensor[(1, 128, 768), float32] */;
  %388 = add(%387, meta[relay.Constant][158] /* ty=Tensor[(1, 128, 768), float32] */) /* ty=Tensor[(1, 128, 768), float32] */;
  %389 = nn.layer_norm(%388, meta[relay.Constant][159] /* ty=Tensor[(768), float32] */, meta[relay.Constant][160] /* ty=Tensor[(768), float32] */, epsilon=1e-12f) /* ty=Tensor[(1, 128, 768), float32] */;
  %390 = reshape(%389, newshape=[-1, 768]) /* ty=Tensor[(128, 768), float32] */;
  %391 = fn (%p083: Tensor[(128, 768), float32], Compiler="opu.custom", Primitive=1) -> Tensor[(12, 128, 64), float32] {
    %378 = nn.contrib_dense_pack(%p083, meta[relay.Constant][154] /* ty=Tensor[(96, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(128, 768), float32] */;
    %379 = reshape(%378, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float32] */;
    %380 = add(%379, meta[relay.Constant][155] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 128, 768), float32] */;
    %381 = reshape(%380, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), float32] */;
    %382 = transpose(%381, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 128, 64), float32] */;
    reshape(%382, newshape=[-1, 128, 64]) /* ty=Tensor[(12, 128, 64), float32] */
  };
  %397 = fn (%p084: Tensor[(128, 768), float32], Compiler="opu.custom", Primitive=1) -> Tensor[(12, 128, 64), float32] {
    %392 = nn.contrib_dense_pack(%p084, meta[relay.Constant][161] /* ty=Tensor[(96, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(128, 768), float32] */;
    %393 = reshape(%392, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float32] */;
    %394 = add(%393, meta[relay.Constant][162] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 128, 768), float32] */;
    %395 = reshape(%394, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), float32] */;
    %396 = transpose(%395, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 128, 64), float32] */;
    reshape(%396, newshape=[-1, 128, 64]) /* ty=Tensor[(12, 128, 64), float32] */
  };
  %398 = %391(%390) /* ty=Tensor[(12, 128, 64), float32] */;
  %399 = %397(%390) /* ty=Tensor[(12, 128, 64), float32] */;
  %400 = fn (%p082: Tensor[(12, 128, 64), float32], %p147: Tensor[(12, 128, 64), float32], Compiler="opu.custom", Primitive=1) -> Tensor[(12, 128, 128), float32] {
    %373 = nn.batch_matmul(%p082, %p147, transpose_b=True) /* ty=Tensor[(12, 128, 128), float32] */;
    %374 = reshape(%373, newshape=[1, 12, 128, 128]) /* ty=Tensor[(1, 12, 128, 128), float32] */;
    %375 = add(%374, meta[relay.Constant][153] /* ty=Tensor[(1, 1, 1, 128), float32] */) /* ty=Tensor[(1, 12, 128, 128), float32] */;
    %376 = divide(%375, 8f /* ty=float32 */) /* ty=Tensor[(1, 12, 128, 128), float32] */;
    %377 = nn.softmax(%376) /* ty=Tensor[(1, 12, 128, 128), float32] */;
    reshape(%377, newshape=[-1, 128, 128]) /* ty=Tensor[(12, 128, 128), float32] */
  };
  %406 = fn (%p085: Tensor[(128, 768), float32], Compiler="opu.custom", Primitive=1) -> Tensor[(12, 64, 128), float32] {
    %401 = nn.contrib_dense_pack(%p085, meta[relay.Constant][163] /* ty=Tensor[(96, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(128, 768), float32] */;
    %402 = reshape(%401, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float32] */;
    %403 = add(%402, meta[relay.Constant][164] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 128, 768), float32] */;
    %404 = reshape(%403, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), float32] */;
    %405 = transpose(%404, axes=[0, 2, 3, 1]) /* ty=Tensor[(1, 12, 64, 128), float32] */;
    reshape(%405, newshape=[-1, 64, 128]) /* ty=Tensor[(12, 64, 128), float32] */
  };
  %407 = %400(%398, %399) /* ty=Tensor[(12, 128, 128), float32] */;
  %408 = %406(%390) /* ty=Tensor[(12, 64, 128), float32] */;
  %409 = fn (%p081: Tensor[(12, 128, 128), float32], %p146: Tensor[(12, 64, 128), float32], Compiler="opu.custom", Primitive=1) -> Tensor[(128, 768), float32] {
    %370 = nn.batch_matmul(%p081, %p146, transpose_b=True) /* ty=Tensor[(12, 128, 64), float32] */;
    %371 = reshape(%370, newshape=[1, 12, 128, 64]) /* ty=Tensor[(1, 12, 128, 64), float32] */;
    %372 = transpose(%371, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 128, 12, 64), float32] */;
    reshape(%372, newshape=[128, 768]) /* ty=Tensor[(128, 768), float32] */
  };
  %410 = %409(%407, %408) /* ty=Tensor[(128, 768), float32] */;
  %411 = fn (%p080: Tensor[(128, 768), float32], %p145: Tensor[(1, 128, 768), float32], Compiler="opu.custom", Primitive=1) -> Tensor[(128, 768), float32] {
    %365 = nn.contrib_dense_pack(%p080, meta[relay.Constant][149] /* ty=Tensor[(96, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(128, 768), float32] */;
    %366 = reshape(%365, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float32] */;
    %367 = add(%366, meta[relay.Constant][150] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 128, 768), float32] */;
    %368 = add(%367, %p145) /* ty=Tensor[(1, 128, 768), float32] */;
    %369 = nn.layer_norm(%368, meta[relay.Constant][151] /* ty=Tensor[(768), float32] */, meta[relay.Constant][152] /* ty=Tensor[(768), float32] */, epsilon=1e-12f) /* ty=Tensor[(1, 128, 768), float32] */;
    reshape(%369, newshape=[-1, 768]) /* ty=Tensor[(128, 768), float32] */
  };
  %412 = %411(%410, %389) /* ty=Tensor[(128, 768), float32] */;
  %413 = fn (%p078: Tensor[(128, 768), float32], Compiler="opu.custom", Primitive=1) -> Tensor[(128, 3072), float32] {
    %360 = nn.contrib_dense_pack(%p078, meta[relay.Constant][147] /* ty=Tensor[(384, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(128, 3072), float32] */;
    %361 = reshape(%360, newshape=[1, 128, 3072]) /* ty=Tensor[(1, 128, 3072), float32] */;
    %362 = add(%361, meta[relay.Constant][148] /* ty=Tensor[(3072), float32] */) /* ty=Tensor[(1, 128, 3072), float32] */;
    %363 = fn (%p079: Tensor[(1, 128, 3072), float32], Compiler="opu.gelu", Primitive=1) -> Tensor[(1, 128, 3072), float32] {
      %356 = multiply(%p079, 0.707107f /* ty=float32 */) /* ty=Tensor[(1, 128, 3072), float32] */;
      %357 = erf(%356) /* ty=Tensor[(1, 128, 3072), float32] */;
      %358 = multiply(%357, 0.5f /* ty=float32 */) /* ty=Tensor[(1, 128, 3072), float32] */;
      %359 = add(0.5f /* ty=float32 */, %358) /* ty=Tensor[(1, 128, 3072), float32] */;
      multiply(%p079, %359) /* ty=Tensor[(1, 128, 3072), float32] */
    };
    %364 = %363(%362) /* ty=Tensor[(1, 128, 3072), float32] */;
    reshape(%364, newshape=[-1, 3072]) /* ty=Tensor[(128, 3072), float32] */
  };
  %414 = %413(%412) /* ty=Tensor[(128, 3072), float32] */;
  %415 = fn (%p077: Tensor[(128, 3072), float32], %p144: Tensor[(1, 128, 768), float32], Compiler="opu.custom", Primitive=1) -> Tensor[(128, 768), float32] {
    %351 = nn.contrib_dense_pack(%p077, meta[relay.Constant][143] /* ty=Tensor[(96, 3072, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(128, 768), float32] */;
    %352 = reshape(%351, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float32] */;
    %353 = add(%352, meta[relay.Constant][144] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 128, 768), float32] */;
    %354 = add(%353, %p144) /* ty=Tensor[(1, 128, 768), float32] */;
    %355 = nn.layer_norm(%354, meta[relay.Constant][145] /* ty=Tensor[(768), float32] */, meta[relay.Constant][146] /* ty=Tensor[(768), float32] */, epsilon=1e-12f) /* ty=Tensor[(1, 128, 768), float32] */;
    reshape(%355, newshape=[-1, 768]) /* ty=Tensor[(128, 768), float32] */
  };
  %416 = %415(%414, %369) /* ty=Tensor[(128, 768), float32] */;
  %417 = fn (%p076: Tensor[(128, 768), float32], Compiler="opu.custom", Primitive=1) -> Tensor[(12, 128, 64), float32] {
    %346 = nn.contrib_dense_pack(%p076, meta[relay.Constant][141] /* ty=Tensor[(96, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(128, 768), float32] */;
    %347 = reshape(%346, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float32] */;
    %348 = add(%347, meta[relay.Constant][142] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 128, 768), float32] */;
    %349 = reshape(%348, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), float32] */;
    %350 = transpose(%349, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 128, 64), float32] */;
    reshape(%350, newshape=[-1, 128, 64]) /* ty=Tensor[(12, 128, 64), float32] */
  };
  %423 = fn (%p086: Tensor[(128, 768), float32], Compiler="opu.custom", Primitive=1) -> Tensor[(12, 128, 64), float32] {
    %418 = nn.contrib_dense_pack(%p086, meta[relay.Constant][165] /* ty=Tensor[(96, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(128, 768), float32] */;
    %419 = reshape(%418, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float32] */;
    %420 = add(%419, meta[relay.Constant][166] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 128, 768), float32] */;
    %421 = reshape(%420, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), float32] */;
    %422 = transpose(%421, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 128, 64), float32] */;
    reshape(%422, newshape=[-1, 128, 64]) /* ty=Tensor[(12, 128, 64), float32] */
  };
  %424 = %417(%416) /* ty=Tensor[(12, 128, 64), float32] */;
  %425 = %423(%416) /* ty=Tensor[(12, 128, 64), float32] */;
  %426 = fn (%p075: Tensor[(12, 128, 64), float32], %p143: Tensor[(12, 128, 64), float32], Compiler="opu.custom", Primitive=1) -> Tensor[(12, 128, 128), float32] {
    %341 = nn.batch_matmul(%p075, %p143, transpose_b=True) /* ty=Tensor[(12, 128, 128), float32] */;
    %342 = reshape(%341, newshape=[1, 12, 128, 128]) /* ty=Tensor[(1, 12, 128, 128), float32] */;
    %343 = add(%342, meta[relay.Constant][140] /* ty=Tensor[(1, 1, 1, 128), float32] */) /* ty=Tensor[(1, 12, 128, 128), float32] */;
    %344 = divide(%343, 8f /* ty=float32 */) /* ty=Tensor[(1, 12, 128, 128), float32] */;
    %345 = nn.softmax(%344) /* ty=Tensor[(1, 12, 128, 128), float32] */;
    reshape(%345, newshape=[-1, 128, 128]) /* ty=Tensor[(12, 128, 128), float32] */
  };
  %432 = fn (%p087: Tensor[(128, 768), float32], Compiler="opu.custom", Primitive=1) -> Tensor[(12, 64, 128), float32] {
    %427 = nn.contrib_dense_pack(%p087, meta[relay.Constant][167] /* ty=Tensor[(96, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(128, 768), float32] */;
    %428 = reshape(%427, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float32] */;
    %429 = add(%428, meta[relay.Constant][168] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 128, 768), float32] */;
    %430 = reshape(%429, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), float32] */;
    %431 = transpose(%430, axes=[0, 2, 3, 1]) /* ty=Tensor[(1, 12, 64, 128), float32] */;
    reshape(%431, newshape=[-1, 64, 128]) /* ty=Tensor[(12, 64, 128), float32] */
  };
  %433 = %426(%424, %425) /* ty=Tensor[(12, 128, 128), float32] */;
  %434 = %432(%416) /* ty=Tensor[(12, 64, 128), float32] */;
  %435 = fn (%p074: Tensor[(12, 128, 128), float32], %p142: Tensor[(12, 64, 128), float32], Compiler="opu.custom", Primitive=1) -> Tensor[(128, 768), float32] {
    %338 = nn.batch_matmul(%p074, %p142, transpose_b=True) /* ty=Tensor[(12, 128, 64), float32] */;
    %339 = reshape(%338, newshape=[1, 12, 128, 64]) /* ty=Tensor[(1, 12, 128, 64), float32] */;
    %340 = transpose(%339, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 128, 12, 64), float32] */;
    reshape(%340, newshape=[128, 768]) /* ty=Tensor[(128, 768), float32] */
  };
  %436 = %435(%433, %434) /* ty=Tensor[(128, 768), float32] */;
  %437 = fn (%p073: Tensor[(128, 768), float32], %p141: Tensor[(1, 128, 768), float32], Compiler="opu.custom", Primitive=1) -> Tensor[(128, 768), float32] {
    %333 = nn.contrib_dense_pack(%p073, meta[relay.Constant][136] /* ty=Tensor[(96, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(128, 768), float32] */;
    %334 = reshape(%333, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float32] */;
    %335 = add(%334, meta[relay.Constant][137] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 128, 768), float32] */;
    %336 = add(%335, %p141) /* ty=Tensor[(1, 128, 768), float32] */;
    %337 = nn.layer_norm(%336, meta[relay.Constant][138] /* ty=Tensor[(768), float32] */, meta[relay.Constant][139] /* ty=Tensor[(768), float32] */, epsilon=1e-12f) /* ty=Tensor[(1, 128, 768), float32] */;
    reshape(%337, newshape=[-1, 768]) /* ty=Tensor[(128, 768), float32] */
  };
  %438 = %437(%436, %355) /* ty=Tensor[(128, 768), float32] */;
  %439 = fn (%p071: Tensor[(128, 768), float32], Compiler="opu.custom", Primitive=1) -> Tensor[(128, 3072), float32] {
    %328 = nn.contrib_dense_pack(%p071, meta[relay.Constant][134] /* ty=Tensor[(384, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(128, 3072), float32] */;
    %329 = reshape(%328, newshape=[1, 128, 3072]) /* ty=Tensor[(1, 128, 3072), float32] */;
    %330 = add(%329, meta[relay.Constant][135] /* ty=Tensor[(3072), float32] */) /* ty=Tensor[(1, 128, 3072), float32] */;
    %331 = fn (%p072: Tensor[(1, 128, 3072), float32], Compiler="opu.gelu", Primitive=1) -> Tensor[(1, 128, 3072), float32] {
      %324 = multiply(%p072, 0.707107f /* ty=float32 */) /* ty=Tensor[(1, 128, 3072), float32] */;
      %325 = erf(%324) /* ty=Tensor[(1, 128, 3072), float32] */;
      %326 = multiply(%325, 0.5f /* ty=float32 */) /* ty=Tensor[(1, 128, 3072), float32] */;
      %327 = add(0.5f /* ty=float32 */, %326) /* ty=Tensor[(1, 128, 3072), float32] */;
      multiply(%p072, %327) /* ty=Tensor[(1, 128, 3072), float32] */
    };
    %332 = %331(%330) /* ty=Tensor[(1, 128, 3072), float32] */;
    reshape(%332, newshape=[-1, 3072]) /* ty=Tensor[(128, 3072), float32] */
  };
  %440 = %439(%438) /* ty=Tensor[(128, 3072), float32] */;
  %441 = fn (%p070: Tensor[(128, 3072), float32], %p140: Tensor[(1, 128, 768), float32], Compiler="opu.custom", Primitive=1) -> Tensor[(128, 768), float32] {
    %319 = nn.contrib_dense_pack(%p070, meta[relay.Constant][130] /* ty=Tensor[(96, 3072, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(128, 768), float32] */;
    %320 = reshape(%319, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float32] */;
    %321 = add(%320, meta[relay.Constant][131] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 128, 768), float32] */;
    %322 = add(%321, %p140) /* ty=Tensor[(1, 128, 768), float32] */;
    %323 = nn.layer_norm(%322, meta[relay.Constant][132] /* ty=Tensor[(768), float32] */, meta[relay.Constant][133] /* ty=Tensor[(768), float32] */, epsilon=1e-12f) /* ty=Tensor[(1, 128, 768), float32] */;
    reshape(%323, newshape=[-1, 768]) /* ty=Tensor[(128, 768), float32] */
  };
  %442 = %441(%440, %337) /* ty=Tensor[(128, 768), float32] */;
  %443 = fn (%p069: Tensor[(128, 768), float32], Compiler="opu.custom", Primitive=1) -> Tensor[(12, 128, 64), float32] {
    %314 = nn.contrib_dense_pack(%p069, meta[relay.Constant][128] /* ty=Tensor[(96, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(128, 768), float32] */;
    %315 = reshape(%314, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float32] */;
    %316 = add(%315, meta[relay.Constant][129] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 128, 768), float32] */;
    %317 = reshape(%316, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), float32] */;
    %318 = transpose(%317, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 128, 64), float32] */;
    reshape(%318, newshape=[-1, 128, 64]) /* ty=Tensor[(12, 128, 64), float32] */
  };
  %449 = fn (%p088: Tensor[(128, 768), float32], Compiler="opu.custom", Primitive=1) -> Tensor[(12, 128, 64), float32] {
    %444 = nn.contrib_dense_pack(%p088, meta[relay.Constant][169] /* ty=Tensor[(96, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(128, 768), float32] */;
    %445 = reshape(%444, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float32] */;
    %446 = add(%445, meta[relay.Constant][170] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 128, 768), float32] */;
    %447 = reshape(%446, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), float32] */;
    %448 = transpose(%447, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 128, 64), float32] */;
    reshape(%448, newshape=[-1, 128, 64]) /* ty=Tensor[(12, 128, 64), float32] */
  };
  %450 = %443(%442) /* ty=Tensor[(12, 128, 64), float32] */;
  %451 = %449(%442) /* ty=Tensor[(12, 128, 64), float32] */;
  %452 = fn (%p068: Tensor[(12, 128, 64), float32], %p139: Tensor[(12, 128, 64), float32], Compiler="opu.custom", Primitive=1) -> Tensor[(12, 128, 128), float32] {
    %309 = nn.batch_matmul(%p068, %p139, transpose_b=True) /* ty=Tensor[(12, 128, 128), float32] */;
    %310 = reshape(%309, newshape=[1, 12, 128, 128]) /* ty=Tensor[(1, 12, 128, 128), float32] */;
    %311 = add(%310, meta[relay.Constant][127] /* ty=Tensor[(1, 1, 1, 128), float32] */) /* ty=Tensor[(1, 12, 128, 128), float32] */;
    %312 = divide(%311, 8f /* ty=float32 */) /* ty=Tensor[(1, 12, 128, 128), float32] */;
    %313 = nn.softmax(%312) /* ty=Tensor[(1, 12, 128, 128), float32] */;
    reshape(%313, newshape=[-1, 128, 128]) /* ty=Tensor[(12, 128, 128), float32] */
  };
  %458 = fn (%p089: Tensor[(128, 768), float32], Compiler="opu.custom", Primitive=1) -> Tensor[(12, 64, 128), float32] {
    %453 = nn.contrib_dense_pack(%p089, meta[relay.Constant][171] /* ty=Tensor[(96, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(128, 768), float32] */;
    %454 = reshape(%453, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float32] */;
    %455 = add(%454, meta[relay.Constant][172] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 128, 768), float32] */;
    %456 = reshape(%455, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), float32] */;
    %457 = transpose(%456, axes=[0, 2, 3, 1]) /* ty=Tensor[(1, 12, 64, 128), float32] */;
    reshape(%457, newshape=[-1, 64, 128]) /* ty=Tensor[(12, 64, 128), float32] */
  };
  %459 = %452(%450, %451) /* ty=Tensor[(12, 128, 128), float32] */;
  %460 = %458(%442) /* ty=Tensor[(12, 64, 128), float32] */;
  %461 = fn (%p067: Tensor[(12, 128, 128), float32], %p138: Tensor[(12, 64, 128), float32], Compiler="opu.custom", Primitive=1) -> Tensor[(128, 768), float32] {
    %306 = nn.batch_matmul(%p067, %p138, transpose_b=True) /* ty=Tensor[(12, 128, 64), float32] */;
    %307 = reshape(%306, newshape=[1, 12, 128, 64]) /* ty=Tensor[(1, 12, 128, 64), float32] */;
    %308 = transpose(%307, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 128, 12, 64), float32] */;
    reshape(%308, newshape=[128, 768]) /* ty=Tensor[(128, 768), float32] */
  };
  %462 = %461(%459, %460) /* ty=Tensor[(128, 768), float32] */;
  %463 = fn (%p066: Tensor[(128, 768), float32], %p137: Tensor[(1, 128, 768), float32], Compiler="opu.custom", Primitive=1) -> Tensor[(128, 768), float32] {
    %301 = nn.contrib_dense_pack(%p066, meta[relay.Constant][123] /* ty=Tensor[(96, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(128, 768), float32] */;
    %302 = reshape(%301, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float32] */;
    %303 = add(%302, meta[relay.Constant][124] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 128, 768), float32] */;
    %304 = add(%303, %p137) /* ty=Tensor[(1, 128, 768), float32] */;
    %305 = nn.layer_norm(%304, meta[relay.Constant][125] /* ty=Tensor[(768), float32] */, meta[relay.Constant][126] /* ty=Tensor[(768), float32] */, epsilon=1e-12f) /* ty=Tensor[(1, 128, 768), float32] */;
    reshape(%305, newshape=[-1, 768]) /* ty=Tensor[(128, 768), float32] */
  };
  %464 = %463(%462, %323) /* ty=Tensor[(128, 768), float32] */;
  %465 = fn (%p064: Tensor[(128, 768), float32], Compiler="opu.custom", Primitive=1) -> Tensor[(128, 3072), float32] {
    %296 = nn.contrib_dense_pack(%p064, meta[relay.Constant][121] /* ty=Tensor[(384, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(128, 3072), float32] */;
    %297 = reshape(%296, newshape=[1, 128, 3072]) /* ty=Tensor[(1, 128, 3072), float32] */;
    %298 = add(%297, meta[relay.Constant][122] /* ty=Tensor[(3072), float32] */) /* ty=Tensor[(1, 128, 3072), float32] */;
    %299 = fn (%p065: Tensor[(1, 128, 3072), float32], Compiler="opu.gelu", Primitive=1) -> Tensor[(1, 128, 3072), float32] {
      %292 = multiply(%p065, 0.707107f /* ty=float32 */) /* ty=Tensor[(1, 128, 3072), float32] */;
      %293 = erf(%292) /* ty=Tensor[(1, 128, 3072), float32] */;
      %294 = multiply(%293, 0.5f /* ty=float32 */) /* ty=Tensor[(1, 128, 3072), float32] */;
      %295 = add(0.5f /* ty=float32 */, %294) /* ty=Tensor[(1, 128, 3072), float32] */;
      multiply(%p065, %295) /* ty=Tensor[(1, 128, 3072), float32] */
    };
    %300 = %299(%298) /* ty=Tensor[(1, 128, 3072), float32] */;
    reshape(%300, newshape=[-1, 3072]) /* ty=Tensor[(128, 3072), float32] */
  };
  %466 = %465(%464) /* ty=Tensor[(128, 3072), float32] */;
  %467 = fn (%p063: Tensor[(128, 3072), float32], %p136: Tensor[(1, 128, 768), float32], Compiler="opu.custom", Primitive=1) -> Tensor[(128, 768), float32] {
    %287 = nn.contrib_dense_pack(%p063, meta[relay.Constant][117] /* ty=Tensor[(96, 3072, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(128, 768), float32] */;
    %288 = reshape(%287, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float32] */;
    %289 = add(%288, meta[relay.Constant][118] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 128, 768), float32] */;
    %290 = add(%289, %p136) /* ty=Tensor[(1, 128, 768), float32] */;
    %291 = nn.layer_norm(%290, meta[relay.Constant][119] /* ty=Tensor[(768), float32] */, meta[relay.Constant][120] /* ty=Tensor[(768), float32] */, epsilon=1e-12f) /* ty=Tensor[(1, 128, 768), float32] */;
    reshape(%291, newshape=[-1, 768]) /* ty=Tensor[(128, 768), float32] */
  };
  %468 = %467(%466, %305) /* ty=Tensor[(128, 768), float32] */;
  %469 = fn (%p062: Tensor[(128, 768), float32], Compiler="opu.custom", Primitive=1) -> Tensor[(12, 128, 64), float32] {
    %282 = nn.contrib_dense_pack(%p062, meta[relay.Constant][115] /* ty=Tensor[(96, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(128, 768), float32] */;
    %283 = reshape(%282, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float32] */;
    %284 = add(%283, meta[relay.Constant][116] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 128, 768), float32] */;
    %285 = reshape(%284, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), float32] */;
    %286 = transpose(%285, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 128, 64), float32] */;
    reshape(%286, newshape=[-1, 128, 64]) /* ty=Tensor[(12, 128, 64), float32] */
  };
  %475 = fn (%p090: Tensor[(128, 768), float32], Compiler="opu.custom", Primitive=1) -> Tensor[(12, 128, 64), float32] {
    %470 = nn.contrib_dense_pack(%p090, meta[relay.Constant][173] /* ty=Tensor[(96, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(128, 768), float32] */;
    %471 = reshape(%470, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float32] */;
    %472 = add(%471, meta[relay.Constant][174] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 128, 768), float32] */;
    %473 = reshape(%472, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), float32] */;
    %474 = transpose(%473, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 128, 64), float32] */;
    reshape(%474, newshape=[-1, 128, 64]) /* ty=Tensor[(12, 128, 64), float32] */
  };
  %476 = %469(%468) /* ty=Tensor[(12, 128, 64), float32] */;
  %477 = %475(%468) /* ty=Tensor[(12, 128, 64), float32] */;
  %478 = fn (%p061: Tensor[(12, 128, 64), float32], %p135: Tensor[(12, 128, 64), float32], Compiler="opu.custom", Primitive=1) -> Tensor[(12, 128, 128), float32] {
    %277 = nn.batch_matmul(%p061, %p135, transpose_b=True) /* ty=Tensor[(12, 128, 128), float32] */;
    %278 = reshape(%277, newshape=[1, 12, 128, 128]) /* ty=Tensor[(1, 12, 128, 128), float32] */;
    %279 = add(%278, meta[relay.Constant][114] /* ty=Tensor[(1, 1, 1, 128), float32] */) /* ty=Tensor[(1, 12, 128, 128), float32] */;
    %280 = divide(%279, 8f /* ty=float32 */) /* ty=Tensor[(1, 12, 128, 128), float32] */;
    %281 = nn.softmax(%280) /* ty=Tensor[(1, 12, 128, 128), float32] */;
    reshape(%281, newshape=[-1, 128, 128]) /* ty=Tensor[(12, 128, 128), float32] */
  };
  %484 = fn (%p091: Tensor[(128, 768), float32], Compiler="opu.custom", Primitive=1) -> Tensor[(12, 64, 128), float32] {
    %479 = nn.contrib_dense_pack(%p091, meta[relay.Constant][175] /* ty=Tensor[(96, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(128, 768), float32] */;
    %480 = reshape(%479, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float32] */;
    %481 = add(%480, meta[relay.Constant][176] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 128, 768), float32] */;
    %482 = reshape(%481, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), float32] */;
    %483 = transpose(%482, axes=[0, 2, 3, 1]) /* ty=Tensor[(1, 12, 64, 128), float32] */;
    reshape(%483, newshape=[-1, 64, 128]) /* ty=Tensor[(12, 64, 128), float32] */
  };
  %485 = %478(%476, %477) /* ty=Tensor[(12, 128, 128), float32] */;
  %486 = %484(%468) /* ty=Tensor[(12, 64, 128), float32] */;
  %487 = fn (%p060: Tensor[(12, 128, 128), float32], %p134: Tensor[(12, 64, 128), float32], Compiler="opu.custom", Primitive=1) -> Tensor[(128, 768), float32] {
    %274 = nn.batch_matmul(%p060, %p134, transpose_b=True) /* ty=Tensor[(12, 128, 64), float32] */;
    %275 = reshape(%274, newshape=[1, 12, 128, 64]) /* ty=Tensor[(1, 12, 128, 64), float32] */;
    %276 = transpose(%275, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 128, 12, 64), float32] */;
    reshape(%276, newshape=[128, 768]) /* ty=Tensor[(128, 768), float32] */
  };
  %488 = %487(%485, %486) /* ty=Tensor[(128, 768), float32] */;
  %489 = fn (%p059: Tensor[(128, 768), float32], %p133: Tensor[(1, 128, 768), float32], Compiler="opu.custom", Primitive=1) -> Tensor[(128, 768), float32] {
    %269 = nn.contrib_dense_pack(%p059, meta[relay.Constant][110] /* ty=Tensor[(96, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(128, 768), float32] */;
    %270 = reshape(%269, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float32] */;
    %271 = add(%270, meta[relay.Constant][111] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 128, 768), float32] */;
    %272 = add(%271, %p133) /* ty=Tensor[(1, 128, 768), float32] */;
    %273 = nn.layer_norm(%272, meta[relay.Constant][112] /* ty=Tensor[(768), float32] */, meta[relay.Constant][113] /* ty=Tensor[(768), float32] */, epsilon=1e-12f) /* ty=Tensor[(1, 128, 768), float32] */;
    reshape(%273, newshape=[-1, 768]) /* ty=Tensor[(128, 768), float32] */
  };
  %490 = %489(%488, %291) /* ty=Tensor[(128, 768), float32] */;
  %491 = fn (%p057: Tensor[(128, 768), float32], Compiler="opu.custom", Primitive=1) -> Tensor[(128, 3072), float32] {
    %264 = nn.contrib_dense_pack(%p057, meta[relay.Constant][108] /* ty=Tensor[(384, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(128, 3072), float32] */;
    %265 = reshape(%264, newshape=[1, 128, 3072]) /* ty=Tensor[(1, 128, 3072), float32] */;
    %266 = add(%265, meta[relay.Constant][109] /* ty=Tensor[(3072), float32] */) /* ty=Tensor[(1, 128, 3072), float32] */;
    %267 = fn (%p058: Tensor[(1, 128, 3072), float32], Compiler="opu.gelu", Primitive=1) -> Tensor[(1, 128, 3072), float32] {
      %260 = multiply(%p058, 0.707107f /* ty=float32 */) /* ty=Tensor[(1, 128, 3072), float32] */;
      %261 = erf(%260) /* ty=Tensor[(1, 128, 3072), float32] */;
      %262 = multiply(%261, 0.5f /* ty=float32 */) /* ty=Tensor[(1, 128, 3072), float32] */;
      %263 = add(0.5f /* ty=float32 */, %262) /* ty=Tensor[(1, 128, 3072), float32] */;
      multiply(%p058, %263) /* ty=Tensor[(1, 128, 3072), float32] */
    };
    %268 = %267(%266) /* ty=Tensor[(1, 128, 3072), float32] */;
    reshape(%268, newshape=[-1, 3072]) /* ty=Tensor[(128, 3072), float32] */
  };
  %492 = %491(%490) /* ty=Tensor[(128, 3072), float32] */;
  %493 = fn (%p056: Tensor[(128, 3072), float32], %p132: Tensor[(1, 128, 768), float32], Compiler="opu.custom", Primitive=1) -> Tensor[(128, 768), float32] {
    %255 = nn.contrib_dense_pack(%p056, meta[relay.Constant][104] /* ty=Tensor[(96, 3072, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(128, 768), float32] */;
    %256 = reshape(%255, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float32] */;
    %257 = add(%256, meta[relay.Constant][105] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 128, 768), float32] */;
    %258 = add(%257, %p132) /* ty=Tensor[(1, 128, 768), float32] */;
    %259 = nn.layer_norm(%258, meta[relay.Constant][106] /* ty=Tensor[(768), float32] */, meta[relay.Constant][107] /* ty=Tensor[(768), float32] */, epsilon=1e-12f) /* ty=Tensor[(1, 128, 768), float32] */;
    reshape(%259, newshape=[-1, 768]) /* ty=Tensor[(128, 768), float32] */
  };
  %494 = %493(%492, %273) /* ty=Tensor[(128, 768), float32] */;
  %495 = fn (%p055: Tensor[(128, 768), float32], Compiler="opu.custom", Primitive=1) -> Tensor[(12, 128, 64), float32] {
    %250 = nn.contrib_dense_pack(%p055, meta[relay.Constant][102] /* ty=Tensor[(96, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(128, 768), float32] */;
    %251 = reshape(%250, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float32] */;
    %252 = add(%251, meta[relay.Constant][103] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 128, 768), float32] */;
    %253 = reshape(%252, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), float32] */;
    %254 = transpose(%253, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 128, 64), float32] */;
    reshape(%254, newshape=[-1, 128, 64]) /* ty=Tensor[(12, 128, 64), float32] */
  };
  %501 = fn (%p092: Tensor[(128, 768), float32], Compiler="opu.custom", Primitive=1) -> Tensor[(12, 128, 64), float32] {
    %496 = nn.contrib_dense_pack(%p092, meta[relay.Constant][177] /* ty=Tensor[(96, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(128, 768), float32] */;
    %497 = reshape(%496, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float32] */;
    %498 = add(%497, meta[relay.Constant][178] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 128, 768), float32] */;
    %499 = reshape(%498, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), float32] */;
    %500 = transpose(%499, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 128, 64), float32] */;
    reshape(%500, newshape=[-1, 128, 64]) /* ty=Tensor[(12, 128, 64), float32] */
  };
  %502 = %495(%494) /* ty=Tensor[(12, 128, 64), float32] */;
  %503 = %501(%494) /* ty=Tensor[(12, 128, 64), float32] */;
  %504 = fn (%p054: Tensor[(12, 128, 64), float32], %p131: Tensor[(12, 128, 64), float32], Compiler="opu.custom", Primitive=1) -> Tensor[(12, 128, 128), float32] {
    %245 = nn.batch_matmul(%p054, %p131, transpose_b=True) /* ty=Tensor[(12, 128, 128), float32] */;
    %246 = reshape(%245, newshape=[1, 12, 128, 128]) /* ty=Tensor[(1, 12, 128, 128), float32] */;
    %247 = add(%246, meta[relay.Constant][101] /* ty=Tensor[(1, 1, 1, 128), float32] */) /* ty=Tensor[(1, 12, 128, 128), float32] */;
    %248 = divide(%247, 8f /* ty=float32 */) /* ty=Tensor[(1, 12, 128, 128), float32] */;
    %249 = nn.softmax(%248) /* ty=Tensor[(1, 12, 128, 128), float32] */;
    reshape(%249, newshape=[-1, 128, 128]) /* ty=Tensor[(12, 128, 128), float32] */
  };
  %510 = fn (%p093: Tensor[(128, 768), float32], Compiler="opu.custom", Primitive=1) -> Tensor[(12, 64, 128), float32] {
    %505 = nn.contrib_dense_pack(%p093, meta[relay.Constant][179] /* ty=Tensor[(96, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(128, 768), float32] */;
    %506 = reshape(%505, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float32] */;
    %507 = add(%506, meta[relay.Constant][180] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 128, 768), float32] */;
    %508 = reshape(%507, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), float32] */;
    %509 = transpose(%508, axes=[0, 2, 3, 1]) /* ty=Tensor[(1, 12, 64, 128), float32] */;
    reshape(%509, newshape=[-1, 64, 128]) /* ty=Tensor[(12, 64, 128), float32] */
  };
  %511 = %504(%502, %503) /* ty=Tensor[(12, 128, 128), float32] */;
  %512 = %510(%494) /* ty=Tensor[(12, 64, 128), float32] */;
  %513 = fn (%p053: Tensor[(12, 128, 128), float32], %p130: Tensor[(12, 64, 128), float32], Compiler="opu.custom", Primitive=1) -> Tensor[(128, 768), float32] {
    %242 = nn.batch_matmul(%p053, %p130, transpose_b=True) /* ty=Tensor[(12, 128, 64), float32] */;
    %243 = reshape(%242, newshape=[1, 12, 128, 64]) /* ty=Tensor[(1, 12, 128, 64), float32] */;
    %244 = transpose(%243, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 128, 12, 64), float32] */;
    reshape(%244, newshape=[128, 768]) /* ty=Tensor[(128, 768), float32] */
  };
  %514 = %513(%511, %512) /* ty=Tensor[(128, 768), float32] */;
  %515 = fn (%p052: Tensor[(128, 768), float32], %p129: Tensor[(1, 128, 768), float32], Compiler="opu.custom", Primitive=1) -> Tensor[(128, 768), float32] {
    %237 = nn.contrib_dense_pack(%p052, meta[relay.Constant][97] /* ty=Tensor[(96, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(128, 768), float32] */;
    %238 = reshape(%237, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float32] */;
    %239 = add(%238, meta[relay.Constant][98] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 128, 768), float32] */;
    %240 = add(%239, %p129) /* ty=Tensor[(1, 128, 768), float32] */;
    %241 = nn.layer_norm(%240, meta[relay.Constant][99] /* ty=Tensor[(768), float32] */, meta[relay.Constant][100] /* ty=Tensor[(768), float32] */, epsilon=1e-12f) /* ty=Tensor[(1, 128, 768), float32] */;
    reshape(%241, newshape=[-1, 768]) /* ty=Tensor[(128, 768), float32] */
  };
  %516 = %515(%514, %259) /* ty=Tensor[(128, 768), float32] */;
  %517 = fn (%p050: Tensor[(128, 768), float32], Compiler="opu.custom", Primitive=1) -> Tensor[(128, 3072), float32] {
    %232 = nn.contrib_dense_pack(%p050, meta[relay.Constant][95] /* ty=Tensor[(384, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(128, 3072), float32] */;
    %233 = reshape(%232, newshape=[1, 128, 3072]) /* ty=Tensor[(1, 128, 3072), float32] */;
    %234 = add(%233, meta[relay.Constant][96] /* ty=Tensor[(3072), float32] */) /* ty=Tensor[(1, 128, 3072), float32] */;
    %235 = fn (%p051: Tensor[(1, 128, 3072), float32], Compiler="opu.gelu", Primitive=1) -> Tensor[(1, 128, 3072), float32] {
      %228 = multiply(%p051, 0.707107f /* ty=float32 */) /* ty=Tensor[(1, 128, 3072), float32] */;
      %229 = erf(%228) /* ty=Tensor[(1, 128, 3072), float32] */;
      %230 = multiply(%229, 0.5f /* ty=float32 */) /* ty=Tensor[(1, 128, 3072), float32] */;
      %231 = add(0.5f /* ty=float32 */, %230) /* ty=Tensor[(1, 128, 3072), float32] */;
      multiply(%p051, %231) /* ty=Tensor[(1, 128, 3072), float32] */
    };
    %236 = %235(%234) /* ty=Tensor[(1, 128, 3072), float32] */;
    reshape(%236, newshape=[-1, 3072]) /* ty=Tensor[(128, 3072), float32] */
  };
  %518 = %517(%516) /* ty=Tensor[(128, 3072), float32] */;
  %519 = fn (%p049: Tensor[(128, 3072), float32], %p128: Tensor[(1, 128, 768), float32], Compiler="opu.custom", Primitive=1) -> Tensor[(128, 768), float32] {
    %223 = nn.contrib_dense_pack(%p049, meta[relay.Constant][91] /* ty=Tensor[(96, 3072, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(128, 768), float32] */;
    %224 = reshape(%223, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float32] */;
    %225 = add(%224, meta[relay.Constant][92] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 128, 768), float32] */;
    %226 = add(%225, %p128) /* ty=Tensor[(1, 128, 768), float32] */;
    %227 = nn.layer_norm(%226, meta[relay.Constant][93] /* ty=Tensor[(768), float32] */, meta[relay.Constant][94] /* ty=Tensor[(768), float32] */, epsilon=1e-12f) /* ty=Tensor[(1, 128, 768), float32] */;
    reshape(%227, newshape=[-1, 768]) /* ty=Tensor[(128, 768), float32] */
  };
  %520 = %519(%518, %241) /* ty=Tensor[(128, 768), float32] */;
  %521 = fn (%p048: Tensor[(128, 768), float32], Compiler="opu.custom", Primitive=1) -> Tensor[(12, 128, 64), float32] {
    %218 = nn.contrib_dense_pack(%p048, meta[relay.Constant][89] /* ty=Tensor[(96, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(128, 768), float32] */;
    %219 = reshape(%218, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float32] */;
    %220 = add(%219, meta[relay.Constant][90] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 128, 768), float32] */;
    %221 = reshape(%220, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), float32] */;
    %222 = transpose(%221, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 128, 64), float32] */;
    reshape(%222, newshape=[-1, 128, 64]) /* ty=Tensor[(12, 128, 64), float32] */
  };
  %527 = fn (%p094: Tensor[(128, 768), float32], Compiler="opu.custom", Primitive=1) -> Tensor[(12, 128, 64), float32] {
    %522 = nn.contrib_dense_pack(%p094, meta[relay.Constant][181] /* ty=Tensor[(96, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(128, 768), float32] */;
    %523 = reshape(%522, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float32] */;
    %524 = add(%523, meta[relay.Constant][182] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 128, 768), float32] */;
    %525 = reshape(%524, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), float32] */;
    %526 = transpose(%525, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 128, 64), float32] */;
    reshape(%526, newshape=[-1, 128, 64]) /* ty=Tensor[(12, 128, 64), float32] */
  };
  %528 = %521(%520) /* ty=Tensor[(12, 128, 64), float32] */;
  %529 = %527(%520) /* ty=Tensor[(12, 128, 64), float32] */;
  %530 = fn (%p047: Tensor[(12, 128, 64), float32], %p127: Tensor[(12, 128, 64), float32], Compiler="opu.custom", Primitive=1) -> Tensor[(12, 128, 128), float32] {
    %213 = nn.batch_matmul(%p047, %p127, transpose_b=True) /* ty=Tensor[(12, 128, 128), float32] */;
    %214 = reshape(%213, newshape=[1, 12, 128, 128]) /* ty=Tensor[(1, 12, 128, 128), float32] */;
    %215 = add(%214, meta[relay.Constant][88] /* ty=Tensor[(1, 1, 1, 128), float32] */) /* ty=Tensor[(1, 12, 128, 128), float32] */;
    %216 = divide(%215, 8f /* ty=float32 */) /* ty=Tensor[(1, 12, 128, 128), float32] */;
    %217 = nn.softmax(%216) /* ty=Tensor[(1, 12, 128, 128), float32] */;
    reshape(%217, newshape=[-1, 128, 128]) /* ty=Tensor[(12, 128, 128), float32] */
  };
  %536 = fn (%p095: Tensor[(128, 768), float32], Compiler="opu.custom", Primitive=1) -> Tensor[(12, 64, 128), float32] {
    %531 = nn.contrib_dense_pack(%p095, meta[relay.Constant][183] /* ty=Tensor[(96, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(128, 768), float32] */;
    %532 = reshape(%531, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float32] */;
    %533 = add(%532, meta[relay.Constant][184] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 128, 768), float32] */;
    %534 = reshape(%533, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), float32] */;
    %535 = transpose(%534, axes=[0, 2, 3, 1]) /* ty=Tensor[(1, 12, 64, 128), float32] */;
    reshape(%535, newshape=[-1, 64, 128]) /* ty=Tensor[(12, 64, 128), float32] */
  };
  %537 = %530(%528, %529) /* ty=Tensor[(12, 128, 128), float32] */;
  %538 = %536(%520) /* ty=Tensor[(12, 64, 128), float32] */;
  %539 = fn (%p046: Tensor[(12, 128, 128), float32], %p126: Tensor[(12, 64, 128), float32], Compiler="opu.custom", Primitive=1) -> Tensor[(128, 768), float32] {
    %210 = nn.batch_matmul(%p046, %p126, transpose_b=True) /* ty=Tensor[(12, 128, 64), float32] */;
    %211 = reshape(%210, newshape=[1, 12, 128, 64]) /* ty=Tensor[(1, 12, 128, 64), float32] */;
    %212 = transpose(%211, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 128, 12, 64), float32] */;
    reshape(%212, newshape=[128, 768]) /* ty=Tensor[(128, 768), float32] */
  };
  %540 = %539(%537, %538) /* ty=Tensor[(128, 768), float32] */;
  %541 = fn (%p045: Tensor[(128, 768), float32], %p125: Tensor[(1, 128, 768), float32], Compiler="opu.custom", Primitive=1) -> Tensor[(128, 768), float32] {
    %205 = nn.contrib_dense_pack(%p045, meta[relay.Constant][84] /* ty=Tensor[(96, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(128, 768), float32] */;
    %206 = reshape(%205, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float32] */;
    %207 = add(%206, meta[relay.Constant][85] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 128, 768), float32] */;
    %208 = add(%207, %p125) /* ty=Tensor[(1, 128, 768), float32] */;
    %209 = nn.layer_norm(%208, meta[relay.Constant][86] /* ty=Tensor[(768), float32] */, meta[relay.Constant][87] /* ty=Tensor[(768), float32] */, epsilon=1e-12f) /* ty=Tensor[(1, 128, 768), float32] */;
    reshape(%209, newshape=[-1, 768]) /* ty=Tensor[(128, 768), float32] */
  };
  %542 = %541(%540, %227) /* ty=Tensor[(128, 768), float32] */;
  %543 = fn (%p043: Tensor[(128, 768), float32], Compiler="opu.custom", Primitive=1) -> Tensor[(128, 3072), float32] {
    %200 = nn.contrib_dense_pack(%p043, meta[relay.Constant][82] /* ty=Tensor[(384, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(128, 3072), float32] */;
    %201 = reshape(%200, newshape=[1, 128, 3072]) /* ty=Tensor[(1, 128, 3072), float32] */;
    %202 = add(%201, meta[relay.Constant][83] /* ty=Tensor[(3072), float32] */) /* ty=Tensor[(1, 128, 3072), float32] */;
    %203 = fn (%p044: Tensor[(1, 128, 3072), float32], Compiler="opu.gelu", Primitive=1) -> Tensor[(1, 128, 3072), float32] {
      %196 = multiply(%p044, 0.707107f /* ty=float32 */) /* ty=Tensor[(1, 128, 3072), float32] */;
      %197 = erf(%196) /* ty=Tensor[(1, 128, 3072), float32] */;
      %198 = multiply(%197, 0.5f /* ty=float32 */) /* ty=Tensor[(1, 128, 3072), float32] */;
      %199 = add(0.5f /* ty=float32 */, %198) /* ty=Tensor[(1, 128, 3072), float32] */;
      multiply(%p044, %199) /* ty=Tensor[(1, 128, 3072), float32] */
    };
    %204 = %203(%202) /* ty=Tensor[(1, 128, 3072), float32] */;
    reshape(%204, newshape=[-1, 3072]) /* ty=Tensor[(128, 3072), float32] */
  };
  %544 = %543(%542) /* ty=Tensor[(128, 3072), float32] */;
  %545 = fn (%p042: Tensor[(128, 3072), float32], %p124: Tensor[(1, 128, 768), float32], Compiler="opu.custom", Primitive=1) -> Tensor[(128, 768), float32] {
    %191 = nn.contrib_dense_pack(%p042, meta[relay.Constant][78] /* ty=Tensor[(96, 3072, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(128, 768), float32] */;
    %192 = reshape(%191, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float32] */;
    %193 = add(%192, meta[relay.Constant][79] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 128, 768), float32] */;
    %194 = add(%193, %p124) /* ty=Tensor[(1, 128, 768), float32] */;
    %195 = nn.layer_norm(%194, meta[relay.Constant][80] /* ty=Tensor[(768), float32] */, meta[relay.Constant][81] /* ty=Tensor[(768), float32] */, epsilon=1e-12f) /* ty=Tensor[(1, 128, 768), float32] */;
    reshape(%195, newshape=[-1, 768]) /* ty=Tensor[(128, 768), float32] */
  };
  %546 = %545(%544, %209) /* ty=Tensor[(128, 768), float32] */;
  %547 = fn (%p041: Tensor[(128, 768), float32], Compiler="opu.custom", Primitive=1) -> Tensor[(12, 128, 64), float32] {
    %186 = nn.contrib_dense_pack(%p041, meta[relay.Constant][76] /* ty=Tensor[(96, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(128, 768), float32] */;
    %187 = reshape(%186, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float32] */;
    %188 = add(%187, meta[relay.Constant][77] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 128, 768), float32] */;
    %189 = reshape(%188, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), float32] */;
    %190 = transpose(%189, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 128, 64), float32] */;
    reshape(%190, newshape=[-1, 128, 64]) /* ty=Tensor[(12, 128, 64), float32] */
  };
  %553 = fn (%p096: Tensor[(128, 768), float32], Compiler="opu.custom", Primitive=1) -> Tensor[(12, 128, 64), float32] {
    %548 = nn.contrib_dense_pack(%p096, meta[relay.Constant][185] /* ty=Tensor[(96, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(128, 768), float32] */;
    %549 = reshape(%548, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float32] */;
    %550 = add(%549, meta[relay.Constant][186] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 128, 768), float32] */;
    %551 = reshape(%550, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), float32] */;
    %552 = transpose(%551, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 128, 64), float32] */;
    reshape(%552, newshape=[-1, 128, 64]) /* ty=Tensor[(12, 128, 64), float32] */
  };
  %554 = %547(%546) /* ty=Tensor[(12, 128, 64), float32] */;
  %555 = %553(%546) /* ty=Tensor[(12, 128, 64), float32] */;
  %556 = fn (%p040: Tensor[(12, 128, 64), float32], %p123: Tensor[(12, 128, 64), float32], Compiler="opu.custom", Primitive=1) -> Tensor[(12, 128, 128), float32] {
    %181 = nn.batch_matmul(%p040, %p123, transpose_b=True) /* ty=Tensor[(12, 128, 128), float32] */;
    %182 = reshape(%181, newshape=[1, 12, 128, 128]) /* ty=Tensor[(1, 12, 128, 128), float32] */;
    %183 = add(%182, meta[relay.Constant][75] /* ty=Tensor[(1, 1, 1, 128), float32] */) /* ty=Tensor[(1, 12, 128, 128), float32] */;
    %184 = divide(%183, 8f /* ty=float32 */) /* ty=Tensor[(1, 12, 128, 128), float32] */;
    %185 = nn.softmax(%184) /* ty=Tensor[(1, 12, 128, 128), float32] */;
    reshape(%185, newshape=[-1, 128, 128]) /* ty=Tensor[(12, 128, 128), float32] */
  };
  %562 = fn (%p097: Tensor[(128, 768), float32], Compiler="opu.custom", Primitive=1) -> Tensor[(12, 64, 128), float32] {
    %557 = nn.contrib_dense_pack(%p097, meta[relay.Constant][187] /* ty=Tensor[(96, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(128, 768), float32] */;
    %558 = reshape(%557, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float32] */;
    %559 = add(%558, meta[relay.Constant][188] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 128, 768), float32] */;
    %560 = reshape(%559, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), float32] */;
    %561 = transpose(%560, axes=[0, 2, 3, 1]) /* ty=Tensor[(1, 12, 64, 128), float32] */;
    reshape(%561, newshape=[-1, 64, 128]) /* ty=Tensor[(12, 64, 128), float32] */
  };
  %563 = %556(%554, %555) /* ty=Tensor[(12, 128, 128), float32] */;
  %564 = %562(%546) /* ty=Tensor[(12, 64, 128), float32] */;
  %565 = fn (%p039: Tensor[(12, 128, 128), float32], %p122: Tensor[(12, 64, 128), float32], Compiler="opu.custom", Primitive=1) -> Tensor[(128, 768), float32] {
    %178 = nn.batch_matmul(%p039, %p122, transpose_b=True) /* ty=Tensor[(12, 128, 64), float32] */;
    %179 = reshape(%178, newshape=[1, 12, 128, 64]) /* ty=Tensor[(1, 12, 128, 64), float32] */;
    %180 = transpose(%179, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 128, 12, 64), float32] */;
    reshape(%180, newshape=[128, 768]) /* ty=Tensor[(128, 768), float32] */
  };
  %566 = %565(%563, %564) /* ty=Tensor[(128, 768), float32] */;
  %567 = fn (%p038: Tensor[(128, 768), float32], %p121: Tensor[(1, 128, 768), float32], Compiler="opu.custom", Primitive=1) -> Tensor[(128, 768), float32] {
    %173 = nn.contrib_dense_pack(%p038, meta[relay.Constant][71] /* ty=Tensor[(96, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(128, 768), float32] */;
    %174 = reshape(%173, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float32] */;
    %175 = add(%174, meta[relay.Constant][72] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 128, 768), float32] */;
    %176 = add(%175, %p121) /* ty=Tensor[(1, 128, 768), float32] */;
    %177 = nn.layer_norm(%176, meta[relay.Constant][73] /* ty=Tensor[(768), float32] */, meta[relay.Constant][74] /* ty=Tensor[(768), float32] */, epsilon=1e-12f) /* ty=Tensor[(1, 128, 768), float32] */;
    reshape(%177, newshape=[-1, 768]) /* ty=Tensor[(128, 768), float32] */
  };
  %568 = %567(%566, %195) /* ty=Tensor[(128, 768), float32] */;
  %569 = fn (%p036: Tensor[(128, 768), float32], Compiler="opu.custom", Primitive=1) -> Tensor[(128, 3072), float32] {
    %168 = nn.contrib_dense_pack(%p036, meta[relay.Constant][69] /* ty=Tensor[(384, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(128, 3072), float32] */;
    %169 = reshape(%168, newshape=[1, 128, 3072]) /* ty=Tensor[(1, 128, 3072), float32] */;
    %170 = add(%169, meta[relay.Constant][70] /* ty=Tensor[(3072), float32] */) /* ty=Tensor[(1, 128, 3072), float32] */;
    %171 = fn (%p037: Tensor[(1, 128, 3072), float32], Compiler="opu.gelu", Primitive=1) -> Tensor[(1, 128, 3072), float32] {
      %164 = multiply(%p037, 0.707107f /* ty=float32 */) /* ty=Tensor[(1, 128, 3072), float32] */;
      %165 = erf(%164) /* ty=Tensor[(1, 128, 3072), float32] */;
      %166 = multiply(%165, 0.5f /* ty=float32 */) /* ty=Tensor[(1, 128, 3072), float32] */;
      %167 = add(0.5f /* ty=float32 */, %166) /* ty=Tensor[(1, 128, 3072), float32] */;
      multiply(%p037, %167) /* ty=Tensor[(1, 128, 3072), float32] */
    };
    %172 = %171(%170) /* ty=Tensor[(1, 128, 3072), float32] */;
    reshape(%172, newshape=[-1, 3072]) /* ty=Tensor[(128, 3072), float32] */
  };
  %570 = %569(%568) /* ty=Tensor[(128, 3072), float32] */;
  %571 = fn (%p035: Tensor[(128, 3072), float32], %p120: Tensor[(1, 128, 768), float32], Compiler="opu.custom", Primitive=1) -> Tensor[(128, 768), float32] {
    %159 = nn.contrib_dense_pack(%p035, meta[relay.Constant][65] /* ty=Tensor[(96, 3072, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(128, 768), float32] */;
    %160 = reshape(%159, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float32] */;
    %161 = add(%160, meta[relay.Constant][66] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 128, 768), float32] */;
    %162 = add(%161, %p120) /* ty=Tensor[(1, 128, 768), float32] */;
    %163 = nn.layer_norm(%162, meta[relay.Constant][67] /* ty=Tensor[(768), float32] */, meta[relay.Constant][68] /* ty=Tensor[(768), float32] */, epsilon=1e-12f) /* ty=Tensor[(1, 128, 768), float32] */;
    reshape(%163, newshape=[-1, 768]) /* ty=Tensor[(128, 768), float32] */
  };
  %572 = %571(%570, %177) /* ty=Tensor[(128, 768), float32] */;
  %573 = fn (%p034: Tensor[(128, 768), float32], Compiler="opu.custom", Primitive=1) -> Tensor[(12, 128, 64), float32] {
    %154 = nn.contrib_dense_pack(%p034, meta[relay.Constant][63] /* ty=Tensor[(96, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(128, 768), float32] */;
    %155 = reshape(%154, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float32] */;
    %156 = add(%155, meta[relay.Constant][64] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 128, 768), float32] */;
    %157 = reshape(%156, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), float32] */;
    %158 = transpose(%157, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 128, 64), float32] */;
    reshape(%158, newshape=[-1, 128, 64]) /* ty=Tensor[(12, 128, 64), float32] */
  };
  %579 = fn (%p098: Tensor[(128, 768), float32], Compiler="opu.custom", Primitive=1) -> Tensor[(12, 128, 64), float32] {
    %574 = nn.contrib_dense_pack(%p098, meta[relay.Constant][189] /* ty=Tensor[(96, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(128, 768), float32] */;
    %575 = reshape(%574, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float32] */;
    %576 = add(%575, meta[relay.Constant][190] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 128, 768), float32] */;
    %577 = reshape(%576, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), float32] */;
    %578 = transpose(%577, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 128, 64), float32] */;
    reshape(%578, newshape=[-1, 128, 64]) /* ty=Tensor[(12, 128, 64), float32] */
  };
  %580 = %573(%572) /* ty=Tensor[(12, 128, 64), float32] */;
  %581 = %579(%572) /* ty=Tensor[(12, 128, 64), float32] */;
  %582 = fn (%p033: Tensor[(12, 128, 64), float32], %p119: Tensor[(12, 128, 64), float32], Compiler="opu.custom", Primitive=1) -> Tensor[(12, 128, 128), float32] {
    %149 = nn.batch_matmul(%p033, %p119, transpose_b=True) /* ty=Tensor[(12, 128, 128), float32] */;
    %150 = reshape(%149, newshape=[1, 12, 128, 128]) /* ty=Tensor[(1, 12, 128, 128), float32] */;
    %151 = add(%150, meta[relay.Constant][62] /* ty=Tensor[(1, 1, 1, 128), float32] */) /* ty=Tensor[(1, 12, 128, 128), float32] */;
    %152 = divide(%151, 8f /* ty=float32 */) /* ty=Tensor[(1, 12, 128, 128), float32] */;
    %153 = nn.softmax(%152) /* ty=Tensor[(1, 12, 128, 128), float32] */;
    reshape(%153, newshape=[-1, 128, 128]) /* ty=Tensor[(12, 128, 128), float32] */
  };
  %588 = fn (%p099: Tensor[(128, 768), float32], Compiler="opu.custom", Primitive=1) -> Tensor[(12, 64, 128), float32] {
    %583 = nn.contrib_dense_pack(%p099, meta[relay.Constant][191] /* ty=Tensor[(96, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(128, 768), float32] */;
    %584 = reshape(%583, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float32] */;
    %585 = add(%584, meta[relay.Constant][192] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 128, 768), float32] */;
    %586 = reshape(%585, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), float32] */;
    %587 = transpose(%586, axes=[0, 2, 3, 1]) /* ty=Tensor[(1, 12, 64, 128), float32] */;
    reshape(%587, newshape=[-1, 64, 128]) /* ty=Tensor[(12, 64, 128), float32] */
  };
  %589 = %582(%580, %581) /* ty=Tensor[(12, 128, 128), float32] */;
  %590 = %588(%572) /* ty=Tensor[(12, 64, 128), float32] */;
  %591 = fn (%p032: Tensor[(12, 128, 128), float32], %p118: Tensor[(12, 64, 128), float32], Compiler="opu.custom", Primitive=1) -> Tensor[(128, 768), float32] {
    %146 = nn.batch_matmul(%p032, %p118, transpose_b=True) /* ty=Tensor[(12, 128, 64), float32] */;
    %147 = reshape(%146, newshape=[1, 12, 128, 64]) /* ty=Tensor[(1, 12, 128, 64), float32] */;
    %148 = transpose(%147, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 128, 12, 64), float32] */;
    reshape(%148, newshape=[128, 768]) /* ty=Tensor[(128, 768), float32] */
  };
  %592 = %591(%589, %590) /* ty=Tensor[(128, 768), float32] */;
  %593 = fn (%p031: Tensor[(128, 768), float32], %p117: Tensor[(1, 128, 768), float32], Compiler="opu.custom", Primitive=1) -> Tensor[(128, 768), float32] {
    %141 = nn.contrib_dense_pack(%p031, meta[relay.Constant][58] /* ty=Tensor[(96, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(128, 768), float32] */;
    %142 = reshape(%141, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float32] */;
    %143 = add(%142, meta[relay.Constant][59] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 128, 768), float32] */;
    %144 = add(%143, %p117) /* ty=Tensor[(1, 128, 768), float32] */;
    %145 = nn.layer_norm(%144, meta[relay.Constant][60] /* ty=Tensor[(768), float32] */, meta[relay.Constant][61] /* ty=Tensor[(768), float32] */, epsilon=1e-12f) /* ty=Tensor[(1, 128, 768), float32] */;
    reshape(%145, newshape=[-1, 768]) /* ty=Tensor[(128, 768), float32] */
  };
  %594 = %593(%592, %163) /* ty=Tensor[(128, 768), float32] */;
  %595 = fn (%p029: Tensor[(128, 768), float32], Compiler="opu.custom", Primitive=1) -> Tensor[(128, 3072), float32] {
    %136 = nn.contrib_dense_pack(%p029, meta[relay.Constant][56] /* ty=Tensor[(384, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(128, 3072), float32] */;
    %137 = reshape(%136, newshape=[1, 128, 3072]) /* ty=Tensor[(1, 128, 3072), float32] */;
    %138 = add(%137, meta[relay.Constant][57] /* ty=Tensor[(3072), float32] */) /* ty=Tensor[(1, 128, 3072), float32] */;
    %139 = fn (%p030: Tensor[(1, 128, 3072), float32], Compiler="opu.gelu", Primitive=1) -> Tensor[(1, 128, 3072), float32] {
      %132 = multiply(%p030, 0.707107f /* ty=float32 */) /* ty=Tensor[(1, 128, 3072), float32] */;
      %133 = erf(%132) /* ty=Tensor[(1, 128, 3072), float32] */;
      %134 = multiply(%133, 0.5f /* ty=float32 */) /* ty=Tensor[(1, 128, 3072), float32] */;
      %135 = add(0.5f /* ty=float32 */, %134) /* ty=Tensor[(1, 128, 3072), float32] */;
      multiply(%p030, %135) /* ty=Tensor[(1, 128, 3072), float32] */
    };
    %140 = %139(%138) /* ty=Tensor[(1, 128, 3072), float32] */;
    reshape(%140, newshape=[-1, 3072]) /* ty=Tensor[(128, 3072), float32] */
  };
  %596 = %595(%594) /* ty=Tensor[(128, 3072), float32] */;
  %597 = fn (%p028: Tensor[(128, 3072), float32], %p116: Tensor[(1, 128, 768), float32], Compiler="opu.custom", Primitive=1) -> Tensor[(128, 768), float32] {
    %127 = nn.contrib_dense_pack(%p028, meta[relay.Constant][52] /* ty=Tensor[(96, 3072, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(128, 768), float32] */;
    %128 = reshape(%127, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float32] */;
    %129 = add(%128, meta[relay.Constant][53] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 128, 768), float32] */;
    %130 = add(%129, %p116) /* ty=Tensor[(1, 128, 768), float32] */;
    %131 = nn.layer_norm(%130, meta[relay.Constant][54] /* ty=Tensor[(768), float32] */, meta[relay.Constant][55] /* ty=Tensor[(768), float32] */, epsilon=1e-12f) /* ty=Tensor[(1, 128, 768), float32] */;
    reshape(%131, newshape=[-1, 768]) /* ty=Tensor[(128, 768), float32] */
  };
  %598 = %597(%596, %145) /* ty=Tensor[(128, 768), float32] */;
  %599 = fn (%p027: Tensor[(128, 768), float32], Compiler="opu.custom", Primitive=1) -> Tensor[(12, 128, 64), float32] {
    %122 = nn.contrib_dense_pack(%p027, meta[relay.Constant][50] /* ty=Tensor[(96, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(128, 768), float32] */;
    %123 = reshape(%122, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float32] */;
    %124 = add(%123, meta[relay.Constant][51] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 128, 768), float32] */;
    %125 = reshape(%124, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), float32] */;
    %126 = transpose(%125, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 128, 64), float32] */;
    reshape(%126, newshape=[-1, 128, 64]) /* ty=Tensor[(12, 128, 64), float32] */
  };
  %605 = fn (%p0100: Tensor[(128, 768), float32], Compiler="opu.custom", Primitive=1) -> Tensor[(12, 128, 64), float32] {
    %600 = nn.contrib_dense_pack(%p0100, meta[relay.Constant][193] /* ty=Tensor[(96, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(128, 768), float32] */;
    %601 = reshape(%600, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float32] */;
    %602 = add(%601, meta[relay.Constant][194] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 128, 768), float32] */;
    %603 = reshape(%602, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), float32] */;
    %604 = transpose(%603, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 128, 64), float32] */;
    reshape(%604, newshape=[-1, 128, 64]) /* ty=Tensor[(12, 128, 64), float32] */
  };
  %606 = %599(%598) /* ty=Tensor[(12, 128, 64), float32] */;
  %607 = %605(%598) /* ty=Tensor[(12, 128, 64), float32] */;
  %608 = fn (%p026: Tensor[(12, 128, 64), float32], %p115: Tensor[(12, 128, 64), float32], Compiler="opu.custom", Primitive=1) -> Tensor[(12, 128, 128), float32] {
    %117 = nn.batch_matmul(%p026, %p115, transpose_b=True) /* ty=Tensor[(12, 128, 128), float32] */;
    %118 = reshape(%117, newshape=[1, 12, 128, 128]) /* ty=Tensor[(1, 12, 128, 128), float32] */;
    %119 = add(%118, meta[relay.Constant][49] /* ty=Tensor[(1, 1, 1, 128), float32] */) /* ty=Tensor[(1, 12, 128, 128), float32] */;
    %120 = divide(%119, 8f /* ty=float32 */) /* ty=Tensor[(1, 12, 128, 128), float32] */;
    %121 = nn.softmax(%120) /* ty=Tensor[(1, 12, 128, 128), float32] */;
    reshape(%121, newshape=[-1, 128, 128]) /* ty=Tensor[(12, 128, 128), float32] */
  };
  %614 = fn (%p0101: Tensor[(128, 768), float32], Compiler="opu.custom", Primitive=1) -> Tensor[(12, 64, 128), float32] {
    %609 = nn.contrib_dense_pack(%p0101, meta[relay.Constant][195] /* ty=Tensor[(96, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(128, 768), float32] */;
    %610 = reshape(%609, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float32] */;
    %611 = add(%610, meta[relay.Constant][196] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 128, 768), float32] */;
    %612 = reshape(%611, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), float32] */;
    %613 = transpose(%612, axes=[0, 2, 3, 1]) /* ty=Tensor[(1, 12, 64, 128), float32] */;
    reshape(%613, newshape=[-1, 64, 128]) /* ty=Tensor[(12, 64, 128), float32] */
  };
  %615 = %608(%606, %607) /* ty=Tensor[(12, 128, 128), float32] */;
  %616 = %614(%598) /* ty=Tensor[(12, 64, 128), float32] */;
  %617 = fn (%p025: Tensor[(12, 128, 128), float32], %p114: Tensor[(12, 64, 128), float32], Compiler="opu.custom", Primitive=1) -> Tensor[(128, 768), float32] {
    %114 = nn.batch_matmul(%p025, %p114, transpose_b=True) /* ty=Tensor[(12, 128, 64), float32] */;
    %115 = reshape(%114, newshape=[1, 12, 128, 64]) /* ty=Tensor[(1, 12, 128, 64), float32] */;
    %116 = transpose(%115, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 128, 12, 64), float32] */;
    reshape(%116, newshape=[128, 768]) /* ty=Tensor[(128, 768), float32] */
  };
  %618 = %617(%615, %616) /* ty=Tensor[(128, 768), float32] */;
  %619 = fn (%p024: Tensor[(128, 768), float32], %p113: Tensor[(1, 128, 768), float32], Compiler="opu.custom", Primitive=1) -> Tensor[(128, 768), float32] {
    %109 = nn.contrib_dense_pack(%p024, meta[relay.Constant][45] /* ty=Tensor[(96, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(128, 768), float32] */;
    %110 = reshape(%109, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float32] */;
    %111 = add(%110, meta[relay.Constant][46] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 128, 768), float32] */;
    %112 = add(%111, %p113) /* ty=Tensor[(1, 128, 768), float32] */;
    %113 = nn.layer_norm(%112, meta[relay.Constant][47] /* ty=Tensor[(768), float32] */, meta[relay.Constant][48] /* ty=Tensor[(768), float32] */, epsilon=1e-12f) /* ty=Tensor[(1, 128, 768), float32] */;
    reshape(%113, newshape=[-1, 768]) /* ty=Tensor[(128, 768), float32] */
  };
  %620 = %619(%618, %131) /* ty=Tensor[(128, 768), float32] */;
  %621 = fn (%p022: Tensor[(128, 768), float32], Compiler="opu.custom", Primitive=1) -> Tensor[(128, 3072), float32] {
    %104 = nn.contrib_dense_pack(%p022, meta[relay.Constant][43] /* ty=Tensor[(384, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(128, 3072), float32] */;
    %105 = reshape(%104, newshape=[1, 128, 3072]) /* ty=Tensor[(1, 128, 3072), float32] */;
    %106 = add(%105, meta[relay.Constant][44] /* ty=Tensor[(3072), float32] */) /* ty=Tensor[(1, 128, 3072), float32] */;
    %107 = fn (%p023: Tensor[(1, 128, 3072), float32], Compiler="opu.gelu", Primitive=1) -> Tensor[(1, 128, 3072), float32] {
      %100 = multiply(%p023, 0.707107f /* ty=float32 */) /* ty=Tensor[(1, 128, 3072), float32] */;
      %101 = erf(%100) /* ty=Tensor[(1, 128, 3072), float32] */;
      %102 = multiply(%101, 0.5f /* ty=float32 */) /* ty=Tensor[(1, 128, 3072), float32] */;
      %103 = add(0.5f /* ty=float32 */, %102) /* ty=Tensor[(1, 128, 3072), float32] */;
      multiply(%p023, %103) /* ty=Tensor[(1, 128, 3072), float32] */
    };
    %108 = %107(%106) /* ty=Tensor[(1, 128, 3072), float32] */;
    reshape(%108, newshape=[-1, 3072]) /* ty=Tensor[(128, 3072), float32] */
  };
  %622 = %621(%620) /* ty=Tensor[(128, 3072), float32] */;
  %623 = fn (%p021: Tensor[(128, 3072), float32], %p112: Tensor[(1, 128, 768), float32], Compiler="opu.custom", Primitive=1) -> Tensor[(128, 768), float32] {
    %95 = nn.contrib_dense_pack(%p021, meta[relay.Constant][39] /* ty=Tensor[(96, 3072, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(128, 768), float32] */;
    %96 = reshape(%95, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float32] */;
    %97 = add(%96, meta[relay.Constant][40] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 128, 768), float32] */;
    %98 = add(%97, %p112) /* ty=Tensor[(1, 128, 768), float32] */;
    %99 = nn.layer_norm(%98, meta[relay.Constant][41] /* ty=Tensor[(768), float32] */, meta[relay.Constant][42] /* ty=Tensor[(768), float32] */, epsilon=1e-12f) /* ty=Tensor[(1, 128, 768), float32] */;
    reshape(%99, newshape=[-1, 768]) /* ty=Tensor[(128, 768), float32] */
  };
  %624 = %623(%622, %113) /* ty=Tensor[(128, 768), float32] */;
  %625 = fn (%p020: Tensor[(128, 768), float32], Compiler="opu.custom", Primitive=1) -> Tensor[(12, 128, 64), float32] {
    %90 = nn.contrib_dense_pack(%p020, meta[relay.Constant][37] /* ty=Tensor[(96, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(128, 768), float32] */;
    %91 = reshape(%90, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float32] */;
    %92 = add(%91, meta[relay.Constant][38] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 128, 768), float32] */;
    %93 = reshape(%92, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), float32] */;
    %94 = transpose(%93, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 128, 64), float32] */;
    reshape(%94, newshape=[-1, 128, 64]) /* ty=Tensor[(12, 128, 64), float32] */
  };
  %631 = fn (%p0102: Tensor[(128, 768), float32], Compiler="opu.custom", Primitive=1) -> Tensor[(12, 128, 64), float32] {
    %626 = nn.contrib_dense_pack(%p0102, meta[relay.Constant][197] /* ty=Tensor[(96, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(128, 768), float32] */;
    %627 = reshape(%626, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float32] */;
    %628 = add(%627, meta[relay.Constant][198] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 128, 768), float32] */;
    %629 = reshape(%628, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), float32] */;
    %630 = transpose(%629, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 128, 64), float32] */;
    reshape(%630, newshape=[-1, 128, 64]) /* ty=Tensor[(12, 128, 64), float32] */
  };
  %632 = %625(%624) /* ty=Tensor[(12, 128, 64), float32] */;
  %633 = %631(%624) /* ty=Tensor[(12, 128, 64), float32] */;
  %634 = fn (%p019: Tensor[(12, 128, 64), float32], %p111: Tensor[(12, 128, 64), float32], Compiler="opu.custom", Primitive=1) -> Tensor[(12, 128, 128), float32] {
    %85 = nn.batch_matmul(%p019, %p111, transpose_b=True) /* ty=Tensor[(12, 128, 128), float32] */;
    %86 = reshape(%85, newshape=[1, 12, 128, 128]) /* ty=Tensor[(1, 12, 128, 128), float32] */;
    %87 = add(%86, meta[relay.Constant][36] /* ty=Tensor[(1, 1, 1, 128), float32] */) /* ty=Tensor[(1, 12, 128, 128), float32] */;
    %88 = divide(%87, 8f /* ty=float32 */) /* ty=Tensor[(1, 12, 128, 128), float32] */;
    %89 = nn.softmax(%88) /* ty=Tensor[(1, 12, 128, 128), float32] */;
    reshape(%89, newshape=[-1, 128, 128]) /* ty=Tensor[(12, 128, 128), float32] */
  };
  %640 = fn (%p0103: Tensor[(128, 768), float32], Compiler="opu.custom", Primitive=1) -> Tensor[(12, 64, 128), float32] {
    %635 = nn.contrib_dense_pack(%p0103, meta[relay.Constant][199] /* ty=Tensor[(96, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(128, 768), float32] */;
    %636 = reshape(%635, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float32] */;
    %637 = add(%636, meta[relay.Constant][200] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 128, 768), float32] */;
    %638 = reshape(%637, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), float32] */;
    %639 = transpose(%638, axes=[0, 2, 3, 1]) /* ty=Tensor[(1, 12, 64, 128), float32] */;
    reshape(%639, newshape=[-1, 64, 128]) /* ty=Tensor[(12, 64, 128), float32] */
  };
  %641 = %634(%632, %633) /* ty=Tensor[(12, 128, 128), float32] */;
  %642 = %640(%624) /* ty=Tensor[(12, 64, 128), float32] */;
  %643 = fn (%p018: Tensor[(12, 128, 128), float32], %p110: Tensor[(12, 64, 128), float32], Compiler="opu.custom", Primitive=1) -> Tensor[(128, 768), float32] {
    %82 = nn.batch_matmul(%p018, %p110, transpose_b=True) /* ty=Tensor[(12, 128, 64), float32] */;
    %83 = reshape(%82, newshape=[1, 12, 128, 64]) /* ty=Tensor[(1, 12, 128, 64), float32] */;
    %84 = transpose(%83, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 128, 12, 64), float32] */;
    reshape(%84, newshape=[128, 768]) /* ty=Tensor[(128, 768), float32] */
  };
  %644 = %643(%641, %642) /* ty=Tensor[(128, 768), float32] */;
  %645 = fn (%p017: Tensor[(128, 768), float32], %p19: Tensor[(1, 128, 768), float32], Compiler="opu.custom", Primitive=1) -> Tensor[(128, 768), float32] {
    %77 = nn.contrib_dense_pack(%p017, meta[relay.Constant][32] /* ty=Tensor[(96, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(128, 768), float32] */;
    %78 = reshape(%77, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float32] */;
    %79 = add(%78, meta[relay.Constant][33] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 128, 768), float32] */;
    %80 = add(%79, %p19) /* ty=Tensor[(1, 128, 768), float32] */;
    %81 = nn.layer_norm(%80, meta[relay.Constant][34] /* ty=Tensor[(768), float32] */, meta[relay.Constant][35] /* ty=Tensor[(768), float32] */, epsilon=1e-12f) /* ty=Tensor[(1, 128, 768), float32] */;
    reshape(%81, newshape=[-1, 768]) /* ty=Tensor[(128, 768), float32] */
  };
  %646 = %645(%644, %99) /* ty=Tensor[(128, 768), float32] */;
  %647 = fn (%p015: Tensor[(128, 768), float32], Compiler="opu.custom", Primitive=1) -> Tensor[(128, 3072), float32] {
    %72 = nn.contrib_dense_pack(%p015, meta[relay.Constant][30] /* ty=Tensor[(384, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(128, 3072), float32] */;
    %73 = reshape(%72, newshape=[1, 128, 3072]) /* ty=Tensor[(1, 128, 3072), float32] */;
    %74 = add(%73, meta[relay.Constant][31] /* ty=Tensor[(3072), float32] */) /* ty=Tensor[(1, 128, 3072), float32] */;
    %75 = fn (%p016: Tensor[(1, 128, 3072), float32], Compiler="opu.gelu", Primitive=1) -> Tensor[(1, 128, 3072), float32] {
      %68 = multiply(%p016, 0.707107f /* ty=float32 */) /* ty=Tensor[(1, 128, 3072), float32] */;
      %69 = erf(%68) /* ty=Tensor[(1, 128, 3072), float32] */;
      %70 = multiply(%69, 0.5f /* ty=float32 */) /* ty=Tensor[(1, 128, 3072), float32] */;
      %71 = add(0.5f /* ty=float32 */, %70) /* ty=Tensor[(1, 128, 3072), float32] */;
      multiply(%p016, %71) /* ty=Tensor[(1, 128, 3072), float32] */
    };
    %76 = %75(%74) /* ty=Tensor[(1, 128, 3072), float32] */;
    reshape(%76, newshape=[-1, 3072]) /* ty=Tensor[(128, 3072), float32] */
  };
  %648 = %647(%646) /* ty=Tensor[(128, 3072), float32] */;
  %649 = fn (%p014: Tensor[(128, 3072), float32], %p18: Tensor[(1, 128, 768), float32], Compiler="opu.custom", Primitive=1) -> Tensor[(128, 768), float32] {
    %63 = nn.contrib_dense_pack(%p014, meta[relay.Constant][26] /* ty=Tensor[(96, 3072, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(128, 768), float32] */;
    %64 = reshape(%63, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float32] */;
    %65 = add(%64, meta[relay.Constant][27] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 128, 768), float32] */;
    %66 = add(%65, %p18) /* ty=Tensor[(1, 128, 768), float32] */;
    %67 = nn.layer_norm(%66, meta[relay.Constant][28] /* ty=Tensor[(768), float32] */, meta[relay.Constant][29] /* ty=Tensor[(768), float32] */, epsilon=1e-12f) /* ty=Tensor[(1, 128, 768), float32] */;
    reshape(%67, newshape=[-1, 768]) /* ty=Tensor[(128, 768), float32] */
  };
  %650 = %649(%648, %81) /* ty=Tensor[(128, 768), float32] */;
  %651 = fn (%p013: Tensor[(128, 768), float32], Compiler="opu.custom", Primitive=1) -> Tensor[(12, 128, 64), float32] {
    %58 = nn.contrib_dense_pack(%p013, meta[relay.Constant][24] /* ty=Tensor[(96, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(128, 768), float32] */;
    %59 = reshape(%58, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float32] */;
    %60 = add(%59, meta[relay.Constant][25] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 128, 768), float32] */;
    %61 = reshape(%60, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), float32] */;
    %62 = transpose(%61, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 128, 64), float32] */;
    reshape(%62, newshape=[-1, 128, 64]) /* ty=Tensor[(12, 128, 64), float32] */
  };
  %657 = fn (%p0104: Tensor[(128, 768), float32], Compiler="opu.custom", Primitive=1) -> Tensor[(12, 128, 64), float32] {
    %652 = nn.contrib_dense_pack(%p0104, meta[relay.Constant][201] /* ty=Tensor[(96, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(128, 768), float32] */;
    %653 = reshape(%652, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float32] */;
    %654 = add(%653, meta[relay.Constant][202] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 128, 768), float32] */;
    %655 = reshape(%654, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), float32] */;
    %656 = transpose(%655, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 128, 64), float32] */;
    reshape(%656, newshape=[-1, 128, 64]) /* ty=Tensor[(12, 128, 64), float32] */
  };
  %658 = %651(%650) /* ty=Tensor[(12, 128, 64), float32] */;
  %659 = %657(%650) /* ty=Tensor[(12, 128, 64), float32] */;
  %660 = fn (%p012: Tensor[(12, 128, 64), float32], %p17: Tensor[(12, 128, 64), float32], Compiler="opu.custom", Primitive=1) -> Tensor[(12, 128, 128), float32] {
    %53 = nn.batch_matmul(%p012, %p17, transpose_b=True) /* ty=Tensor[(12, 128, 128), float32] */;
    %54 = reshape(%53, newshape=[1, 12, 128, 128]) /* ty=Tensor[(1, 12, 128, 128), float32] */;
    %55 = add(%54, meta[relay.Constant][23] /* ty=Tensor[(1, 1, 1, 128), float32] */) /* ty=Tensor[(1, 12, 128, 128), float32] */;
    %56 = divide(%55, 8f /* ty=float32 */) /* ty=Tensor[(1, 12, 128, 128), float32] */;
    %57 = nn.softmax(%56) /* ty=Tensor[(1, 12, 128, 128), float32] */;
    reshape(%57, newshape=[-1, 128, 128]) /* ty=Tensor[(12, 128, 128), float32] */
  };
  %666 = fn (%p0105: Tensor[(128, 768), float32], Compiler="opu.custom", Primitive=1) -> Tensor[(12, 64, 128), float32] {
    %661 = nn.contrib_dense_pack(%p0105, meta[relay.Constant][203] /* ty=Tensor[(96, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(128, 768), float32] */;
    %662 = reshape(%661, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float32] */;
    %663 = add(%662, meta[relay.Constant][204] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 128, 768), float32] */;
    %664 = reshape(%663, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), float32] */;
    %665 = transpose(%664, axes=[0, 2, 3, 1]) /* ty=Tensor[(1, 12, 64, 128), float32] */;
    reshape(%665, newshape=[-1, 64, 128]) /* ty=Tensor[(12, 64, 128), float32] */
  };
  %667 = %660(%658, %659) /* ty=Tensor[(12, 128, 128), float32] */;
  %668 = %666(%650) /* ty=Tensor[(12, 64, 128), float32] */;
  %669 = fn (%p011: Tensor[(12, 128, 128), float32], %p16: Tensor[(12, 64, 128), float32], Compiler="opu.custom", Primitive=1) -> Tensor[(128, 768), float32] {
    %50 = nn.batch_matmul(%p011, %p16, transpose_b=True) /* ty=Tensor[(12, 128, 64), float32] */;
    %51 = reshape(%50, newshape=[1, 12, 128, 64]) /* ty=Tensor[(1, 12, 128, 64), float32] */;
    %52 = transpose(%51, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 128, 12, 64), float32] */;
    reshape(%52, newshape=[128, 768]) /* ty=Tensor[(128, 768), float32] */
  };
  %670 = %669(%667, %668) /* ty=Tensor[(128, 768), float32] */;
  %671 = fn (%p010: Tensor[(128, 768), float32], %p15: Tensor[(1, 128, 768), float32], Compiler="opu.custom", Primitive=1) -> Tensor[(128, 768), float32] {
    %45 = nn.contrib_dense_pack(%p010, meta[relay.Constant][19] /* ty=Tensor[(96, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(128, 768), float32] */;
    %46 = reshape(%45, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float32] */;
    %47 = add(%46, meta[relay.Constant][20] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 128, 768), float32] */;
    %48 = add(%47, %p15) /* ty=Tensor[(1, 128, 768), float32] */;
    %49 = nn.layer_norm(%48, meta[relay.Constant][21] /* ty=Tensor[(768), float32] */, meta[relay.Constant][22] /* ty=Tensor[(768), float32] */, epsilon=1e-12f) /* ty=Tensor[(1, 128, 768), float32] */;
    reshape(%49, newshape=[-1, 768]) /* ty=Tensor[(128, 768), float32] */
  };
  %672 = %671(%670, %67) /* ty=Tensor[(128, 768), float32] */;
  %673 = fn (%p08: Tensor[(128, 768), float32], Compiler="opu.custom", Primitive=1) -> Tensor[(128, 3072), float32] {
    %40 = nn.contrib_dense_pack(%p08, meta[relay.Constant][17] /* ty=Tensor[(384, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(128, 3072), float32] */;
    %41 = reshape(%40, newshape=[1, 128, 3072]) /* ty=Tensor[(1, 128, 3072), float32] */;
    %42 = add(%41, meta[relay.Constant][18] /* ty=Tensor[(3072), float32] */) /* ty=Tensor[(1, 128, 3072), float32] */;
    %43 = fn (%p09: Tensor[(1, 128, 3072), float32], Compiler="opu.gelu", Primitive=1) -> Tensor[(1, 128, 3072), float32] {
      %36 = multiply(%p09, 0.707107f /* ty=float32 */) /* ty=Tensor[(1, 128, 3072), float32] */;
      %37 = erf(%36) /* ty=Tensor[(1, 128, 3072), float32] */;
      %38 = multiply(%37, 0.5f /* ty=float32 */) /* ty=Tensor[(1, 128, 3072), float32] */;
      %39 = add(0.5f /* ty=float32 */, %38) /* ty=Tensor[(1, 128, 3072), float32] */;
      multiply(%p09, %39) /* ty=Tensor[(1, 128, 3072), float32] */
    };
    %44 = %43(%42) /* ty=Tensor[(1, 128, 3072), float32] */;
    reshape(%44, newshape=[-1, 3072]) /* ty=Tensor[(128, 3072), float32] */
  };
  %674 = %673(%672) /* ty=Tensor[(128, 3072), float32] */;
  %675 = fn (%p07: Tensor[(128, 3072), float32], %p14: Tensor[(1, 128, 768), float32], Compiler="opu.custom", Primitive=1) -> Tensor[(128, 768), float32] {
    %31 = nn.contrib_dense_pack(%p07, meta[relay.Constant][13] /* ty=Tensor[(96, 3072, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(128, 768), float32] */;
    %32 = reshape(%31, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float32] */;
    %33 = add(%32, meta[relay.Constant][14] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 128, 768), float32] */;
    %34 = add(%33, %p14) /* ty=Tensor[(1, 128, 768), float32] */;
    %35 = nn.layer_norm(%34, meta[relay.Constant][15] /* ty=Tensor[(768), float32] */, meta[relay.Constant][16] /* ty=Tensor[(768), float32] */, epsilon=1e-12f) /* ty=Tensor[(1, 128, 768), float32] */;
    reshape(%35, newshape=[-1, 768]) /* ty=Tensor[(128, 768), float32] */
  };
  %676 = %675(%674, %49) /* ty=Tensor[(128, 768), float32] */;
  %677 = fn (%p06: Tensor[(128, 768), float32], Compiler="opu.custom", Primitive=1) -> Tensor[(12, 128, 64), float32] {
    %26 = nn.contrib_dense_pack(%p06, meta[relay.Constant][11] /* ty=Tensor[(96, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(128, 768), float32] */;
    %27 = reshape(%26, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float32] */;
    %28 = add(%27, meta[relay.Constant][12] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 128, 768), float32] */;
    %29 = reshape(%28, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), float32] */;
    %30 = transpose(%29, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 128, 64), float32] */;
    reshape(%30, newshape=[-1, 128, 64]) /* ty=Tensor[(12, 128, 64), float32] */
  };
  %683 = fn (%p0106: Tensor[(128, 768), float32], Compiler="opu.custom", Primitive=1) -> Tensor[(12, 128, 64), float32] {
    %678 = nn.contrib_dense_pack(%p0106, meta[relay.Constant][205] /* ty=Tensor[(96, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(128, 768), float32] */;
    %679 = reshape(%678, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float32] */;
    %680 = add(%679, meta[relay.Constant][206] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 128, 768), float32] */;
    %681 = reshape(%680, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), float32] */;
    %682 = transpose(%681, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 128, 64), float32] */;
    reshape(%682, newshape=[-1, 128, 64]) /* ty=Tensor[(12, 128, 64), float32] */
  };
  %684 = %677(%676) /* ty=Tensor[(12, 128, 64), float32] */;
  %685 = %683(%676) /* ty=Tensor[(12, 128, 64), float32] */;
  %686 = fn (%p05: Tensor[(12, 128, 64), float32], %p13: Tensor[(12, 128, 64), float32], Compiler="opu.custom", Primitive=1) -> Tensor[(12, 128, 128), float32] {
    %21 = nn.batch_matmul(%p05, %p13, transpose_b=True) /* ty=Tensor[(12, 128, 128), float32] */;
    %22 = reshape(%21, newshape=[1, 12, 128, 128]) /* ty=Tensor[(1, 12, 128, 128), float32] */;
    %23 = add(%22, meta[relay.Constant][10] /* ty=Tensor[(1, 1, 1, 128), float32] */) /* ty=Tensor[(1, 12, 128, 128), float32] */;
    %24 = divide(%23, 8f /* ty=float32 */) /* ty=Tensor[(1, 12, 128, 128), float32] */;
    %25 = nn.softmax(%24) /* ty=Tensor[(1, 12, 128, 128), float32] */;
    reshape(%25, newshape=[-1, 128, 128]) /* ty=Tensor[(12, 128, 128), float32] */
  };
  %692 = fn (%p0107: Tensor[(128, 768), float32], Compiler="opu.custom", Primitive=1) -> Tensor[(12, 64, 128), float32] {
    %687 = nn.contrib_dense_pack(%p0107, meta[relay.Constant][207] /* ty=Tensor[(96, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(128, 768), float32] */;
    %688 = reshape(%687, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float32] */;
    %689 = add(%688, meta[relay.Constant][208] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 128, 768), float32] */;
    %690 = reshape(%689, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), float32] */;
    %691 = transpose(%690, axes=[0, 2, 3, 1]) /* ty=Tensor[(1, 12, 64, 128), float32] */;
    reshape(%691, newshape=[-1, 64, 128]) /* ty=Tensor[(12, 64, 128), float32] */
  };
  %693 = %686(%684, %685) /* ty=Tensor[(12, 128, 128), float32] */;
  %694 = %692(%676) /* ty=Tensor[(12, 64, 128), float32] */;
  %695 = fn (%p04: Tensor[(12, 128, 128), float32], %p12: Tensor[(12, 64, 128), float32], Compiler="opu.custom", Primitive=1) -> Tensor[(128, 768), float32] {
    %18 = nn.batch_matmul(%p04, %p12, transpose_b=True) /* ty=Tensor[(12, 128, 64), float32] */;
    %19 = reshape(%18, newshape=[1, 12, 128, 64]) /* ty=Tensor[(1, 12, 128, 64), float32] */;
    %20 = transpose(%19, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 128, 12, 64), float32] */;
    reshape(%20, newshape=[128, 768]) /* ty=Tensor[(128, 768), float32] */
  };
  %696 = %695(%693, %694) /* ty=Tensor[(128, 768), float32] */;
  %697 = fn (%p03: Tensor[(128, 768), float32], %p11: Tensor[(1, 128, 768), float32], Compiler="opu.custom", Primitive=1) -> Tensor[(128, 768), float32] {
    %13 = nn.contrib_dense_pack(%p03, meta[relay.Constant][6] /* ty=Tensor[(96, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(128, 768), float32] */;
    %14 = reshape(%13, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float32] */;
    %15 = add(%14, meta[relay.Constant][7] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 128, 768), float32] */;
    %16 = add(%15, %p11) /* ty=Tensor[(1, 128, 768), float32] */;
    %17 = nn.layer_norm(%16, meta[relay.Constant][8] /* ty=Tensor[(768), float32] */, meta[relay.Constant][9] /* ty=Tensor[(768), float32] */, epsilon=1e-12f) /* ty=Tensor[(1, 128, 768), float32] */;
    reshape(%17, newshape=[-1, 768]) /* ty=Tensor[(128, 768), float32] */
  };
  %698 = %697(%696, %35) /* ty=Tensor[(128, 768), float32] */;
  %699 = fn (%p01: Tensor[(128, 768), float32], Compiler="opu.custom", Primitive=1) -> Tensor[(128, 3072), float32] {
    %8 = nn.contrib_dense_pack(%p01, meta[relay.Constant][4] /* ty=Tensor[(384, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(128, 3072), float32] */;
    %9 = reshape(%8, newshape=[1, 128, 3072]) /* ty=Tensor[(1, 128, 3072), float32] */;
    %10 = add(%9, meta[relay.Constant][5] /* ty=Tensor[(3072), float32] */) /* ty=Tensor[(1, 128, 3072), float32] */;
    %11 = fn (%p02: Tensor[(1, 128, 3072), float32], Compiler="opu.gelu", Primitive=1) -> Tensor[(1, 128, 3072), float32] {
      %4 = multiply(%p02, 0.707107f /* ty=float32 */) /* ty=Tensor[(1, 128, 3072), float32] */;
      %5 = erf(%4) /* ty=Tensor[(1, 128, 3072), float32] */;
      %6 = multiply(%5, 0.5f /* ty=float32 */) /* ty=Tensor[(1, 128, 3072), float32] */;
      %7 = add(0.5f /* ty=float32 */, %6) /* ty=Tensor[(1, 128, 3072), float32] */;
      multiply(%p02, %7) /* ty=Tensor[(1, 128, 3072), float32] */
    };
    %12 = %11(%10) /* ty=Tensor[(1, 128, 3072), float32] */;
    reshape(%12, newshape=[-1, 3072]) /* ty=Tensor[(128, 3072), float32] */
  };
  %700 = %699(%698) /* ty=Tensor[(128, 3072), float32] */;
  %701 = fn (%p0: Tensor[(128, 3072), float32], %p1: Tensor[(1, 128, 768), float32], Compiler="opu.custom", Primitive=1) -> Tensor[(1, 128, 768), float32] {
    %0 = nn.contrib_dense_pack(%p0, meta[relay.Constant][0] /* ty=Tensor[(96, 3072, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(128, 768), float32] */;
    %1 = reshape(%0, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float32] */;
    %2 = add(%1, meta[relay.Constant][1] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 128, 768), float32] */;
    %3 = add(%2, %p1) /* ty=Tensor[(1, 128, 768), float32] */;
    nn.layer_norm(%3, meta[relay.Constant][2] /* ty=Tensor[(768), float32] */, meta[relay.Constant][3] /* ty=Tensor[(768), float32] */, epsilon=1e-12f) /* ty=Tensor[(1, 128, 768), float32] */
  };
  %705 = %701(%700, %17) /* ty=Tensor[(1, 128, 768), float32] */;
  %706 = fn (%p0108: Tensor[(1, 128, 768), float32], Compiler="opu.custom", Primitive=1) -> Tensor[(1, 768), float32] {
    %702 = take(%p0108, 0 /* ty=int32 */, axis=1, mode="wrap") /* ty=Tensor[(1, 768), float32] */;
    %703 = nn.contrib_dense_pack(%702, meta[relay.Constant][209] /* ty=Tensor[(96, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(1, 768), float32] */;
    %704 = add(%703, meta[relay.Constant][210] /* ty=Tensor[(1, 768), float32] */) /* ty=Tensor[(1, 768), float32] */;
    tanh(%704) /* ty=Tensor[(1, 768), float32] */
  };
  %707 = %706(%705) /* ty=Tensor[(1, 768), float32] */;
  (%705, %707)
}

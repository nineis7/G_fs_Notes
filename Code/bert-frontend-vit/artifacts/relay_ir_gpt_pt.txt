def @main(%idx: Tensor[(1, 128), int64], param_virtual_devices=[VirtualDevice(device_type=1, virtual_device_id=0, target=Target(kind='llvm', keys={'cpu'}, attrs={'link-params': (bool)0}, host=Target(kind='llvm', keys={'cpu'}, attrs={'link-params': (bool)0})))], result_virtual_device=VirtualDevice(device_type=1, virtual_device_id=0, target=Target(kind='llvm', keys={'cpu'}, attrs={'link-params': (bool)0}, host=Target(kind='llvm', keys={'cpu'}, attrs={'link-params': (bool)0}))), hash="032694f7a2c115f1", weight_layout="NC8n") -> Tensor[(1, 128, 128), float32] {
  %0 = cast(%idx, dtype="int32") /* ty=Tensor[(1, 128), int32] */;
  %1 = take(meta[relay.Constant][0] /* ty=Tensor[(128, 768), float32] */, %0, axis=0) /* ty=Tensor[(1, 128, 768), float32] */;
  %2 = add(%1, meta[relay.Constant][1] /* ty=Tensor[(1, 128, 768), float32] */) /* ty=Tensor[(1, 128, 768), float32] */;
  (%2 used below)
  
  %3 = nn.layer_norm(%2, meta[relay.Constant][3] /* ty=Tensor[(768), float32] */, meta[relay.Constant][4] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 128, 768), float32] */;
  %4 = reshape(%3, newshape=[-1, 768]) /* ty=Tensor[(128, 768), float32] */;

  %5 = nn.contrib_dense_pack(%4, meta[relay.Constant][5] /* ty=Tensor[(96, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(128, 768), float32] */;
  %6 = reshape(%5, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float32] */;
  %7 = add(%6, meta[relay.Constant][6] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 128, 768), float32] */;
  %8 = reshape(%7, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), float32] */;
  %9 = transpose(%8, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 128, 64), float32] */;

  %10 = nn.contrib_dense_pack(%4, meta[relay.Constant][7] /* ty=Tensor[(96, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(128, 768), float32] */;
  %11 = reshape(%10, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float32] */;
  %12 = add(%11, meta[relay.Constant][8] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 128, 768), float32] */;
  %13 = reshape(%12, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), float32] */;
  %14 = transpose(%13, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 128, 64), float32] */;
  %15 = reshape(%9, newshape=[-1, 128, 64]) /* ty=Tensor[(12, 128, 64), float32] */;
  %16 = reshape(%14, newshape=[-1, 128, 64]) /* ty=Tensor[(12, 128, 64), float32] */;

  %17 = nn.batch_matmul(%15, %16, transpose_b=True) /* ty=Tensor[(12, 128, 128), float32] */;
  %18 = reshape(%17, newshape=[1, 12, 128, 128]) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  %19 = multiply(%18, 0.125f /* ty=float32 */) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  %20 = where(meta[relay.Constant][2] /* ty=Tensor[(1, 1, 128, 128), bool] */, -inff /* ty=float32 */, %19) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  %21 = nn.softmax(%20) /* ty=Tensor[(1, 12, 128, 128), float32] */;

  %22 = nn.contrib_dense_pack(%4, meta[relay.Constant][9] /* ty=Tensor[(96, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(128, 768), float32] */;
  %23 = reshape(%22, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float32] */;
  %24 = add(%23, meta[relay.Constant][10] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 128, 768), float32] */;
  %25 = reshape(%24, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), float32] */;
  %26 = transpose(%25, axes=[0, 2, 3, 1]) /* ty=Tensor[(1, 12, 64, 128), float32] */;
  %27 = reshape(%21, newshape=[-1, 128, 128]) /* ty=Tensor[(12, 128, 128), float32] */;
  %28 = reshape(%26, newshape=[-1, 64, 128]) /* ty=Tensor[(12, 64, 128), float32] */;

  %29 = nn.batch_matmul(%27, %28, transpose_b=True) /* ty=Tensor[(12, 128, 64), float32] */;
  %30 = reshape(%29, newshape=[1, 12, 128, 64]) /* ty=Tensor[(1, 12, 128, 64), float32] */;
  %31 = transpose(%30, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 128, 12, 64), float32] */;
  %32 = reshape(%31, newshape=[128, 768]) /* ty=Tensor[(128, 768), float32] */;

  %33 = nn.contrib_dense_pack(%32, meta[relay.Constant][11] /* ty=Tensor[(96, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(128, 768), float32] */;
  %34 = reshape(%33, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float32] */;
  %35 = add(%34, meta[relay.Constant][12] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 128, 768), float32] */;
  %36 = add(%2, %35) /* ty=Tensor[(1, 128, 768), float32] */;
  %37 = nn.layer_norm(%36, meta[relay.Constant][13] /* ty=Tensor[(768), float32] */, meta[relay.Constant][14] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 128, 768), float32] */;
  %38 = reshape(%37, newshape=[-1, 768]) /* ty=Tensor[(128, 768), float32] */;

  %39 = nn.contrib_dense_pack(%38, meta[relay.Constant][15] /* ty=Tensor[(384, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(128, 3072), float32] */;
  %40 = reshape(%39, newshape=[1, 128, 3072]) /* ty=Tensor[(1, 128, 3072), float32] */;
  %41 = add(%40, meta[relay.Constant][16] /* ty=Tensor[(3072), float32] */) /* ty=Tensor[(1, 128, 3072), float32] */;
  %42 = multiply(%41, 0.707107f /* ty=float32 */) /* ty=Tensor[(1, 128, 3072), float32] */;
  %43 = erf(%42) /* ty=Tensor[(1, 128, 3072), float32] */;
  %44 = multiply(%43, 0.5f /* ty=float32 */) /* ty=Tensor[(1, 128, 3072), float32] */;
  %45 = add(0.5f /* ty=float32 */, %44) /* ty=Tensor[(1, 128, 3072), float32] */;
  %46 = multiply(%41, %45) /* ty=Tensor[(1, 128, 3072), float32] */;
  %47 = reshape(%46, newshape=[-1, 3072]) /* ty=Tensor[(128, 3072), float32] */;

  %48 = nn.contrib_dense_pack(%47, meta[relay.Constant][17] /* ty=Tensor[(96, 3072, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(128, 768), float32] */;
  %49 = reshape(%48, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float32] */;
  %50 = add(%49, meta[relay.Constant][18] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 128, 768), float32] */;
  %51 = add(%36, %50) /* ty=Tensor[(1, 128, 768), float32] */;
  %52 = nn.layer_norm(%51, meta[relay.Constant][20] /* ty=Tensor[(768), float32] */, meta[relay.Constant][21] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 128, 768), float32] */;
  %53 = reshape(%52, newshape=[-1, 768]) /* ty=Tensor[(128, 768), float32] */;

  %54 = nn.contrib_dense_pack(%53, meta[relay.Constant][22] /* ty=Tensor[(96, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(128, 768), float32] */;
  %55 = reshape(%54, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float32] */;
  %56 = add(%55, meta[relay.Constant][23] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 128, 768), float32] */;
  %57 = reshape(%56, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), float32] */;
  %58 = transpose(%57, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 128, 64), float32] */;

  %59 = nn.contrib_dense_pack(%53, meta[relay.Constant][24] /* ty=Tensor[(96, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(128, 768), float32] */;
  %60 = reshape(%59, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float32] */;
  %61 = add(%60, meta[relay.Constant][25] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 128, 768), float32] */;
  %62 = reshape(%61, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), float32] */;
  %63 = transpose(%62, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 128, 64), float32] */;
  %64 = reshape(%58, newshape=[-1, 128, 64]) /* ty=Tensor[(12, 128, 64), float32] */;
  %65 = reshape(%63, newshape=[-1, 128, 64]) /* ty=Tensor[(12, 128, 64), float32] */;

  %66 = nn.batch_matmul(%64, %65, transpose_b=True) /* ty=Tensor[(12, 128, 128), float32] */;
  %67 = reshape(%66, newshape=[1, 12, 128, 128]) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  %68 = multiply(%67, 0.125f /* ty=float32 */) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  %69 = where(meta[relay.Constant][19] /* ty=Tensor[(1, 1, 128, 128), bool] */, -inff /* ty=float32 */, %68) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  %70 = nn.softmax(%69) /* ty=Tensor[(1, 12, 128, 128), float32] */;

  %71 = nn.contrib_dense_pack(%53, meta[relay.Constant][26] /* ty=Tensor[(96, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(128, 768), float32] */;
  %72 = reshape(%71, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float32] */;
  %73 = add(%72, meta[relay.Constant][27] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 128, 768), float32] */;
  %74 = reshape(%73, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), float32] */;
  %75 = transpose(%74, axes=[0, 2, 3, 1]) /* ty=Tensor[(1, 12, 64, 128), float32] */;
  %76 = reshape(%70, newshape=[-1, 128, 128]) /* ty=Tensor[(12, 128, 128), float32] */;
  %77 = reshape(%75, newshape=[-1, 64, 128]) /* ty=Tensor[(12, 64, 128), float32] */;

  %78 = nn.batch_matmul(%76, %77, transpose_b=True) /* ty=Tensor[(12, 128, 64), float32] */;
  %79 = reshape(%78, newshape=[1, 12, 128, 64]) /* ty=Tensor[(1, 12, 128, 64), float32] */;
  %80 = transpose(%79, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 128, 12, 64), float32] */;
  %81 = reshape(%80, newshape=[128, 768]) /* ty=Tensor[(128, 768), float32] */;

  %82 = nn.contrib_dense_pack(%81, meta[relay.Constant][28] /* ty=Tensor[(96, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(128, 768), float32] */;
  %83 = reshape(%82, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float32] */;
  %84 = add(%83, meta[relay.Constant][29] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 128, 768), float32] */;
  %85 = add(%51, %84) /* ty=Tensor[(1, 128, 768), float32] */;
  %86 = nn.layer_norm(%85, meta[relay.Constant][30] /* ty=Tensor[(768), float32] */, meta[relay.Constant][31] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 128, 768), float32] */;
  %87 = reshape(%86, newshape=[-1, 768]) /* ty=Tensor[(128, 768), float32] */;

  %88 = nn.contrib_dense_pack(%87, meta[relay.Constant][32] /* ty=Tensor[(384, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(128, 3072), float32] */;
  %89 = reshape(%88, newshape=[1, 128, 3072]) /* ty=Tensor[(1, 128, 3072), float32] */;
  %90 = add(%89, meta[relay.Constant][33] /* ty=Tensor[(3072), float32] */) /* ty=Tensor[(1, 128, 3072), float32] */;
  %91 = multiply(%90, 0.707107f /* ty=float32 */) /* ty=Tensor[(1, 128, 3072), float32] */;
  %92 = erf(%91) /* ty=Tensor[(1, 128, 3072), float32] */;
  %93 = multiply(%92, 0.5f /* ty=float32 */) /* ty=Tensor[(1, 128, 3072), float32] */;
  %94 = add(0.5f /* ty=float32 */, %93) /* ty=Tensor[(1, 128, 3072), float32] */;
  %95 = multiply(%90, %94) /* ty=Tensor[(1, 128, 3072), float32] */;
  %96 = reshape(%95, newshape=[-1, 3072]) /* ty=Tensor[(128, 3072), float32] */;

  %97 = nn.contrib_dense_pack(%96, meta[relay.Constant][34] /* ty=Tensor[(96, 3072, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(128, 768), float32] */;
  %98 = reshape(%97, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float32] */;
  %99 = add(%98, meta[relay.Constant][35] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 128, 768), float32] */;
  %100 = add(%85, %99) /* ty=Tensor[(1, 128, 768), float32] */;
  %101 = nn.layer_norm(%100, meta[relay.Constant][37] /* ty=Tensor[(768), float32] */, meta[relay.Constant][38] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 128, 768), float32] */;
  %102 = reshape(%101, newshape=[-1, 768]) /* ty=Tensor[(128, 768), float32] */;

  %103 = nn.contrib_dense_pack(%102, meta[relay.Constant][39] /* ty=Tensor[(96, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(128, 768), float32] */;
  %104 = reshape(%103, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float32] */;
  %105 = add(%104, meta[relay.Constant][40] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 128, 768), float32] */;
  %106 = reshape(%105, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), float32] */;
  %107 = transpose(%106, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 128, 64), float32] */;

  %108 = nn.contrib_dense_pack(%102, meta[relay.Constant][41] /* ty=Tensor[(96, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(128, 768), float32] */;
  %109 = reshape(%108, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float32] */;
  %110 = add(%109, meta[relay.Constant][42] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 128, 768), float32] */;
  %111 = reshape(%110, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), float32] */;
  %112 = transpose(%111, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 128, 64), float32] */;
  %113 = reshape(%107, newshape=[-1, 128, 64]) /* ty=Tensor[(12, 128, 64), float32] */;
  %114 = reshape(%112, newshape=[-1, 128, 64]) /* ty=Tensor[(12, 128, 64), float32] */;

  %115 = nn.batch_matmul(%113, %114, transpose_b=True) /* ty=Tensor[(12, 128, 128), float32] */;
  %116 = reshape(%115, newshape=[1, 12, 128, 128]) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  %117 = multiply(%116, 0.125f /* ty=float32 */) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  %118 = where(meta[relay.Constant][36] /* ty=Tensor[(1, 1, 128, 128), bool] */, -inff /* ty=float32 */, %117) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  %119 = nn.softmax(%118) /* ty=Tensor[(1, 12, 128, 128), float32] */;

  %120 = nn.contrib_dense_pack(%102, meta[relay.Constant][43] /* ty=Tensor[(96, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(128, 768), float32] */;
  %121 = reshape(%120, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float32] */;
  %122 = add(%121, meta[relay.Constant][44] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 128, 768), float32] */;
  %123 = reshape(%122, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), float32] */;
  %124 = transpose(%123, axes=[0, 2, 3, 1]) /* ty=Tensor[(1, 12, 64, 128), float32] */;
  %125 = reshape(%119, newshape=[-1, 128, 128]) /* ty=Tensor[(12, 128, 128), float32] */;
  %126 = reshape(%124, newshape=[-1, 64, 128]) /* ty=Tensor[(12, 64, 128), float32] */;

  %127 = nn.batch_matmul(%125, %126, transpose_b=True) /* ty=Tensor[(12, 128, 64), float32] */;
  %128 = reshape(%127, newshape=[1, 12, 128, 64]) /* ty=Tensor[(1, 12, 128, 64), float32] */;
  %129 = transpose(%128, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 128, 12, 64), float32] */;
  %130 = reshape(%129, newshape=[128, 768]) /* ty=Tensor[(128, 768), float32] */;

  %131 = nn.contrib_dense_pack(%130, meta[relay.Constant][45] /* ty=Tensor[(96, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(128, 768), float32] */;
  %132 = reshape(%131, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float32] */;
  %133 = add(%132, meta[relay.Constant][46] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 128, 768), float32] */;
  %134 = add(%100, %133) /* ty=Tensor[(1, 128, 768), float32] */;
  %135 = nn.layer_norm(%134, meta[relay.Constant][47] /* ty=Tensor[(768), float32] */, meta[relay.Constant][48] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 128, 768), float32] */;
  %136 = reshape(%135, newshape=[-1, 768]) /* ty=Tensor[(128, 768), float32] */;

  %137 = nn.contrib_dense_pack(%136, meta[relay.Constant][49] /* ty=Tensor[(384, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(128, 3072), float32] */;
  %138 = reshape(%137, newshape=[1, 128, 3072]) /* ty=Tensor[(1, 128, 3072), float32] */;
  %139 = add(%138, meta[relay.Constant][50] /* ty=Tensor[(3072), float32] */) /* ty=Tensor[(1, 128, 3072), float32] */;
  %140 = multiply(%139, 0.707107f /* ty=float32 */) /* ty=Tensor[(1, 128, 3072), float32] */;
  %141 = erf(%140) /* ty=Tensor[(1, 128, 3072), float32] */;
  %142 = multiply(%141, 0.5f /* ty=float32 */) /* ty=Tensor[(1, 128, 3072), float32] */;
  %143 = add(0.5f /* ty=float32 */, %142) /* ty=Tensor[(1, 128, 3072), float32] */;
  %144 = multiply(%139, %143) /* ty=Tensor[(1, 128, 3072), float32] */;
  %145 = reshape(%144, newshape=[-1, 3072]) /* ty=Tensor[(128, 3072), float32] */;

  %146 = nn.contrib_dense_pack(%145, meta[relay.Constant][51] /* ty=Tensor[(96, 3072, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(128, 768), float32] */;
  %147 = reshape(%146, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float32] */;
  %148 = add(%147, meta[relay.Constant][52] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 128, 768), float32] */;
  %149 = add(%134, %148) /* ty=Tensor[(1, 128, 768), float32] */;
  %150 = nn.layer_norm(%149, meta[relay.Constant][54] /* ty=Tensor[(768), float32] */, meta[relay.Constant][55] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 128, 768), float32] */;
  %151 = reshape(%150, newshape=[-1, 768]) /* ty=Tensor[(128, 768), float32] */;
  
  %152 = nn.contrib_dense_pack(%151, meta[relay.Constant][56] /* ty=Tensor[(96, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(128, 768), float32] */;
  %153 = reshape(%152, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float32] */;
  %154 = add(%153, meta[relay.Constant][57] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 128, 768), float32] */;
  %155 = reshape(%154, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), float32] */;
  %156 = transpose(%155, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 128, 64), float32] */;
  %157 = nn.contrib_dense_pack(%151, meta[relay.Constant][58] /* ty=Tensor[(96, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(128, 768), float32] */;
  %158 = reshape(%157, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float32] */;
  %159 = add(%158, meta[relay.Constant][59] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 128, 768), float32] */;
  %160 = reshape(%159, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), float32] */;
  %161 = transpose(%160, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 128, 64), float32] */;
  %162 = reshape(%156, newshape=[-1, 128, 64]) /* ty=Tensor[(12, 128, 64), float32] */;
  %163 = reshape(%161, newshape=[-1, 128, 64]) /* ty=Tensor[(12, 128, 64), float32] */;
  %164 = nn.batch_matmul(%162, %163, transpose_b=True) /* ty=Tensor[(12, 128, 128), float32] */;
  %165 = reshape(%164, newshape=[1, 12, 128, 128]) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  %166 = multiply(%165, 0.125f /* ty=float32 */) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  %167 = where(meta[relay.Constant][53] /* ty=Tensor[(1, 1, 128, 128), bool] */, -inff /* ty=float32 */, %166) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  %168 = nn.softmax(%167) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  %169 = nn.contrib_dense_pack(%151, meta[relay.Constant][60] /* ty=Tensor[(96, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(128, 768), float32] */;
  %170 = reshape(%169, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float32] */;
  %171 = add(%170, meta[relay.Constant][61] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 128, 768), float32] */;
  %172 = reshape(%171, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), float32] */;
  %173 = transpose(%172, axes=[0, 2, 3, 1]) /* ty=Tensor[(1, 12, 64, 128), float32] */;
  %174 = reshape(%168, newshape=[-1, 128, 128]) /* ty=Tensor[(12, 128, 128), float32] */;
  %175 = reshape(%173, newshape=[-1, 64, 128]) /* ty=Tensor[(12, 64, 128), float32] */;
  %176 = nn.batch_matmul(%174, %175, transpose_b=True) /* ty=Tensor[(12, 128, 64), float32] */;
  %177 = reshape(%176, newshape=[1, 12, 128, 64]) /* ty=Tensor[(1, 12, 128, 64), float32] */;
  %178 = transpose(%177, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 128, 12, 64), float32] */;
  %179 = reshape(%178, newshape=[128, 768]) /* ty=Tensor[(128, 768), float32] */;
  %180 = nn.contrib_dense_pack(%179, meta[relay.Constant][62] /* ty=Tensor[(96, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(128, 768), float32] */;
  %181 = reshape(%180, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float32] */;
  %182 = add(%181, meta[relay.Constant][63] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 128, 768), float32] */;
  %183 = add(%149, %182) /* ty=Tensor[(1, 128, 768), float32] */;
  %184 = nn.layer_norm(%183, meta[relay.Constant][64] /* ty=Tensor[(768), float32] */, meta[relay.Constant][65] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 128, 768), float32] */;
  %185 = reshape(%184, newshape=[-1, 768]) /* ty=Tensor[(128, 768), float32] */;
  %186 = nn.contrib_dense_pack(%185, meta[relay.Constant][66] /* ty=Tensor[(384, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(128, 3072), float32] */;
  %187 = reshape(%186, newshape=[1, 128, 3072]) /* ty=Tensor[(1, 128, 3072), float32] */;
  %188 = add(%187, meta[relay.Constant][67] /* ty=Tensor[(3072), float32] */) /* ty=Tensor[(1, 128, 3072), float32] */;
  %189 = multiply(%188, 0.707107f /* ty=float32 */) /* ty=Tensor[(1, 128, 3072), float32] */;
  %190 = erf(%189) /* ty=Tensor[(1, 128, 3072), float32] */;
  %191 = multiply(%190, 0.5f /* ty=float32 */) /* ty=Tensor[(1, 128, 3072), float32] */;
  %192 = add(0.5f /* ty=float32 */, %191) /* ty=Tensor[(1, 128, 3072), float32] */;
  %193 = multiply(%188, %192) /* ty=Tensor[(1, 128, 3072), float32] */;
  %194 = reshape(%193, newshape=[-1, 3072]) /* ty=Tensor[(128, 3072), float32] */;
  %195 = nn.contrib_dense_pack(%194, meta[relay.Constant][68] /* ty=Tensor[(96, 3072, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(128, 768), float32] */;
  %196 = reshape(%195, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float32] */;
  %197 = add(%196, meta[relay.Constant][69] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 128, 768), float32] */;
  %198 = add(%183, %197) /* ty=Tensor[(1, 128, 768), float32] */;
  %199 = nn.layer_norm(%198, meta[relay.Constant][71] /* ty=Tensor[(768), float32] */, meta[relay.Constant][72] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 128, 768), float32] */;
  %200 = reshape(%199, newshape=[-1, 768]) /* ty=Tensor[(128, 768), float32] */;
  %201 = nn.contrib_dense_pack(%200, meta[relay.Constant][73] /* ty=Tensor[(96, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(128, 768), float32] */;
  %202 = reshape(%201, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float32] */;
  %203 = add(%202, meta[relay.Constant][74] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 128, 768), float32] */;
  %204 = reshape(%203, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), float32] */;
  %205 = transpose(%204, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 128, 64), float32] */;
  %206 = nn.contrib_dense_pack(%200, meta[relay.Constant][75] /* ty=Tensor[(96, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(128, 768), float32] */;
  %207 = reshape(%206, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float32] */;
  %208 = add(%207, meta[relay.Constant][76] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 128, 768), float32] */;
  %209 = reshape(%208, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), float32] */;
  %210 = transpose(%209, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 128, 64), float32] */;
  %211 = reshape(%205, newshape=[-1, 128, 64]) /* ty=Tensor[(12, 128, 64), float32] */;
  %212 = reshape(%210, newshape=[-1, 128, 64]) /* ty=Tensor[(12, 128, 64), float32] */;
  %213 = nn.batch_matmul(%211, %212, transpose_b=True) /* ty=Tensor[(12, 128, 128), float32] */;
  %214 = reshape(%213, newshape=[1, 12, 128, 128]) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  %215 = multiply(%214, 0.125f /* ty=float32 */) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  %216 = where(meta[relay.Constant][70] /* ty=Tensor[(1, 1, 128, 128), bool] */, -inff /* ty=float32 */, %215) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  %217 = nn.softmax(%216) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  %218 = nn.contrib_dense_pack(%200, meta[relay.Constant][77] /* ty=Tensor[(96, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(128, 768), float32] */;
  %219 = reshape(%218, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float32] */;
  %220 = add(%219, meta[relay.Constant][78] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 128, 768), float32] */;
  %221 = reshape(%220, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), float32] */;
  %222 = transpose(%221, axes=[0, 2, 3, 1]) /* ty=Tensor[(1, 12, 64, 128), float32] */;
  %223 = reshape(%217, newshape=[-1, 128, 128]) /* ty=Tensor[(12, 128, 128), float32] */;
  %224 = reshape(%222, newshape=[-1, 64, 128]) /* ty=Tensor[(12, 64, 128), float32] */;
  %225 = nn.batch_matmul(%223, %224, transpose_b=True) /* ty=Tensor[(12, 128, 64), float32] */;
  %226 = reshape(%225, newshape=[1, 12, 128, 64]) /* ty=Tensor[(1, 12, 128, 64), float32] */;
  %227 = transpose(%226, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 128, 12, 64), float32] */;
  %228 = reshape(%227, newshape=[128, 768]) /* ty=Tensor[(128, 768), float32] */;
  %229 = nn.contrib_dense_pack(%228, meta[relay.Constant][79] /* ty=Tensor[(96, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(128, 768), float32] */;
  %230 = reshape(%229, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float32] */;
  %231 = add(%230, meta[relay.Constant][80] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 128, 768), float32] */;
  %232 = add(%198, %231) /* ty=Tensor[(1, 128, 768), float32] */;
  %233 = nn.layer_norm(%232, meta[relay.Constant][81] /* ty=Tensor[(768), float32] */, meta[relay.Constant][82] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 128, 768), float32] */;
  %234 = reshape(%233, newshape=[-1, 768]) /* ty=Tensor[(128, 768), float32] */;
  %235 = nn.contrib_dense_pack(%234, meta[relay.Constant][83] /* ty=Tensor[(384, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(128, 3072), float32] */;
  %236 = reshape(%235, newshape=[1, 128, 3072]) /* ty=Tensor[(1, 128, 3072), float32] */;
  %237 = add(%236, meta[relay.Constant][84] /* ty=Tensor[(3072), float32] */) /* ty=Tensor[(1, 128, 3072), float32] */;
  %238 = multiply(%237, 0.707107f /* ty=float32 */) /* ty=Tensor[(1, 128, 3072), float32] */;
  %239 = erf(%238) /* ty=Tensor[(1, 128, 3072), float32] */;
  %240 = multiply(%239, 0.5f /* ty=float32 */) /* ty=Tensor[(1, 128, 3072), float32] */;
  %241 = add(0.5f /* ty=float32 */, %240) /* ty=Tensor[(1, 128, 3072), float32] */;
  %242 = multiply(%237, %241) /* ty=Tensor[(1, 128, 3072), float32] */;
  %243 = reshape(%242, newshape=[-1, 3072]) /* ty=Tensor[(128, 3072), float32] */;
  %244 = nn.contrib_dense_pack(%243, meta[relay.Constant][85] /* ty=Tensor[(96, 3072, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(128, 768), float32] */;
  %245 = reshape(%244, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float32] */;
  %246 = add(%245, meta[relay.Constant][86] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 128, 768), float32] */;
  %247 = add(%232, %246) /* ty=Tensor[(1, 128, 768), float32] */;
  %248 = nn.layer_norm(%247, meta[relay.Constant][88] /* ty=Tensor[(768), float32] */, meta[relay.Constant][89] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 128, 768), float32] */;
  %249 = reshape(%248, newshape=[-1, 768]) /* ty=Tensor[(128, 768), float32] */;
  %250 = nn.contrib_dense_pack(%249, meta[relay.Constant][90] /* ty=Tensor[(96, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(128, 768), float32] */;
  %251 = reshape(%250, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float32] */;
  %252 = add(%251, meta[relay.Constant][91] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 128, 768), float32] */;
  %253 = reshape(%252, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), float32] */;
  %254 = transpose(%253, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 128, 64), float32] */;
  %255 = nn.contrib_dense_pack(%249, meta[relay.Constant][92] /* ty=Tensor[(96, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(128, 768), float32] */;
  %256 = reshape(%255, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float32] */;
  %257 = add(%256, meta[relay.Constant][93] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 128, 768), float32] */;
  %258 = reshape(%257, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), float32] */;
  %259 = transpose(%258, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 128, 64), float32] */;
  %260 = reshape(%254, newshape=[-1, 128, 64]) /* ty=Tensor[(12, 128, 64), float32] */;
  %261 = reshape(%259, newshape=[-1, 128, 64]) /* ty=Tensor[(12, 128, 64), float32] */;
  %262 = nn.batch_matmul(%260, %261, transpose_b=True) /* ty=Tensor[(12, 128, 128), float32] */;
  %263 = reshape(%262, newshape=[1, 12, 128, 128]) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  %264 = multiply(%263, 0.125f /* ty=float32 */) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  %265 = where(meta[relay.Constant][87] /* ty=Tensor[(1, 1, 128, 128), bool] */, -inff /* ty=float32 */, %264) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  %266 = nn.softmax(%265) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  %267 = nn.contrib_dense_pack(%249, meta[relay.Constant][94] /* ty=Tensor[(96, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(128, 768), float32] */;
  %268 = reshape(%267, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float32] */;
  %269 = add(%268, meta[relay.Constant][95] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 128, 768), float32] */;
  %270 = reshape(%269, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), float32] */;
  %271 = transpose(%270, axes=[0, 2, 3, 1]) /* ty=Tensor[(1, 12, 64, 128), float32] */;
  %272 = reshape(%266, newshape=[-1, 128, 128]) /* ty=Tensor[(12, 128, 128), float32] */;
  %273 = reshape(%271, newshape=[-1, 64, 128]) /* ty=Tensor[(12, 64, 128), float32] */;
  %274 = nn.batch_matmul(%272, %273, transpose_b=True) /* ty=Tensor[(12, 128, 64), float32] */;
  %275 = reshape(%274, newshape=[1, 12, 128, 64]) /* ty=Tensor[(1, 12, 128, 64), float32] */;
  %276 = transpose(%275, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 128, 12, 64), float32] */;
  %277 = reshape(%276, newshape=[128, 768]) /* ty=Tensor[(128, 768), float32] */;
  %278 = nn.contrib_dense_pack(%277, meta[relay.Constant][96] /* ty=Tensor[(96, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(128, 768), float32] */;
  %279 = reshape(%278, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float32] */;
  %280 = add(%279, meta[relay.Constant][97] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 128, 768), float32] */;
  %281 = add(%247, %280) /* ty=Tensor[(1, 128, 768), float32] */;
  %282 = nn.layer_norm(%281, meta[relay.Constant][98] /* ty=Tensor[(768), float32] */, meta[relay.Constant][99] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 128, 768), float32] */;
  %283 = reshape(%282, newshape=[-1, 768]) /* ty=Tensor[(128, 768), float32] */;
  %284 = nn.contrib_dense_pack(%283, meta[relay.Constant][100] /* ty=Tensor[(384, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(128, 3072), float32] */;
  %285 = reshape(%284, newshape=[1, 128, 3072]) /* ty=Tensor[(1, 128, 3072), float32] */;
  %286 = add(%285, meta[relay.Constant][101] /* ty=Tensor[(3072), float32] */) /* ty=Tensor[(1, 128, 3072), float32] */;
  %287 = multiply(%286, 0.707107f /* ty=float32 */) /* ty=Tensor[(1, 128, 3072), float32] */;
  %288 = erf(%287) /* ty=Tensor[(1, 128, 3072), float32] */;
  %289 = multiply(%288, 0.5f /* ty=float32 */) /* ty=Tensor[(1, 128, 3072), float32] */;
  %290 = add(0.5f /* ty=float32 */, %289) /* ty=Tensor[(1, 128, 3072), float32] */;
  %291 = multiply(%286, %290) /* ty=Tensor[(1, 128, 3072), float32] */;
  %292 = reshape(%291, newshape=[-1, 3072]) /* ty=Tensor[(128, 3072), float32] */;
  %293 = nn.contrib_dense_pack(%292, meta[relay.Constant][102] /* ty=Tensor[(96, 3072, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(128, 768), float32] */;
  %294 = reshape(%293, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float32] */;
  %295 = add(%294, meta[relay.Constant][103] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 128, 768), float32] */;
  %296 = add(%281, %295) /* ty=Tensor[(1, 128, 768), float32] */;
  %297 = nn.layer_norm(%296, meta[relay.Constant][105] /* ty=Tensor[(768), float32] */, meta[relay.Constant][106] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 128, 768), float32] */;
  %298 = reshape(%297, newshape=[-1, 768]) /* ty=Tensor[(128, 768), float32] */;
  %299 = nn.contrib_dense_pack(%298, meta[relay.Constant][107] /* ty=Tensor[(96, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(128, 768), float32] */;
  %300 = reshape(%299, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float32] */;
  %301 = add(%300, meta[relay.Constant][108] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 128, 768), float32] */;
  %302 = reshape(%301, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), float32] */;
  %303 = transpose(%302, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 128, 64), float32] */;
  %304 = nn.contrib_dense_pack(%298, meta[relay.Constant][109] /* ty=Tensor[(96, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(128, 768), float32] */;
  %305 = reshape(%304, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float32] */;
  %306 = add(%305, meta[relay.Constant][110] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 128, 768), float32] */;
  %307 = reshape(%306, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), float32] */;
  %308 = transpose(%307, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 128, 64), float32] */;
  %309 = reshape(%303, newshape=[-1, 128, 64]) /* ty=Tensor[(12, 128, 64), float32] */;
  %310 = reshape(%308, newshape=[-1, 128, 64]) /* ty=Tensor[(12, 128, 64), float32] */;
  %311 = nn.batch_matmul(%309, %310, transpose_b=True) /* ty=Tensor[(12, 128, 128), float32] */;
  %312 = reshape(%311, newshape=[1, 12, 128, 128]) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  %313 = multiply(%312, 0.125f /* ty=float32 */) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  %314 = where(meta[relay.Constant][104] /* ty=Tensor[(1, 1, 128, 128), bool] */, -inff /* ty=float32 */, %313) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  %315 = nn.softmax(%314) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  %316 = nn.contrib_dense_pack(%298, meta[relay.Constant][111] /* ty=Tensor[(96, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(128, 768), float32] */;
  %317 = reshape(%316, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float32] */;
  %318 = add(%317, meta[relay.Constant][112] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 128, 768), float32] */;
  %319 = reshape(%318, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), float32] */;
  %320 = transpose(%319, axes=[0, 2, 3, 1]) /* ty=Tensor[(1, 12, 64, 128), float32] */;
  %321 = reshape(%315, newshape=[-1, 128, 128]) /* ty=Tensor[(12, 128, 128), float32] */;
  %322 = reshape(%320, newshape=[-1, 64, 128]) /* ty=Tensor[(12, 64, 128), float32] */;
  %323 = nn.batch_matmul(%321, %322, transpose_b=True) /* ty=Tensor[(12, 128, 64), float32] */;
  %324 = reshape(%323, newshape=[1, 12, 128, 64]) /* ty=Tensor[(1, 12, 128, 64), float32] */;
  %325 = transpose(%324, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 128, 12, 64), float32] */;
  %326 = reshape(%325, newshape=[128, 768]) /* ty=Tensor[(128, 768), float32] */;
  %327 = nn.contrib_dense_pack(%326, meta[relay.Constant][113] /* ty=Tensor[(96, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(128, 768), float32] */;
  %328 = reshape(%327, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float32] */;
  %329 = add(%328, meta[relay.Constant][114] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 128, 768), float32] */;
  %330 = add(%296, %329) /* ty=Tensor[(1, 128, 768), float32] */;
  %331 = nn.layer_norm(%330, meta[relay.Constant][115] /* ty=Tensor[(768), float32] */, meta[relay.Constant][116] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 128, 768), float32] */;
  %332 = reshape(%331, newshape=[-1, 768]) /* ty=Tensor[(128, 768), float32] */;
  %333 = nn.contrib_dense_pack(%332, meta[relay.Constant][117] /* ty=Tensor[(384, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(128, 3072), float32] */;
  %334 = reshape(%333, newshape=[1, 128, 3072]) /* ty=Tensor[(1, 128, 3072), float32] */;
  %335 = add(%334, meta[relay.Constant][118] /* ty=Tensor[(3072), float32] */) /* ty=Tensor[(1, 128, 3072), float32] */;
  %336 = multiply(%335, 0.707107f /* ty=float32 */) /* ty=Tensor[(1, 128, 3072), float32] */;
  %337 = erf(%336) /* ty=Tensor[(1, 128, 3072), float32] */;
  %338 = multiply(%337, 0.5f /* ty=float32 */) /* ty=Tensor[(1, 128, 3072), float32] */;
  %339 = add(0.5f /* ty=float32 */, %338) /* ty=Tensor[(1, 128, 3072), float32] */;
  %340 = multiply(%335, %339) /* ty=Tensor[(1, 128, 3072), float32] */;
  %341 = reshape(%340, newshape=[-1, 3072]) /* ty=Tensor[(128, 3072), float32] */;
  %342 = nn.contrib_dense_pack(%341, meta[relay.Constant][119] /* ty=Tensor[(96, 3072, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(128, 768), float32] */;
  %343 = reshape(%342, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float32] */;
  %344 = add(%343, meta[relay.Constant][120] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 128, 768), float32] */;
  %345 = add(%330, %344) /* ty=Tensor[(1, 128, 768), float32] */;
  %346 = nn.layer_norm(%345, meta[relay.Constant][122] /* ty=Tensor[(768), float32] */, meta[relay.Constant][123] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 128, 768), float32] */;
  %347 = reshape(%346, newshape=[-1, 768]) /* ty=Tensor[(128, 768), float32] */;
  %348 = nn.contrib_dense_pack(%347, meta[relay.Constant][124] /* ty=Tensor[(96, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(128, 768), float32] */;
  %349 = reshape(%348, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float32] */;
  %350 = add(%349, meta[relay.Constant][125] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 128, 768), float32] */;
  %351 = reshape(%350, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), float32] */;
  %352 = transpose(%351, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 128, 64), float32] */;
  %353 = nn.contrib_dense_pack(%347, meta[relay.Constant][126] /* ty=Tensor[(96, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(128, 768), float32] */;
  %354 = reshape(%353, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float32] */;
  %355 = add(%354, meta[relay.Constant][127] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 128, 768), float32] */;
  %356 = reshape(%355, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), float32] */;
  %357 = transpose(%356, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 128, 64), float32] */;
  %358 = reshape(%352, newshape=[-1, 128, 64]) /* ty=Tensor[(12, 128, 64), float32] */;
  %359 = reshape(%357, newshape=[-1, 128, 64]) /* ty=Tensor[(12, 128, 64), float32] */;
  %360 = nn.batch_matmul(%358, %359, transpose_b=True) /* ty=Tensor[(12, 128, 128), float32] */;
  %361 = reshape(%360, newshape=[1, 12, 128, 128]) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  %362 = multiply(%361, 0.125f /* ty=float32 */) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  %363 = where(meta[relay.Constant][121] /* ty=Tensor[(1, 1, 128, 128), bool] */, -inff /* ty=float32 */, %362) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  %364 = nn.softmax(%363) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  %365 = nn.contrib_dense_pack(%347, meta[relay.Constant][128] /* ty=Tensor[(96, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(128, 768), float32] */;
  %366 = reshape(%365, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float32] */;
  %367 = add(%366, meta[relay.Constant][129] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 128, 768), float32] */;
  %368 = reshape(%367, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), float32] */;
  %369 = transpose(%368, axes=[0, 2, 3, 1]) /* ty=Tensor[(1, 12, 64, 128), float32] */;
  %370 = reshape(%364, newshape=[-1, 128, 128]) /* ty=Tensor[(12, 128, 128), float32] */;
  %371 = reshape(%369, newshape=[-1, 64, 128]) /* ty=Tensor[(12, 64, 128), float32] */;
  %372 = nn.batch_matmul(%370, %371, transpose_b=True) /* ty=Tensor[(12, 128, 64), float32] */;
  %373 = reshape(%372, newshape=[1, 12, 128, 64]) /* ty=Tensor[(1, 12, 128, 64), float32] */;
  %374 = transpose(%373, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 128, 12, 64), float32] */;
  %375 = reshape(%374, newshape=[128, 768]) /* ty=Tensor[(128, 768), float32] */;
  %376 = nn.contrib_dense_pack(%375, meta[relay.Constant][130] /* ty=Tensor[(96, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(128, 768), float32] */;
  %377 = reshape(%376, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float32] */;
  %378 = add(%377, meta[relay.Constant][131] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 128, 768), float32] */;
  %379 = add(%345, %378) /* ty=Tensor[(1, 128, 768), float32] */;
  %380 = nn.layer_norm(%379, meta[relay.Constant][132] /* ty=Tensor[(768), float32] */, meta[relay.Constant][133] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 128, 768), float32] */;
  %381 = reshape(%380, newshape=[-1, 768]) /* ty=Tensor[(128, 768), float32] */;
  %382 = nn.contrib_dense_pack(%381, meta[relay.Constant][134] /* ty=Tensor[(384, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(128, 3072), float32] */;
  %383 = reshape(%382, newshape=[1, 128, 3072]) /* ty=Tensor[(1, 128, 3072), float32] */;
  %384 = add(%383, meta[relay.Constant][135] /* ty=Tensor[(3072), float32] */) /* ty=Tensor[(1, 128, 3072), float32] */;
  %385 = multiply(%384, 0.707107f /* ty=float32 */) /* ty=Tensor[(1, 128, 3072), float32] */;
  %386 = erf(%385) /* ty=Tensor[(1, 128, 3072), float32] */;
  %387 = multiply(%386, 0.5f /* ty=float32 */) /* ty=Tensor[(1, 128, 3072), float32] */;
  %388 = add(0.5f /* ty=float32 */, %387) /* ty=Tensor[(1, 128, 3072), float32] */;
  %389 = multiply(%384, %388) /* ty=Tensor[(1, 128, 3072), float32] */;
  %390 = reshape(%389, newshape=[-1, 3072]) /* ty=Tensor[(128, 3072), float32] */;
  %391 = nn.contrib_dense_pack(%390, meta[relay.Constant][136] /* ty=Tensor[(96, 3072, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(128, 768), float32] */;
  %392 = reshape(%391, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float32] */;
  %393 = add(%392, meta[relay.Constant][137] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 128, 768), float32] */;
  %394 = add(%379, %393) /* ty=Tensor[(1, 128, 768), float32] */;
  %395 = nn.layer_norm(%394, meta[relay.Constant][139] /* ty=Tensor[(768), float32] */, meta[relay.Constant][140] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 128, 768), float32] */;
  %396 = reshape(%395, newshape=[-1, 768]) /* ty=Tensor[(128, 768), float32] */;
  %397 = nn.contrib_dense_pack(%396, meta[relay.Constant][141] /* ty=Tensor[(96, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(128, 768), float32] */;
  %398 = reshape(%397, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float32] */;
  %399 = add(%398, meta[relay.Constant][142] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 128, 768), float32] */;
  %400 = reshape(%399, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), float32] */;
  %401 = transpose(%400, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 128, 64), float32] */;
  %402 = nn.contrib_dense_pack(%396, meta[relay.Constant][143] /* ty=Tensor[(96, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(128, 768), float32] */;
  %403 = reshape(%402, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float32] */;
  %404 = add(%403, meta[relay.Constant][144] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 128, 768), float32] */;
  %405 = reshape(%404, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), float32] */;
  %406 = transpose(%405, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 128, 64), float32] */;
  %407 = reshape(%401, newshape=[-1, 128, 64]) /* ty=Tensor[(12, 128, 64), float32] */;
  %408 = reshape(%406, newshape=[-1, 128, 64]) /* ty=Tensor[(12, 128, 64), float32] */;
  %409 = nn.batch_matmul(%407, %408, transpose_b=True) /* ty=Tensor[(12, 128, 128), float32] */;
  %410 = reshape(%409, newshape=[1, 12, 128, 128]) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  %411 = multiply(%410, 0.125f /* ty=float32 */) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  %412 = where(meta[relay.Constant][138] /* ty=Tensor[(1, 1, 128, 128), bool] */, -inff /* ty=float32 */, %411) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  %413 = nn.softmax(%412) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  %414 = nn.contrib_dense_pack(%396, meta[relay.Constant][145] /* ty=Tensor[(96, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(128, 768), float32] */;
  %415 = reshape(%414, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float32] */;
  %416 = add(%415, meta[relay.Constant][146] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 128, 768), float32] */;
  %417 = reshape(%416, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), float32] */;
  %418 = transpose(%417, axes=[0, 2, 3, 1]) /* ty=Tensor[(1, 12, 64, 128), float32] */;
  %419 = reshape(%413, newshape=[-1, 128, 128]) /* ty=Tensor[(12, 128, 128), float32] */;
  %420 = reshape(%418, newshape=[-1, 64, 128]) /* ty=Tensor[(12, 64, 128), float32] */;
  %421 = nn.batch_matmul(%419, %420, transpose_b=True) /* ty=Tensor[(12, 128, 64), float32] */;
  %422 = reshape(%421, newshape=[1, 12, 128, 64]) /* ty=Tensor[(1, 12, 128, 64), float32] */;
  %423 = transpose(%422, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 128, 12, 64), float32] */;
  %424 = reshape(%423, newshape=[128, 768]) /* ty=Tensor[(128, 768), float32] */;
  %425 = nn.contrib_dense_pack(%424, meta[relay.Constant][147] /* ty=Tensor[(96, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(128, 768), float32] */;
  %426 = reshape(%425, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float32] */;
  %427 = add(%426, meta[relay.Constant][148] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 128, 768), float32] */;
  %428 = add(%394, %427) /* ty=Tensor[(1, 128, 768), float32] */;
  %429 = nn.layer_norm(%428, meta[relay.Constant][149] /* ty=Tensor[(768), float32] */, meta[relay.Constant][150] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 128, 768), float32] */;
  %430 = reshape(%429, newshape=[-1, 768]) /* ty=Tensor[(128, 768), float32] */;
  %431 = nn.contrib_dense_pack(%430, meta[relay.Constant][151] /* ty=Tensor[(384, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(128, 3072), float32] */;
  %432 = reshape(%431, newshape=[1, 128, 3072]) /* ty=Tensor[(1, 128, 3072), float32] */;
  %433 = add(%432, meta[relay.Constant][152] /* ty=Tensor[(3072), float32] */) /* ty=Tensor[(1, 128, 3072), float32] */;
  %434 = multiply(%433, 0.707107f /* ty=float32 */) /* ty=Tensor[(1, 128, 3072), float32] */;
  %435 = erf(%434) /* ty=Tensor[(1, 128, 3072), float32] */;
  %436 = multiply(%435, 0.5f /* ty=float32 */) /* ty=Tensor[(1, 128, 3072), float32] */;
  %437 = add(0.5f /* ty=float32 */, %436) /* ty=Tensor[(1, 128, 3072), float32] */;
  %438 = multiply(%433, %437) /* ty=Tensor[(1, 128, 3072), float32] */;
  %439 = reshape(%438, newshape=[-1, 3072]) /* ty=Tensor[(128, 3072), float32] */;
  %440 = nn.contrib_dense_pack(%439, meta[relay.Constant][153] /* ty=Tensor[(96, 3072, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(128, 768), float32] */;
  %441 = reshape(%440, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float32] */;
  %442 = add(%441, meta[relay.Constant][154] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 128, 768), float32] */;
  %443 = add(%428, %442) /* ty=Tensor[(1, 128, 768), float32] */;
  %444 = nn.layer_norm(%443, meta[relay.Constant][156] /* ty=Tensor[(768), float32] */, meta[relay.Constant][157] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 128, 768), float32] */;
  %445 = reshape(%444, newshape=[-1, 768]) /* ty=Tensor[(128, 768), float32] */;
  %446 = nn.contrib_dense_pack(%445, meta[relay.Constant][158] /* ty=Tensor[(96, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(128, 768), float32] */;
  %447 = reshape(%446, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float32] */;
  %448 = add(%447, meta[relay.Constant][159] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 128, 768), float32] */;
  %449 = reshape(%448, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), float32] */;
  %450 = transpose(%449, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 128, 64), float32] */;
  %451 = nn.contrib_dense_pack(%445, meta[relay.Constant][160] /* ty=Tensor[(96, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(128, 768), float32] */;
  %452 = reshape(%451, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float32] */;
  %453 = add(%452, meta[relay.Constant][161] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 128, 768), float32] */;
  %454 = reshape(%453, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), float32] */;
  %455 = transpose(%454, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 128, 64), float32] */;
  %456 = reshape(%450, newshape=[-1, 128, 64]) /* ty=Tensor[(12, 128, 64), float32] */;
  %457 = reshape(%455, newshape=[-1, 128, 64]) /* ty=Tensor[(12, 128, 64), float32] */;
  %458 = nn.batch_matmul(%456, %457, transpose_b=True) /* ty=Tensor[(12, 128, 128), float32] */;
  %459 = reshape(%458, newshape=[1, 12, 128, 128]) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  %460 = multiply(%459, 0.125f /* ty=float32 */) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  %461 = where(meta[relay.Constant][155] /* ty=Tensor[(1, 1, 128, 128), bool] */, -inff /* ty=float32 */, %460) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  %462 = nn.softmax(%461) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  %463 = nn.contrib_dense_pack(%445, meta[relay.Constant][162] /* ty=Tensor[(96, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(128, 768), float32] */;
  %464 = reshape(%463, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float32] */;
  %465 = add(%464, meta[relay.Constant][163] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 128, 768), float32] */;
  %466 = reshape(%465, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), float32] */;
  %467 = transpose(%466, axes=[0, 2, 3, 1]) /* ty=Tensor[(1, 12, 64, 128), float32] */;
  %468 = reshape(%462, newshape=[-1, 128, 128]) /* ty=Tensor[(12, 128, 128), float32] */;
  %469 = reshape(%467, newshape=[-1, 64, 128]) /* ty=Tensor[(12, 64, 128), float32] */;
  %470 = nn.batch_matmul(%468, %469, transpose_b=True) /* ty=Tensor[(12, 128, 64), float32] */;
  %471 = reshape(%470, newshape=[1, 12, 128, 64]) /* ty=Tensor[(1, 12, 128, 64), float32] */;
  %472 = transpose(%471, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 128, 12, 64), float32] */;
  %473 = reshape(%472, newshape=[128, 768]) /* ty=Tensor[(128, 768), float32] */;
  %474 = nn.contrib_dense_pack(%473, meta[relay.Constant][164] /* ty=Tensor[(96, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(128, 768), float32] */;
  %475 = reshape(%474, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float32] */;
  %476 = add(%475, meta[relay.Constant][165] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 128, 768), float32] */;
  %477 = add(%443, %476) /* ty=Tensor[(1, 128, 768), float32] */;
  %478 = nn.layer_norm(%477, meta[relay.Constant][166] /* ty=Tensor[(768), float32] */, meta[relay.Constant][167] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 128, 768), float32] */;
  %479 = reshape(%478, newshape=[-1, 768]) /* ty=Tensor[(128, 768), float32] */;
  %480 = nn.contrib_dense_pack(%479, meta[relay.Constant][168] /* ty=Tensor[(384, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(128, 3072), float32] */;
  %481 = reshape(%480, newshape=[1, 128, 3072]) /* ty=Tensor[(1, 128, 3072), float32] */;
  %482 = add(%481, meta[relay.Constant][169] /* ty=Tensor[(3072), float32] */) /* ty=Tensor[(1, 128, 3072), float32] */;
  %483 = multiply(%482, 0.707107f /* ty=float32 */) /* ty=Tensor[(1, 128, 3072), float32] */;
  %484 = erf(%483) /* ty=Tensor[(1, 128, 3072), float32] */;
  %485 = multiply(%484, 0.5f /* ty=float32 */) /* ty=Tensor[(1, 128, 3072), float32] */;
  %486 = add(0.5f /* ty=float32 */, %485) /* ty=Tensor[(1, 128, 3072), float32] */;
  %487 = multiply(%482, %486) /* ty=Tensor[(1, 128, 3072), float32] */;
  %488 = reshape(%487, newshape=[-1, 3072]) /* ty=Tensor[(128, 3072), float32] */;
  %489 = nn.contrib_dense_pack(%488, meta[relay.Constant][170] /* ty=Tensor[(96, 3072, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(128, 768), float32] */;
  %490 = reshape(%489, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float32] */;
  %491 = add(%490, meta[relay.Constant][171] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 128, 768), float32] */;
  %492 = add(%477, %491) /* ty=Tensor[(1, 128, 768), float32] */;
  %493 = nn.layer_norm(%492, meta[relay.Constant][173] /* ty=Tensor[(768), float32] */, meta[relay.Constant][174] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 128, 768), float32] */;
  %494 = reshape(%493, newshape=[-1, 768]) /* ty=Tensor[(128, 768), float32] */;
  %495 = nn.contrib_dense_pack(%494, meta[relay.Constant][175] /* ty=Tensor[(96, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(128, 768), float32] */;
  %496 = reshape(%495, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float32] */;
  %497 = add(%496, meta[relay.Constant][176] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 128, 768), float32] */;
  %498 = reshape(%497, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), float32] */;
  %499 = transpose(%498, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 128, 64), float32] */;
  %500 = nn.contrib_dense_pack(%494, meta[relay.Constant][177] /* ty=Tensor[(96, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(128, 768), float32] */;
  %501 = reshape(%500, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float32] */;
  %502 = add(%501, meta[relay.Constant][178] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 128, 768), float32] */;
  %503 = reshape(%502, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), float32] */;
  %504 = transpose(%503, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 128, 64), float32] */;
  %505 = reshape(%499, newshape=[-1, 128, 64]) /* ty=Tensor[(12, 128, 64), float32] */;
  %506 = reshape(%504, newshape=[-1, 128, 64]) /* ty=Tensor[(12, 128, 64), float32] */;
  %507 = nn.batch_matmul(%505, %506, transpose_b=True) /* ty=Tensor[(12, 128, 128), float32] */;
  %508 = reshape(%507, newshape=[1, 12, 128, 128]) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  %509 = multiply(%508, 0.125f /* ty=float32 */) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  %510 = where(meta[relay.Constant][172] /* ty=Tensor[(1, 1, 128, 128), bool] */, -inff /* ty=float32 */, %509) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  %511 = nn.softmax(%510) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  %512 = nn.contrib_dense_pack(%494, meta[relay.Constant][179] /* ty=Tensor[(96, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(128, 768), float32] */;
  %513 = reshape(%512, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float32] */;
  %514 = add(%513, meta[relay.Constant][180] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 128, 768), float32] */;
  %515 = reshape(%514, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), float32] */;
  %516 = transpose(%515, axes=[0, 2, 3, 1]) /* ty=Tensor[(1, 12, 64, 128), float32] */;
  %517 = reshape(%511, newshape=[-1, 128, 128]) /* ty=Tensor[(12, 128, 128), float32] */;
  %518 = reshape(%516, newshape=[-1, 64, 128]) /* ty=Tensor[(12, 64, 128), float32] */;
  %519 = nn.batch_matmul(%517, %518, transpose_b=True) /* ty=Tensor[(12, 128, 64), float32] */;
  %520 = reshape(%519, newshape=[1, 12, 128, 64]) /* ty=Tensor[(1, 12, 128, 64), float32] */;
  %521 = transpose(%520, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 128, 12, 64), float32] */;
  %522 = reshape(%521, newshape=[128, 768]) /* ty=Tensor[(128, 768), float32] */;
  %523 = nn.contrib_dense_pack(%522, meta[relay.Constant][181] /* ty=Tensor[(96, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(128, 768), float32] */;
  %524 = reshape(%523, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float32] */;
  %525 = add(%524, meta[relay.Constant][182] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 128, 768), float32] */;
  %526 = add(%492, %525) /* ty=Tensor[(1, 128, 768), float32] */;
  %527 = nn.layer_norm(%526, meta[relay.Constant][183] /* ty=Tensor[(768), float32] */, meta[relay.Constant][184] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 128, 768), float32] */;
  %528 = reshape(%527, newshape=[-1, 768]) /* ty=Tensor[(128, 768), float32] */;
  %529 = nn.contrib_dense_pack(%528, meta[relay.Constant][185] /* ty=Tensor[(384, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(128, 3072), float32] */;
  %530 = reshape(%529, newshape=[1, 128, 3072]) /* ty=Tensor[(1, 128, 3072), float32] */;
  %531 = add(%530, meta[relay.Constant][186] /* ty=Tensor[(3072), float32] */) /* ty=Tensor[(1, 128, 3072), float32] */;
  %532 = multiply(%531, 0.707107f /* ty=float32 */) /* ty=Tensor[(1, 128, 3072), float32] */;
  %533 = erf(%532) /* ty=Tensor[(1, 128, 3072), float32] */;
  %534 = multiply(%533, 0.5f /* ty=float32 */) /* ty=Tensor[(1, 128, 3072), float32] */;
  %535 = add(0.5f /* ty=float32 */, %534) /* ty=Tensor[(1, 128, 3072), float32] */;
  %536 = multiply(%531, %535) /* ty=Tensor[(1, 128, 3072), float32] */;
  %537 = reshape(%536, newshape=[-1, 3072]) /* ty=Tensor[(128, 3072), float32] */;
  %538 = nn.contrib_dense_pack(%537, meta[relay.Constant][187] /* ty=Tensor[(96, 3072, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(128, 768), float32] */;
  %539 = reshape(%538, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float32] */;
  %540 = add(%539, meta[relay.Constant][188] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 128, 768), float32] */;
  %541 = add(%526, %540) /* ty=Tensor[(1, 128, 768), float32] */;
  %542 = nn.layer_norm(%541, meta[relay.Constant][190] /* ty=Tensor[(768), float32] */, meta[relay.Constant][191] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 128, 768), float32] */;
  %543 = reshape(%542, newshape=[-1, 768]) /* ty=Tensor[(128, 768), float32] */;
  %544 = nn.contrib_dense_pack(%543, meta[relay.Constant][192] /* ty=Tensor[(96, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(128, 768), float32] */;
  %545 = reshape(%544, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float32] */;
  %546 = add(%545, meta[relay.Constant][193] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 128, 768), float32] */;
  %547 = reshape(%546, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), float32] */;
  %548 = transpose(%547, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 128, 64), float32] */;
  %549 = nn.contrib_dense_pack(%543, meta[relay.Constant][194] /* ty=Tensor[(96, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(128, 768), float32] */;
  %550 = reshape(%549, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float32] */;
  %551 = add(%550, meta[relay.Constant][195] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 128, 768), float32] */;
  %552 = reshape(%551, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), float32] */;
  %553 = transpose(%552, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 12, 128, 64), float32] */;
  %554 = reshape(%548, newshape=[-1, 128, 64]) /* ty=Tensor[(12, 128, 64), float32] */;
  %555 = reshape(%553, newshape=[-1, 128, 64]) /* ty=Tensor[(12, 128, 64), float32] */;
  %556 = nn.batch_matmul(%554, %555, transpose_b=True) /* ty=Tensor[(12, 128, 128), float32] */;
  %557 = reshape(%556, newshape=[1, 12, 128, 128]) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  %558 = multiply(%557, 0.125f /* ty=float32 */) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  %559 = where(meta[relay.Constant][189] /* ty=Tensor[(1, 1, 128, 128), bool] */, -inff /* ty=float32 */, %558) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  %560 = nn.softmax(%559) /* ty=Tensor[(1, 12, 128, 128), float32] */;
  %561 = nn.contrib_dense_pack(%543, meta[relay.Constant][196] /* ty=Tensor[(96, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(128, 768), float32] */;
  %562 = reshape(%561, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float32] */;
  %563 = add(%562, meta[relay.Constant][197] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 128, 768), float32] */;
  %564 = reshape(%563, newshape=[1, 128, 12, 64]) /* ty=Tensor[(1, 128, 12, 64), float32] */;
  %565 = transpose(%564, axes=[0, 2, 3, 1]) /* ty=Tensor[(1, 12, 64, 128), float32] */;
  %566 = reshape(%560, newshape=[-1, 128, 128]) /* ty=Tensor[(12, 128, 128), float32] */;
  %567 = reshape(%565, newshape=[-1, 64, 128]) /* ty=Tensor[(12, 64, 128), float32] */;
  %568 = nn.batch_matmul(%566, %567, transpose_b=True) /* ty=Tensor[(12, 128, 64), float32] */;
  %569 = reshape(%568, newshape=[1, 12, 128, 64]) /* ty=Tensor[(1, 12, 128, 64), float32] */;
  %570 = transpose(%569, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 128, 12, 64), float32] */;
  %571 = reshape(%570, newshape=[128, 768]) /* ty=Tensor[(128, 768), float32] */;
  %572 = nn.contrib_dense_pack(%571, meta[relay.Constant][198] /* ty=Tensor[(96, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(128, 768), float32] */;
  %573 = reshape(%572, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float32] */;
  %574 = add(%573, meta[relay.Constant][199] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 128, 768), float32] */;
  %575 = add(%541, %574) /* ty=Tensor[(1, 128, 768), float32] */;
  %576 = nn.layer_norm(%575, meta[relay.Constant][200] /* ty=Tensor[(768), float32] */, meta[relay.Constant][201] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 128, 768), float32] */;
  %577 = reshape(%576, newshape=[-1, 768]) /* ty=Tensor[(128, 768), float32] */;
  %578 = nn.contrib_dense_pack(%577, meta[relay.Constant][202] /* ty=Tensor[(384, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(128, 3072), float32] */;
  %579 = reshape(%578, newshape=[1, 128, 3072]) /* ty=Tensor[(1, 128, 3072), float32] */;
  %580 = add(%579, meta[relay.Constant][203] /* ty=Tensor[(3072), float32] */) /* ty=Tensor[(1, 128, 3072), float32] */;
  %581 = multiply(%580, 0.707107f /* ty=float32 */) /* ty=Tensor[(1, 128, 3072), float32] */;
  %582 = erf(%581) /* ty=Tensor[(1, 128, 3072), float32] */;
  %583 = multiply(%582, 0.5f /* ty=float32 */) /* ty=Tensor[(1, 128, 3072), float32] */;
  %584 = add(0.5f /* ty=float32 */, %583) /* ty=Tensor[(1, 128, 3072), float32] */;
  %585 = multiply(%580, %584) /* ty=Tensor[(1, 128, 3072), float32] */;
  %586 = reshape(%585, newshape=[-1, 3072]) /* ty=Tensor[(128, 3072), float32] */;
  %587 = nn.contrib_dense_pack(%586, meta[relay.Constant][204] /* ty=Tensor[(96, 3072, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(128, 768), float32] */;
  %588 = reshape(%587, newshape=[1, 128, 768]) /* ty=Tensor[(1, 128, 768), float32] */;
  %589 = add(%588, meta[relay.Constant][205] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 128, 768), float32] */;
  %590 = add(%575, %589) /* ty=Tensor[(1, 128, 768), float32] */;
  %591 = nn.layer_norm(%590, meta[relay.Constant][206] /* ty=Tensor[(768), float32] */, meta[relay.Constant][207] /* ty=Tensor[(768), float32] */) /* ty=Tensor[(1, 128, 768), float32] */;
  %592 = reshape(%591, newshape=[-1, 768]) /* ty=Tensor[(128, 768), float32] */;
  %593 = nn.contrib_dense_pack(%592, meta[relay.Constant][208] /* ty=Tensor[(16, 768, 8), float32] */, units=None, out_dtype="float32", weight_layout="NC8n") /* ty=Tensor[(128, 128), float32] */;
  reshape(%593, newshape=[1, 128, 128]) /* ty=Tensor[(1, 128, 128), float32] */
}
